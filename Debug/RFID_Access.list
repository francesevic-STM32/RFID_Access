
RFID_Access.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  08007840  08007840  00008840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e4  080085e4  0000a4d4  2**0
                  CONTENTS
  4 .ARM          00000008  080085e4  080085e4  000095e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085ec  080085ec  0000a4d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085ec  080085ec  000095ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085f0  080085f0  000095f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004d4  20000000  080085f4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200004d4  08008ac8  0000a4d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08008ac8  0000a754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a4d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6ff  00000000  00000000  0000a504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002004  00000000  00000000  00018c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000231b2  00000000  00000000  0001bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012d3b  00000000  00000000  0003ee0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d49f2  00000000  00000000  00051b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00126537  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000caf  00000000  00000000  0012657a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005584  00000000  00000000  0012722c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0012c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004d4 	.word	0x200004d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007824 	.word	0x08007824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004d8 	.word	0x200004d8
 800020c:	08007824 	.word	0x08007824

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();  // Inicijalizacija HAL biblioteke
 8000edc:	f001 f86c 	bl	8001fb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();  // Konfiguracija sistemskog takta
 8000ee0:	f000 f81a 	bl	8000f18 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();  // Inicijalizacija GPIO pinova
 8000ee4:	f000 f952 	bl	800118c <MX_GPIO_Init>
	MX_SPI1_Init();  // Inicijalizacija SPI-a
 8000ee8:	f000 f8a4 	bl	8001034 <MX_SPI1_Init>
	MX_I2C1_Init();  // Inicijalizacija I2C-a
 8000eec:	f000 f874 	bl	8000fd8 <MX_I2C1_Init>
	MX_TIM2_Init();  // Inicijalizacija timera 2
 8000ef0:	f000 f8d6 	bl	80010a0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	DWT_Init();		// Inicijalizacija microSeconds funkcije (izbjegavam util.h)
 8000ef4:	f000 fde6 	bl	8001ac4 <DWT_Init>
	MFRC522_Init();  // Inicijalizacija RFID modula
 8000ef8:	f000 fb94 	bl	8001624 <MFRC522_Init>
	I2C_LCD_Init();  // Inicijalizacija LCD ekrana
 8000efc:	f000 fd49 	bl	8001992 <I2C_LCD_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Pokretanje PWM-a za piezo zvučnik
 8000f00:	2104      	movs	r1, #4
 8000f02:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <main+0x3c>)
 8000f04:	f003 f978 	bl	80041f8 <HAL_TIM_PWM_Start>
	I2C_WELCOME();  // Prikaz poruke dobrodošlice
 8000f08:	f000 fa6e 	bl	80013e8 <I2C_WELCOME>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		RFID_Process();
 8000f0c:	f000 f9a6 	bl	800125c <RFID_Process>
 8000f10:	e7fc      	b.n	8000f0c <main+0x34>
 8000f12:	bf00      	nop
 8000f14:	2000059c 	.word	0x2000059c

08000f18 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	@ 0x50
 8000f1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2234      	movs	r2, #52	@ 0x34
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 fd5b 	bl	80059e2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <SystemClock_Config+0xb8>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	4a22      	ldr	r2, [pc, #136]	@ (8000fd0 <SystemClock_Config+0xb8>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <SystemClock_Config+0xb8>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <SystemClock_Config+0xbc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <SystemClock_Config+0xbc>)
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <SystemClock_Config+0xbc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fa8b 	bl	80034a8 <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x84>
		Error_Handler();
 8000f98:	f000 fdae 	bl	8001af8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 ffc6 	bl	8002f48 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xae>
		Error_Handler();
 8000fc2:	f000 fd99 	bl	8001af8 <Error_Handler>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3750      	adds	r7, #80	@ 0x50
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	@ (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f001 faf9 	bl	800260c <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001020:	f000 fd6a 	bl	8001af8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200004f0 	.word	0x200004f0
 800102c:	40005400 	.word	0x40005400
 8001030:	000186a0 	.word	0x000186a0

08001034 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;					//naziv SPI instance
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_SPI1_Init+0x64>)
 800103a:	4a18      	ldr	r2, [pc, #96]	@ (800109c <MX_SPI1_Init+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;				//STM radi kao master
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001040:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001044:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;	//dvosmjerna komunikacija
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;		//veličina podatka je 8 bita
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;		//SCK je u 0 kad miruje
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;			//podaci se uzorkuju na prvom bridu
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;					//software kontrolira chip select
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001064:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2; //Brzina komunikacij
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;			//prvi bit je MSB
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_SPI1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001080:	220a      	movs	r2, #10
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001086:	f002 fcad 	bl	80039e4 <HAL_SPI_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001090:	f000 fd32 	bl	8001af8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000544 	.word	0x20000544
 800109c:	40013000 	.word	0x40013000

080010a0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	@ 0x38
 80010a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010da:	2210      	movs	r2, #16
 80010dc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80010e4:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010ea:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80010f8:	4823      	ldr	r0, [pc, #140]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010fa:	f002 ff81 	bl	8004000 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x68>
		Error_Handler();
 8001104:	f000 fcf8 	bl	8001af8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800110e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001112:	4619      	mov	r1, r3
 8001114:	481c      	ldr	r0, [pc, #112]	@ (8001188 <MX_TIM2_Init+0xe8>)
 8001116:	f003 fa69 	bl	80045ec <HAL_TIM_ConfigClockSource>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x84>
		Error_Handler();
 8001120:	f000 fcea 	bl	8001af8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001124:	4818      	ldr	r0, [pc, #96]	@ (8001188 <MX_TIM2_Init+0xe8>)
 8001126:	f003 f80e 	bl	8004146 <HAL_TIM_PWM_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0x94>
		Error_Handler();
 8001130:	f000 fce2 	bl	8001af8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	4619      	mov	r1, r3
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_TIM2_Init+0xe8>)
 8001144:	f003 fe36 	bl	8004db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800114e:	f000 fcd3 	bl	8001af8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001152:	2360      	movs	r3, #96	@ 0x60
 8001154:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	@ (8001188 <MX_TIM2_Init+0xe8>)
 800116a:	f003 f97d 	bl	8004468 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001174:	f000 fcc0 	bl	8001af8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <MX_TIM2_Init+0xe8>)
 800117a:	f000 fd9b 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3738      	adds	r7, #56	@ 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000059c 	.word	0x2000059c

0800118c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a29      	ldr	r2, [pc, #164]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a22      	ldr	r2, [pc, #136]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_8, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80011e0:	481c      	ldr	r0, [pc, #112]	@ (8001254 <MX_GPIO_Init+0xc8>)
 80011e2:	f001 f9f9 	bl	80025d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	481b      	ldr	r0, [pc, #108]	@ (8001258 <MX_GPIO_Init+0xcc>)
 80011ec:	f001 f9f4 	bl	80025d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011f0:	2310      	movs	r3, #16
 80011f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4813      	ldr	r0, [pc, #76]	@ (8001254 <MX_GPIO_Init+0xc8>)
 8001208:	f001 f852 	bl	80022b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	@ (8001258 <MX_GPIO_Init+0xcc>)
 8001224:	f001 f844 	bl	80022b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001232:	2302      	movs	r3, #2
 8001234:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4619      	mov	r1, r3
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_GPIO_Init+0xc8>)
 8001242:	f001 f835 	bl	80022b0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400

0800125c <RFID_Process>:

/* USER CODE BEGIN 4 */
void RFID_Process(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	// Attempt to detect a card
	status = MFRC522_Request(0x26, str); // Provjera prisutnosti kartice
 8001260:	491f      	ldr	r1, [pc, #124]	@ (80012e0 <RFID_Process+0x84>)
 8001262:	2026      	movs	r0, #38	@ 0x26
 8001264:	f000 faae 	bl	80017c4 <MFRC522_Request>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <RFID_Process+0x88>)
 800126e:	701a      	strb	r2, [r3, #0]
	if (status == 0) {
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <RFID_Process+0x88>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d131      	bne.n	80012dc <RFID_Process+0x80>
		status = MFRC522_Anticoll(str);  // Antikolidacija - dobivanje UID-a
 8001278:	4819      	ldr	r0, [pc, #100]	@ (80012e0 <RFID_Process+0x84>)
 800127a:	f000 fac8 	bl	800180e <MFRC522_Anticoll>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <RFID_Process+0x88>)
 8001284:	701a      	strb	r2, [r3, #0]
		if (status == 0) {
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <RFID_Process+0x88>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d126      	bne.n	80012dc <RFID_Process+0x80>
			memcpy(sNum, str, 5); // Kopiranje UID-a u sNum
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <RFID_Process+0x8c>)
 8001290:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <RFID_Process+0x84>)
 8001292:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001296:	6018      	str	r0, [r3, #0]
 8001298:	3304      	adds	r3, #4
 800129a:	7019      	strb	r1, [r3, #0]
			HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	@ 0x64
 800129e:	f000 fefd 	bl	800209c <HAL_Delay>
			if ((str[0] == ALLOWED_UID_0) && (str[1] == ALLOWED_UID_1)
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <RFID_Process+0x84>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b4b      	cmp	r3, #75	@ 0x4b
 80012a8:	d114      	bne.n	80012d4 <RFID_Process+0x78>
 80012aa:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <RFID_Process+0x84>)
 80012ac:	785b      	ldrb	r3, [r3, #1]
 80012ae:	2ba1      	cmp	r3, #161	@ 0xa1
 80012b0:	d110      	bne.n	80012d4 <RFID_Process+0x78>
					&& (str[2] == ALLOWED_UID_2) && (str[3] == ALLOWED_UID_3)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <RFID_Process+0x84>)
 80012b4:	789b      	ldrb	r3, [r3, #2]
 80012b6:	2ba9      	cmp	r3, #169	@ 0xa9
 80012b8:	d10c      	bne.n	80012d4 <RFID_Process+0x78>
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <RFID_Process+0x84>)
 80012bc:	78db      	ldrb	r3, [r3, #3]
 80012be:	2bc3      	cmp	r3, #195	@ 0xc3
 80012c0:	d108      	bne.n	80012d4 <RFID_Process+0x78>
					&& (str[4] == ALLOWED_UID_4)) {
 80012c2:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <RFID_Process+0x84>)
 80012c4:	791b      	ldrb	r3, [r3, #4]
 80012c6:	2b80      	cmp	r3, #128	@ 0x80
 80012c8:	d104      	bne.n	80012d4 <RFID_Process+0x78>
				//I2C_CARD((uint8_t*) str);  // Prikaz broja kartice na LCD-u
				I2C_GRANTED();  // Dozvoljen pristup
 80012ca:	f000 f847 	bl	800135c <I2C_GRANTED>
				I2C_WELCOME();
 80012ce:	f000 f88b 	bl	80013e8 <I2C_WELCOME>
				I2C_DENIED();  // Odbijen pristup
				I2C_WELCOME();
			}
		}
	}
};
 80012d2:	e003      	b.n	80012dc <RFID_Process+0x80>
				I2C_DENIED();  // Odbijen pristup
 80012d4:	f000 f80a 	bl	80012ec <I2C_DENIED>
				I2C_WELCOME();
 80012d8:	f000 f886 	bl	80013e8 <I2C_WELCOME>
};
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200005e8 	.word	0x200005e8
 80012e4:	200005e4 	.word	0x200005e4
 80012e8:	200005f8 	.word	0x200005f8

080012ec <I2C_DENIED>:
void I2C_DENIED(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	// Generate a random index
	int random_index = rand() % denied_messages_count;
 80012f2:	f003 fddb 	bl	8004eac <rand>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <I2C_DENIED+0x68>)
 80012fa:	7812      	ldrb	r2, [r2, #0]
 80012fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001300:	fb01 f202 	mul.w	r2, r1, r2
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	607b      	str	r3, [r7, #4]
	// Display the message
	I2C_LCD_Clear();
 8001308:	f000 fb6a 	bl	80019e0 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(0, 0);
 800130c:	2100      	movs	r1, #0
 800130e:	2000      	movs	r0, #0
 8001310:	f000 fb70 	bl	80019f4 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) denied_messages[random_index][0]); // First line
 8001314:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <I2C_DENIED+0x6c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fb95 	bl	8001a4c <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(0, 1);
 8001322:	2101      	movs	r1, #1
 8001324:	2000      	movs	r0, #0
 8001326:	f000 fb65 	bl	80019f4 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) denied_messages[random_index][1]); // Second line
 800132a:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <I2C_DENIED+0x6c>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fb89 	bl	8001a4c <I2C_LCD_WriteString>
	// Generiranje zvučnog signala
	GenerateTone(300, 100);
 800133a:	2164      	movs	r1, #100	@ 0x64
 800133c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001340:	f000 f882 	bl	8001448 <GenerateTone>
	// Mala pauza da korisnik vidi poruku
	HAL_Delay(2500);
 8001344:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001348:	f000 fea8 	bl	800209c <HAL_Delay>

}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	080081fc 	.word	0x080081fc
 8001358:	20000000 	.word	0x20000000

0800135c <I2C_GRANTED>:

void I2C_GRANTED(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	// Generate a random index
	int random_index = rand() % granted_messages_count;
 8001362:	f003 fda3 	bl	8004eac <rand>
 8001366:	4603      	mov	r3, r0
 8001368:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <I2C_GRANTED+0x80>)
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001370:	fb01 f202 	mul.w	r2, r1, r2
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	607b      	str	r3, [r7, #4]
	// Display the message
	I2C_LCD_Clear();
 8001378:	f000 fb32 	bl	80019e0 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(0, 0);
 800137c:	2100      	movs	r1, #0
 800137e:	2000      	movs	r0, #0
 8001380:	f000 fb38 	bl	80019f4 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) granted_messages[random_index][0]); // First line
 8001384:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <I2C_GRANTED+0x84>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fb5d 	bl	8001a4c <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(0, 1);
 8001392:	2101      	movs	r1, #1
 8001394:	2000      	movs	r0, #0
 8001396:	f000 fb2d 	bl	80019f4 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) granted_messages[random_index][1]); // Second line
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <I2C_GRANTED+0x84>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fb51 	bl	8001a4c <I2C_LCD_WriteString>
	// Aktivacija releja
	HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <I2C_GRANTED+0x88>)
 80013b2:	f001 f911 	bl	80025d8 <HAL_GPIO_WritePin>

	// Zvuk odobrenja
	GenerateTone(500, 100);
 80013b6:	2164      	movs	r1, #100	@ 0x64
 80013b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013bc:	f000 f844 	bl	8001448 <GenerateTone>

	// Drži relej uključen 5 sekundi
	HAL_Delay(2500);
 80013c0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80013c4:	f000 fe6a 	bl	800209c <HAL_Delay>

	// Isključivanje releja
	HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <I2C_GRANTED+0x88>)
 80013d0:	f001 f902 	bl	80025d8 <HAL_GPIO_WritePin>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	080081fd 	.word	0x080081fd
 80013e0:	20000140 	.word	0x20000140
 80013e4:	40020000 	.word	0x40020000

080013e8 <I2C_WELCOME>:

void I2C_WELCOME(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	// Lista šaljivih poruka za skeniranje kartice (prvi red | drugi red)
	// Generate a random index
	int random_index = rand() % welcome_messages_count;
 80013ee:	f003 fd5d 	bl	8004eac <rand>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <I2C_WELCOME+0x58>)
 80013f6:	7812      	ldrb	r2, [r2, #0]
 80013f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80013fc:	fb01 f202 	mul.w	r2, r1, r2
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	607b      	str	r3, [r7, #4]
	// Display the message
	I2C_LCD_Clear();
 8001404:	f000 faec 	bl	80019e0 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(0, 0);
 8001408:	2100      	movs	r1, #0
 800140a:	2000      	movs	r0, #0
 800140c:	f000 faf2 	bl	80019f4 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) welcome_messages[random_index][0]); // First line
 8001410:	4a0c      	ldr	r2, [pc, #48]	@ (8001444 <I2C_WELCOME+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fb17 	bl	8001a4c <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(0, 1);
 800141e:	2101      	movs	r1, #1
 8001420:	2000      	movs	r0, #0
 8001422:	f000 fae7 	bl	80019f4 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) welcome_messages[random_index][1]); // Second line
 8001426:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <I2C_WELCOME+0x5c>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fb0b 	bl	8001a4c <I2C_LCD_WriteString>
};
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	080081fe 	.word	0x080081fe
 8001444:	200002b0 	.word	0x200002b0

08001448 <GenerateTone>:
	}
	I2C_LCD_WriteString(buffer); // Prikaz drugog dijela UID-a na LCD-u
	HAL_Delay(3000);  // Zadržavanje prikaza na ekranu 3 sekunde
}

void GenerateTone(int tone, int duration_ms) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	Reset_TIM2();
 8001452:	f000 f825 	bl	80014a0 <Reset_TIM2>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  				// Pokretanje PWM-a
 8001456:	2104      	movs	r1, #4
 8001458:	4810      	ldr	r0, [pc, #64]	@ (800149c <GenerateTone+0x54>)
 800145a:	f002 fecd 	bl	80041f8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_AUTORELOAD(&htim2, tone * 2); 		// Postavljanje perioda
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	005a      	lsls	r2, r3, #1
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <GenerateTone+0x54>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	461a      	mov	r2, r3
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <GenerateTone+0x54>)
 8001470:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, tone / 2); // Podešavanje duty cycle-a na 50%
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	0fda      	lsrs	r2, r3, #31
 8001476:	4413      	add	r3, r2
 8001478:	105b      	asrs	r3, r3, #1
 800147a:	461a      	mov	r2, r3
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <GenerateTone+0x54>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(duration_ms);  								// Trajanje zvuka
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fe09 	bl	800209c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // Postavljanje duty cycle-a na 0%
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <GenerateTone+0x54>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000059c 	.word	0x2000059c

080014a0 <Reset_TIM2>:

void Reset_TIM2(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	// Zaustavi PWM na kanalu 2 kako bi se osiguralo da se timer može sigurno resetirati
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80014a4:	2104      	movs	r1, #4
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <Reset_TIM2+0x1c>)
 80014a8:	f002 ff6e 	bl	8004388 <HAL_TIM_PWM_Stop>
	// Deinicijaliziraj osnovni timer kako bi se oslobodili resursi i omogućila nova inicijalizacija
	HAL_TIM_Base_DeInit(&htim2);
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <Reset_TIM2+0x1c>)
 80014ae:	f002 fdf6 	bl	800409e <HAL_TIM_Base_DeInit>
	// Ponovno inicijaliziraj timer TIM2 s prethodno definiranim postavkama
	MX_TIM2_Init();
 80014b2:	f7ff fdf5 	bl	80010a0 <MX_TIM2_Init>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000059c 	.word	0x2000059c

080014c0 <RC522_SPI_Transfer>:

/* RC522 functions BEGIN------------------------------------------------------------------*/
uint8_t RC522_SPI_Transfer(uint8_t data) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE, &data, &rx_data, 1, 100);
 80014ca:	f107 020f 	add.w	r2, r7, #15
 80014ce:	1df9      	adds	r1, r7, #7
 80014d0:	2364      	movs	r3, #100	@ 0x64
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2301      	movs	r3, #1
 80014d6:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <RC522_SPI_Transfer+0x28>)
 80014d8:	f002 fb0d 	bl	8003af6 <HAL_SPI_TransmitReceive>
	//HSPI_instance je gdje štalje, &data - što šalje, &rx_data - gdje prima, 1-bajt, 100ms timeout
	return rx_data;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000544 	.word	0x20000544

080014ec <Write_MFRC522>:

void Write_MFRC522(uint8_t addr, uint8_t val) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	460a      	mov	r2, r1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	4613      	mov	r3, r2
 80014fa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_RESET); //aktivira RC522
 80014fc:	2200      	movs	r2, #0
 80014fe:	2110      	movs	r1, #16
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <Write_MFRC522+0x48>)
 8001502:	f001 f869 	bl	80025d8 <HAL_GPIO_WritePin>
	RC522_SPI_Transfer((addr << 1) & 0x7E); //adresa je ovisna o registru,   prvi bajt
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ffd4 	bl	80014c0 <RC522_SPI_Transfer>
	//Adresu shiftamo u lijevo za jedan bit, a operator & dodaje bajt 01111110
	//da osigura da su svi bitovi ispravno postavljeni
	//kod pisanja moramo osigurati da je najviši bit 0
	RC522_SPI_Transfer(val);	//drugi bajt je vrijednost za slanje
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffd0 	bl	80014c0 <RC522_SPI_Transfer>
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);  //deaktivira RC522
 8001520:	2201      	movs	r2, #1
 8001522:	2110      	movs	r1, #16
 8001524:	4803      	ldr	r0, [pc, #12]	@ (8001534 <Write_MFRC522+0x48>)
 8001526:	f001 f857 	bl	80025d8 <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020000 	.word	0x40020000

08001538 <Read_MFRC522>:

uint8_t Read_MFRC522(uint8_t addr) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	//generička funkcija za čitanje vrijednosti registara
	//Za pisanje u registar: najniži bit adrese je 0.
	//Za čitanje iz registra: najniži bit adrese mora biti 1.
	uint8_t val; //definiramo varijablu za return vrijednost
	//select modula
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2110      	movs	r1, #16
 8001546:	480f      	ldr	r0, [pc, #60]	@ (8001584 <Read_MFRC522+0x4c>)
 8001548:	f001 f846 	bl	80025d8 <HAL_GPIO_WritePin>
	//shiftamo adresu u lijevo za jedan bit, osiguravamo 6 srednjih bitova
	//operatorom OR stavljamo bit 1 na najviše mjesto jer označava čitanje
	RC522_SPI_Transfer(((addr << 1) & 0x7E) | 0x80);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b25b      	sxtb	r3, r3
 8001552:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001556:	b25b      	sxtb	r3, r3
 8001558:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800155c:	b25b      	sxtb	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ffad 	bl	80014c0 <RC522_SPI_Transfer>
	//šaljemo dummy byte da bi RC522 mogao vratitit vrijednost iz registra
	val = RC522_SPI_Transfer(0x00);
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff ffaa 	bl	80014c0 <RC522_SPI_Transfer>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	//unselect modula
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2110      	movs	r1, #16
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <Read_MFRC522+0x4c>)
 8001576:	f001 f82f 	bl	80025d8 <HAL_GPIO_WritePin>
	return val;
 800157a:	7bfb      	ldrb	r3, [r7, #15]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40020000 	.word	0x40020000

08001588 <SetBitMask>:

void SetBitMask(uint8_t reg, uint8_t mask) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	460a      	mov	r2, r1
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = Read_MFRC522(reg);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffcc 	bl	8001538 <Read_MFRC522>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff9b 	bl	80014ec <Write_MFRC522>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <ClearBitMask>:

void ClearBitMask(uint8_t reg, uint8_t mask) {
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	460a      	mov	r2, r1
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	4613      	mov	r3, r2
 80015cc:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = Read_MFRC522(reg);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffb1 	bl	8001538 <Read_MFRC522>
 80015d6:	4603      	mov	r3, r0
 80015d8:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));
 80015da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015de:	43db      	mvns	r3, r3
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4013      	ands	r3, r2
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff7b 	bl	80014ec <Write_MFRC522>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <AntennaOn>:

void AntennaOn(void) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
	Read_MFRC522(0x14);
 8001602:	2014      	movs	r0, #20
 8001604:	f7ff ff98 	bl	8001538 <Read_MFRC522>
	SetBitMask(0x14, 0x03);
 8001608:	2103      	movs	r1, #3
 800160a:	2014      	movs	r0, #20
 800160c:	f7ff ffbc 	bl	8001588 <SetBitMask>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	Write_MFRC522(0x01, 0x0F);
 8001618:	210f      	movs	r1, #15
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff ff66 	bl	80014ec <Write_MFRC522>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <MFRC522_Init>:

void MFRC522_Init(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2110      	movs	r1, #16
 800162c:	4812      	ldr	r0, [pc, #72]	@ (8001678 <MFRC522_Init+0x54>)
 800162e:	f000 ffd3 	bl	80025d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT, MFRC522_RST_PIN, GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2101      	movs	r1, #1
 8001636:	4811      	ldr	r0, [pc, #68]	@ (800167c <MFRC522_Init+0x58>)
 8001638:	f000 ffce 	bl	80025d8 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 800163c:	f7ff ffea 	bl	8001614 <MFRC522_Reset>
	Write_MFRC522(0x2A, 0x8D);
 8001640:	218d      	movs	r1, #141	@ 0x8d
 8001642:	202a      	movs	r0, #42	@ 0x2a
 8001644:	f7ff ff52 	bl	80014ec <Write_MFRC522>
	Write_MFRC522(0x2B, 0x3E);
 8001648:	213e      	movs	r1, #62	@ 0x3e
 800164a:	202b      	movs	r0, #43	@ 0x2b
 800164c:	f7ff ff4e 	bl	80014ec <Write_MFRC522>
	Write_MFRC522(0x2D, 30);
 8001650:	211e      	movs	r1, #30
 8001652:	202d      	movs	r0, #45	@ 0x2d
 8001654:	f7ff ff4a 	bl	80014ec <Write_MFRC522>
	Write_MFRC522(0x2C, 0);
 8001658:	2100      	movs	r1, #0
 800165a:	202c      	movs	r0, #44	@ 0x2c
 800165c:	f7ff ff46 	bl	80014ec <Write_MFRC522>
	Write_MFRC522(0x15, 0x40);
 8001660:	2140      	movs	r1, #64	@ 0x40
 8001662:	2015      	movs	r0, #21
 8001664:	f7ff ff42 	bl	80014ec <Write_MFRC522>
	Write_MFRC522(0x11, 0x3D);
 8001668:	213d      	movs	r1, #61	@ 0x3d
 800166a:	2011      	movs	r0, #17
 800166c:	f7ff ff3e 	bl	80014ec <Write_MFRC522>
	AntennaOn();
 8001670:	f7ff ffc5 	bl	80015fe <AntennaOn>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400

08001680 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
		uint8_t *backData, uint16_t *backLen) {
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b089      	sub	sp, #36	@ 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	4613      	mov	r3, r2
 8001690:	73bb      	strb	r3, [r7, #14]
	uint8_t status = 2;
 8001692:	2302      	movs	r3, #2
 8001694:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn, waitIRq, n;
	int i;
	if (command == 0x0E) {
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	2b0e      	cmp	r3, #14
 800169a:	d104      	bne.n	80016a6 <MFRC522_ToCard+0x26>
		irqEn = 0x12;
 800169c:	2312      	movs	r3, #18
 800169e:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 80016a0:	2310      	movs	r3, #16
 80016a2:	777b      	strb	r3, [r7, #29]
 80016a4:	e003      	b.n	80016ae <MFRC522_ToCard+0x2e>
	} else {
		irqEn = 0x77;
 80016a6:	2377      	movs	r3, #119	@ 0x77
 80016a8:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 80016aa:	2330      	movs	r3, #48	@ 0x30
 80016ac:	777b      	strb	r3, [r7, #29]
	}
	Write_MFRC522(0x02, irqEn | 0x80);
 80016ae:	7fbb      	ldrb	r3, [r7, #30]
 80016b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	2002      	movs	r0, #2
 80016ba:	f7ff ff17 	bl	80014ec <Write_MFRC522>
	ClearBitMask(0x04, 0x80);
 80016be:	2180      	movs	r1, #128	@ 0x80
 80016c0:	2004      	movs	r0, #4
 80016c2:	f7ff ff7c 	bl	80015be <ClearBitMask>
	SetBitMask(0x0A, 0x80);
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	200a      	movs	r0, #10
 80016ca:	f7ff ff5d 	bl	8001588 <SetBitMask>
	Write_MFRC522(0x01, 0x00);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff ff0b 	bl	80014ec <Write_MFRC522>
	for (i = 0; i < sendLen; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	e00a      	b.n	80016f2 <MFRC522_ToCard+0x72>
		Write_MFRC522(0x09, sendData[i]);
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	2009      	movs	r0, #9
 80016e8:	f7ff ff00 	bl	80014ec <Write_MFRC522>
	for (i = 0; i < sendLen; i++)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	3301      	adds	r3, #1
 80016f0:	61bb      	str	r3, [r7, #24]
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbf0      	blt.n	80016dc <MFRC522_ToCard+0x5c>
	Write_MFRC522(0x01, command);
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	4619      	mov	r1, r3
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fef4 	bl	80014ec <Write_MFRC522>
	if (command == 0x0C)
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d103      	bne.n	8001712 <MFRC522_ToCard+0x92>
		SetBitMask(0x0D, 0x80);
 800170a:	2180      	movs	r1, #128	@ 0x80
 800170c:	200d      	movs	r0, #13
 800170e:	f7ff ff3b 	bl	8001588 <SetBitMask>
	i = 2000;
 8001712:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001716:	61bb      	str	r3, [r7, #24]
	do {
		n = Read_MFRC522(0x04);
 8001718:	2004      	movs	r0, #4
 800171a:	f7ff ff0d 	bl	8001538 <Read_MFRC522>
 800171e:	4603      	mov	r3, r0
 8001720:	75fb      	strb	r3, [r7, #23]
		i--;
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	3b01      	subs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00a      	beq.n	8001744 <MFRC522_ToCard+0xc4>
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <MFRC522_ToCard+0xc4>
 8001738:	7dfa      	ldrb	r2, [r7, #23]
 800173a:	7f7b      	ldrb	r3, [r7, #29]
 800173c:	4013      	ands	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0e9      	beq.n	8001718 <MFRC522_ToCard+0x98>
	ClearBitMask(0x0D, 0x80);
 8001744:	2180      	movs	r1, #128	@ 0x80
 8001746:	200d      	movs	r0, #13
 8001748:	f7ff ff39 	bl	80015be <ClearBitMask>
	if (i != 0) {
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d033      	beq.n	80017ba <MFRC522_ToCard+0x13a>
		if (!(Read_MFRC522(0x06) & 0x1B)) {
 8001752:	2006      	movs	r0, #6
 8001754:	f7ff fef0 	bl	8001538 <Read_MFRC522>
 8001758:	4603      	mov	r3, r0
 800175a:	f003 031b 	and.w	r3, r3, #27
 800175e:	2b00      	cmp	r3, #0
 8001760:	d12b      	bne.n	80017ba <MFRC522_ToCard+0x13a>
			status = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01)
 8001766:	7dfa      	ldrb	r2, [r7, #23]
 8001768:	7fbb      	ldrb	r3, [r7, #30]
 800176a:	4013      	ands	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MFRC522_ToCard+0xfa>
				status = 1;
 8001776:	2301      	movs	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
			if (command == 0x0C) {
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d11c      	bne.n	80017ba <MFRC522_ToCard+0x13a>
				n = Read_MFRC522(0x0A);
 8001780:	200a      	movs	r0, #10
 8001782:	f7ff fed9 	bl	8001538 <Read_MFRC522>
 8001786:	4603      	mov	r3, r0
 8001788:	75fb      	strb	r3, [r7, #23]
				*backLen = n * 8;
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	b29b      	uxth	r3, r3
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	b29a      	uxth	r2, r3
 8001792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001794:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < n; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	e00a      	b.n	80017b2 <MFRC522_ToCard+0x132>
					backData[i] = Read_MFRC522(0x09);
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	18d4      	adds	r4, r2, r3
 80017a2:	2009      	movs	r0, #9
 80017a4:	f7ff fec8 	bl	8001538 <Read_MFRC522>
 80017a8:	4603      	mov	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	3301      	adds	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dbf0      	blt.n	800179c <MFRC522_ToCard+0x11c>
			}
		}
	}
	return status;
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3724      	adds	r7, #36	@ 0x24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}

080017c4 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;  // Promijenjeno sa int na uint16_t

	Write_MFRC522(0x0D, 0x07);
 80017d0:	2107      	movs	r1, #7
 80017d2:	200d      	movs	r0, #13
 80017d4:	f7ff fe8a 	bl	80014ec <Write_MFRC522>
	TagType[0] = reqMode;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	79fa      	ldrb	r2, [r7, #7]
 80017dc:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(0x0C, TagType, 1, TagType, &backBits);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	200c      	movs	r0, #12
 80017ec:	f7ff ff48 	bl	8001680 <MFRC522_ToCard>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
	// if true, else
	return (status == 0 && backBits == 0x10) ? 0 : 2;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d104      	bne.n	8001804 <MFRC522_Request+0x40>
 80017fa:	89bb      	ldrh	r3, [r7, #12]
 80017fc:	2b10      	cmp	r3, #16
 80017fe:	d101      	bne.n	8001804 <MFRC522_Request+0x40>
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <MFRC522_Request+0x42>
 8001804:	2302      	movs	r3, #2
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t *serNum) {
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af02      	add	r7, sp, #8
 8001814:	6078      	str	r0, [r7, #4]
	uint8_t status, i, serNumCheck = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;
	Write_MFRC522(0x0D, 0x00);
 800181a:	2100      	movs	r1, #0
 800181c:	200d      	movs	r0, #13
 800181e:	f7ff fe65 	bl	80014ec <Write_MFRC522>
	serNum[0] = 0x93;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2293      	movs	r2, #147	@ 0x93
 8001826:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	2220      	movs	r2, #32
 800182e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(0x0C, serNum, 2, serNum, &unLen);
 8001830:	f107 030a 	add.w	r3, r7, #10
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2202      	movs	r2, #2
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	200c      	movs	r0, #12
 800183e:	f7ff ff1f 	bl	8001680 <MFRC522_ToCard>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]
	if (status == 0) {
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d118      	bne.n	800187e <MFRC522_Anticoll+0x70>
		for (i = 0; i < 4; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	73bb      	strb	r3, [r7, #14]
 8001850:	e009      	b.n	8001866 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	4053      	eors	r3, r2
 800185e:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++)
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	3301      	adds	r3, #1
 8001864:	73bb      	strb	r3, [r7, #14]
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d9f2      	bls.n	8001852 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i])
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	7b7a      	ldrb	r2, [r7, #13]
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <MFRC522_Anticoll+0x70>
			status = 2;
 800187a:	2302      	movs	r3, #2
 800187c:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <I2C_LCD_ExpanderWrite>:

//static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t DATA) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af02      	add	r7, sp, #8
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	uint8_t TxData = DATA | 0x08;
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	b2db      	uxtb	r3, r3
 800189a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1,(0x27 << 1),
 800189c:	f107 020f 	add.w	r2, r7, #15
 80018a0:	2364      	movs	r3, #100	@ 0x64
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	214e      	movs	r1, #78	@ 0x4e
 80018a8:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <I2C_LCD_ExpanderWrite+0x30>)
 80018aa:	f000 fff3 	bl	8002894 <HAL_I2C_Master_Transmit>
			&TxData, sizeof(TxData), 100);
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200004f0 	.word	0x200004f0

080018bc <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t DATA) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_ExpanderWrite(DATA | 0b00000100); // En high
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ffda 	bl	8001888 <I2C_LCD_ExpanderWrite>
	Delay_us(2);
 80018d4:	2002      	movs	r0, #2
 80018d6:	f000 f8cf 	bl	8001a78 <Delay_us>

	I2C_LCD_ExpanderWrite(DATA & ~0b00000100); // En low
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ffd0 	bl	8001888 <I2C_LCD_ExpanderWrite>
	Delay_us(50);
 80018e8:	2032      	movs	r0, #50	@ 0x32
 80018ea:	f000 f8c5 	bl	8001a78 <Delay_us>

}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t Val) {
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_ExpanderWrite(Val);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ffc0 	bl	8001888 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(Val);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ffd6 	bl	80018bc <I2C_LCD_EnPulse>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2C_LCD_Send>:
//funkcija za slanje putem I2C
static void I2C_LCD_Send(uint8_t Val, uint8_t Mode) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	460a      	mov	r2, r1
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	4613      	mov	r3, r2
 8001926:	71bb      	strb	r3, [r7, #6]
	//vrijednost koju je primio putem val varijable šalje putem 4 bita koje dijelimo
	//maskiramo 4 MSB bita i spremamo u varijablu HighNib
	uint8_t HighNib = Val & 0xF0;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f023 030f 	bic.w	r3, r3, #15
 800192e:	73fb      	strb	r3, [r7, #15]
	//shiftamo vrijednost 4 LSB bita u gornje bitove 4567
	uint8_t LowNib = (Val << 4) & 0xF0;
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	73bb      	strb	r3, [r7, #14]
	// mode može biti 0x00 ili 0x01 ovisno šaljemo li komandu ili podatak
	// Mode 0x00 je komanda, mode 0x01 je podatak
	I2C_LCD_Write4Bits((HighNib) | Mode);
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	4313      	orrs	r3, r2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ffd9 	bl	80018f6 <I2C_LCD_Write4Bits>
	I2C_LCD_Write4Bits((LowNib) | Mode);
 8001944:	7bba      	ldrb	r2, [r7, #14]
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	4313      	orrs	r3, r2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ffd2 	bl	80018f6 <I2C_LCD_Write4Bits>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t CMD) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_Send(CMD, 0);
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ffd5 	bl	8001918 <I2C_LCD_Send>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t DATA) {
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_Send(DATA, 1);
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2101      	movs	r1, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ffc7 	bl	8001918 <I2C_LCD_Send>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <I2C_LCD_Init>:

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init() {
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8001996:	2032      	movs	r0, #50	@ 0x32
 8001998:	f000 fb80 	bl	800209c <HAL_Delay>
	I2C_LCD_Cmd(0x30); //probudi LCD, ali on možda još nije stabilan
 800199c:	2030      	movs	r0, #48	@ 0x30
 800199e:	f7ff ffdc 	bl	800195a <I2C_LCD_Cmd>
	HAL_Delay(5);
 80019a2:	2005      	movs	r0, #5
 80019a4:	f000 fb7a 	bl	800209c <HAL_Delay>
	I2C_LCD_Cmd(0x30);//osigurava da LCD shvati da radimo u 8-bitnom modu
 80019a8:	2030      	movs	r0, #48	@ 0x30
 80019aa:	f7ff ffd6 	bl	800195a <I2C_LCD_Cmd>
	HAL_Delay(5);
 80019ae:	2005      	movs	r0, #5
 80019b0:	f000 fb74 	bl	800209c <HAL_Delay>
	I2C_LCD_Cmd(0x30);//potvrđuje i zaključava 8-bitni način rada
 80019b4:	2030      	movs	r0, #48	@ 0x30
 80019b6:	f7ff ffd0 	bl	800195a <I2C_LCD_Cmd>
	Delay_us(150);
 80019ba:	2096      	movs	r0, #150	@ 0x96
 80019bc:	f000 f85c 	bl	8001a78 <Delay_us>
	I2C_LCD_Cmd(0x02);//postavlja 4-bitni način rada
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7ff ffca 	bl	800195a <I2C_LCD_Cmd>

	//(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
	I2C_LCD_Cmd(0x28);
 80019c6:	2028      	movs	r0, #40	@ 0x28
 80019c8:	f7ff ffc7 	bl	800195a <I2C_LCD_Cmd>
	//I2C_LCD_Cmd(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
	I2C_LCD_Cmd(0x0C);
 80019cc:	200c      	movs	r0, #12
 80019ce:	f7ff ffc4 	bl	800195a <I2C_LCD_Cmd>

	//I2C_LCD_Cmd(LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
	I2C_LCD_Cmd(0x06);
 80019d2:	2006      	movs	r0, #6
 80019d4:	f7ff ffc1 	bl	800195a <I2C_LCD_Cmd>

	//I2C_LCD_InfoParam_g[0].DisplayCtrl = 0x04;
	//I2C_LCD_InfoParam_g[0].BacklightVal = 0x08; // Postavi pozadinsko osvjetljenje na ON

	I2C_LCD_Clear();
 80019d8:	f000 f802 	bl	80019e0 <I2C_LCD_Clear>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <I2C_LCD_Clear>:

void I2C_LCD_Clear() {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	I2C_LCD_Cmd(0x01);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ffb8 	bl	800195a <I2C_LCD_Cmd>
	HAL_Delay(2);
 80019ea:	2002      	movs	r0, #2
 80019ec:	f000 fb56 	bl	800209c <HAL_Delay>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <I2C_LCD_SetCursor>:

void I2C_LCD_SetCursor(uint8_t Col, uint8_t Row) {
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
	int Row_Offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <I2C_LCD_SetCursor+0x54>)
 8001a06:	f107 0408 	add.w	r4, r7, #8
 8001a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (Row > 2) {
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <I2C_LCD_SetCursor+0x26>
		Row = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71bb      	strb	r3, [r7, #6]
	}
	I2C_LCD_Cmd(0x80 | (Col + Row_Offsets[Row]));
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	3318      	adds	r3, #24
 8001a20:	443b      	add	r3, r7
 8001a22:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff8e 	bl	800195a <I2C_LCD_Cmd>
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	080081ec 	.word	0x080081ec

08001a4c <I2C_LCD_WriteString>:

void I2C_LCD_WriteString(char *Str) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	while (*Str) {
 8001a54:	e006      	b.n	8001a64 <I2C_LCD_WriteString+0x18>
		I2C_LCD_Data(*Str++);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff89 	bl	8001976 <I2C_LCD_Data>
	while (*Str) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f4      	bne.n	8001a56 <I2C_LCD_WriteString+0xa>
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <Delay_us>:

/* LCD functions END------------------------------------------------------------------*/

/* MicroSeconds functions BEGIN------------------------------------------------------------------*/
void Delay_us(uint32_t us) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint32_t start = DWT->CYCCNT;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <Delay_us+0x40>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000000) * us; // Pretvara µs u CPU cikluse
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <Delay_us+0x44>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac0 <Delay_us+0x48>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	0c9a      	lsrs	r2, r3, #18
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	60bb      	str	r3, [r7, #8]
	while ((DWT->CYCCNT - start) < ticks)
 8001a9a:	bf00      	nop
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <Delay_us+0x40>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d8f8      	bhi.n	8001a9c <Delay_us+0x24>
		;
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e0001000 	.word	0xe0001000
 8001abc:	20000300 	.word	0x20000300
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <DWT_Init>:

void DWT_Init(void) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Omogući DWT
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <DWT_Init+0x2c>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <DWT_Init+0x2c>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;  // Reset counter
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <DWT_Init+0x30>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Omogući counter
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <DWT_Init+0x30>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <DWT_Init+0x30>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6013      	str	r3, [r2, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000edf0 	.word	0xe000edf0
 8001af4:	e0001000 	.word	0xe0001000

08001af8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <HAL_I2C_MspInit+0x84>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12c      	bne.n	8001bd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <HAL_I2C_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <HAL_I2C_MspInit+0x88>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_I2C_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b98:	2312      	movs	r3, #18
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <HAL_I2C_MspInit+0x8c>)
 8001bb0:	f000 fb7e 	bl	80022b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_I2C_MspInit+0x88>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <HAL_I2C_MspInit+0x88>)
 8001bbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_I2C_MspInit+0x88>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	@ 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020400 	.word	0x40020400

08001be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <HAL_SPI_MspInit+0x84>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d12b      	bne.n	8001c5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_SPI_MspInit+0x88>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <HAL_SPI_MspInit+0x88>)
 8001c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_SPI_MspInit+0x88>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_SPI_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <HAL_SPI_MspInit+0x88>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <HAL_SPI_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c3e:	23e0      	movs	r3, #224	@ 0xe0
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4e:	2305      	movs	r3, #5
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <HAL_SPI_MspInit+0x8c>)
 8001c5a:	f000 fb29 	bl	80022b0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	@ 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40013000 	.word	0x40013000
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000

08001c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c84:	d10d      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd4:	d11d      	bne.n	8001d12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <HAL_TIM_MspPostInit+0x68>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a0f      	ldr	r2, [pc, #60]	@ (8001d1c <HAL_TIM_MspPostInit+0x68>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_TIM_MspPostInit+0x68>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001d0e:	f000 facf 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000

08001d24 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d34:	d105      	bne.n	8001d42 <HAL_TIM_Base_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <NMI_Handler+0x4>

08001d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001daa:	f000 f957 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  return 1;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_kill>:

int _kill(int pid, int sig)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dcc:	f003 fe5c 	bl	8005a88 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2216      	movs	r2, #22
 8001dd4:	601a      	str	r2, [r3, #0]
  return -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_exit>:

void _exit (int status)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dea:	f04f 31ff 	mov.w	r1, #4294967295
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffe7 	bl	8001dc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <_exit+0x12>

08001df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e00a      	b.n	8001e20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e0a:	f3af 8000 	nop.w
 8001e0e:	4601      	mov	r1, r0
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	b2ca      	uxtb	r2, r1
 8001e18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf0      	blt.n	8001e0a <_read+0x12>
  }

  return len;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e009      	b.n	8001e58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	60ba      	str	r2, [r7, #8]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf1      	blt.n	8001e44 <_write+0x12>
  }
  return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_close>:

int _close(int file)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e92:	605a      	str	r2, [r3, #4]
  return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_isatty>:

int _isatty(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f003 fdc0 	bl	8005a88 <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20020000 	.word	0x20020000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	20000600 	.word	0x20000600
 8001f3c:	20000758 	.word	0x20000758

08001f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <SystemInit+0x20>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <SystemInit+0x20>)
 8001f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f68:	f7ff ffea 	bl	8001f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f6c:	480c      	ldr	r0, [pc, #48]	@ (8001fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f6e:	490d      	ldr	r1, [pc, #52]	@ (8001fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f84:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f003 fd7f 	bl	8005a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f96:	f7fe ff9f 	bl	8000ed8 <main>
  bx  lr    
 8001f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	200004d4 	.word	0x200004d4
  ldr r2, =_sidata
 8001fa8:	080085f4 	.word	0x080085f4
  ldr r2, =_sbss
 8001fac:	200004d4 	.word	0x200004d4
  ldr r4, =_ebss
 8001fb0:	20000754 	.word	0x20000754

08001fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_IRQHandler>
	...

08001fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff8 <HAL_Init+0x40>)
 8001fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <HAL_Init+0x40>)
 8001fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	@ (8001ff8 <HAL_Init+0x40>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 f931 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	200f      	movs	r0, #15
 8001fe8:	f000 f808 	bl	8001ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7ff fd8a 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_InitTick+0x54>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_InitTick+0x58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f93b 	bl	8002296 <HAL_SYSTICK_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00e      	b.n	8002048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d80a      	bhi.n	8002046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 f911 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4a06      	ldr	r2, [pc, #24]	@ (8002058 <HAL_InitTick+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000300 	.word	0x20000300
 8002054:	20000308 	.word	0x20000308
 8002058:	20000304 	.word	0x20000304

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000308 	.word	0x20000308
 8002080:	20000604 	.word	0x20000604

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000604 	.word	0x20000604

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000308 	.word	0x20000308

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	@ (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	@ (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	@ 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff47 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff5c 	bl	800212c <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffb0 	bl	8002204 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e165      	b.n	8002598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022cc:	2201      	movs	r2, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8154 	bne.w	8002592 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d005      	beq.n	8002302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d130      	bne.n	8002364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 0201 	and.w	r2, r3, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b03      	cmp	r3, #3
 800236e:	d017      	beq.n	80023a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d123      	bne.n	80023f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80ae 	beq.w	8002592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b5d      	ldr	r3, [pc, #372]	@ (80025b0 <HAL_GPIO_Init+0x300>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	4a5c      	ldr	r2, [pc, #368]	@ (80025b0 <HAL_GPIO_Init+0x300>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002444:	6453      	str	r3, [r2, #68]	@ 0x44
 8002446:	4b5a      	ldr	r3, [pc, #360]	@ (80025b0 <HAL_GPIO_Init+0x300>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002452:	4a58      	ldr	r2, [pc, #352]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4f      	ldr	r2, [pc, #316]	@ (80025b8 <HAL_GPIO_Init+0x308>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d025      	beq.n	80024ca <HAL_GPIO_Init+0x21a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4e      	ldr	r2, [pc, #312]	@ (80025bc <HAL_GPIO_Init+0x30c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01f      	beq.n	80024c6 <HAL_GPIO_Init+0x216>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4d      	ldr	r2, [pc, #308]	@ (80025c0 <HAL_GPIO_Init+0x310>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x212>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4c      	ldr	r2, [pc, #304]	@ (80025c4 <HAL_GPIO_Init+0x314>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x20e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4b      	ldr	r2, [pc, #300]	@ (80025c8 <HAL_GPIO_Init+0x318>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x20a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4a      	ldr	r2, [pc, #296]	@ (80025cc <HAL_GPIO_Init+0x31c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x206>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	@ (80025d0 <HAL_GPIO_Init+0x320>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x202>
 80024ae:	2306      	movs	r3, #6
 80024b0:	e00c      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e00a      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024b6:	2305      	movs	r3, #5
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024ba:	2304      	movs	r3, #4
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024ca:	2300      	movs	r3, #0
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f002 0203 	and.w	r2, r2, #3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024dc:	4935      	ldr	r1, [pc, #212]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ea:	4b3a      	ldr	r3, [pc, #232]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800250e:	4a31      	ldr	r2, [pc, #196]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002514:	4b2f      	ldr	r3, [pc, #188]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002538:	4a26      	ldr	r2, [pc, #152]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800253e:	4b25      	ldr	r3, [pc, #148]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002562:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002568:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800258c:	4a11      	ldr	r2, [pc, #68]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	f67f ae96 	bls.w	80022cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3724      	adds	r7, #36	@ 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40021400 	.word	0x40021400
 80025d0:	40021800 	.word	0x40021800
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e12b      	b.n	8002876 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fa8e 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	@ 0x24
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800265e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800266e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002670:	f000 fd5c 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8002674:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4a81      	ldr	r2, [pc, #516]	@ (8002880 <HAL_I2C_Init+0x274>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d807      	bhi.n	8002690 <HAL_I2C_Init+0x84>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a80      	ldr	r2, [pc, #512]	@ (8002884 <HAL_I2C_Init+0x278>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	e006      	b.n	800269e <HAL_I2C_Init+0x92>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a7d      	ldr	r2, [pc, #500]	@ (8002888 <HAL_I2C_Init+0x27c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0e7      	b.n	8002876 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a78      	ldr	r2, [pc, #480]	@ (800288c <HAL_I2C_Init+0x280>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	0c9b      	lsrs	r3, r3, #18
 80026b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002880 <HAL_I2C_Init+0x274>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d802      	bhi.n	80026e0 <HAL_I2C_Init+0xd4>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3301      	adds	r3, #1
 80026de:	e009      	b.n	80026f4 <HAL_I2C_Init+0xe8>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	4a69      	ldr	r2, [pc, #420]	@ (8002890 <HAL_I2C_Init+0x284>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	3301      	adds	r3, #1
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002706:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	495c      	ldr	r1, [pc, #368]	@ (8002880 <HAL_I2C_Init+0x274>)
 8002710:	428b      	cmp	r3, r1
 8002712:	d819      	bhi.n	8002748 <HAL_I2C_Init+0x13c>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e59      	subs	r1, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002722:	1c59      	adds	r1, r3, #1
 8002724:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002728:	400b      	ands	r3, r1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_I2C_Init+0x138>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1e59      	subs	r1, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fbb1 f3f3 	udiv	r3, r1, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002742:	e051      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 8002744:	2304      	movs	r3, #4
 8002746:	e04f      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d111      	bne.n	8002774 <HAL_I2C_Init+0x168>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1e58      	subs	r0, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	440b      	add	r3, r1
 800275e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002762:	3301      	adds	r3, #1
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e012      	b.n	800279a <HAL_I2C_Init+0x18e>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e58      	subs	r0, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	0099      	lsls	r1, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Init+0x196>
 800279e:	2301      	movs	r3, #1
 80027a0:	e022      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10e      	bne.n	80027c8 <HAL_I2C_Init+0x1bc>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1e58      	subs	r0, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	440b      	add	r3, r1
 80027b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027c6:	e00f      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	0099      	lsls	r1, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	fbb0 f3f3 	udiv	r3, r0, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	6809      	ldr	r1, [r1, #0]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002816:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6911      	ldr	r1, [r2, #16]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68d2      	ldr	r2, [r2, #12]
 8002822:	4311      	orrs	r1, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	000186a0 	.word	0x000186a0
 8002884:	001e847f 	.word	0x001e847f
 8002888:	003d08ff 	.word	0x003d08ff
 800288c:	431bde83 	.word	0x431bde83
 8002890:	10624dd3 	.word	0x10624dd3

08002894 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	461a      	mov	r2, r3
 80028a0:	460b      	mov	r3, r1
 80028a2:	817b      	strh	r3, [r7, #10]
 80028a4:	4613      	mov	r3, r2
 80028a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff fbec 	bl	8002084 <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	f040 80e0 	bne.w	8002a7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2319      	movs	r3, #25
 80028c2:	2201      	movs	r2, #1
 80028c4:	4970      	ldr	r1, [pc, #448]	@ (8002a88 <HAL_I2C_Master_Transmit+0x1f4>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f964 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
 80028d4:	e0d3      	b.n	8002a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_I2C_Master_Transmit+0x50>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e0cc      	b.n	8002a7e <HAL_I2C_Master_Transmit+0x1ea>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d007      	beq.n	800290a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002918:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2221      	movs	r2, #33	@ 0x21
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2210      	movs	r2, #16
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	893a      	ldrh	r2, [r7, #8]
 800293a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a50      	ldr	r2, [pc, #320]	@ (8002a8c <HAL_I2C_Master_Transmit+0x1f8>)
 800294a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f89c 	bl	8002a90 <I2C_MasterRequestWrite>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e08d      	b.n	8002a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002978:	e066      	b.n	8002a48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	6a39      	ldr	r1, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fa22 	bl	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	2b04      	cmp	r3, #4
 8002990:	d107      	bne.n	80029a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06b      	b.n	8002a7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d11b      	bne.n	8002a1c <HAL_I2C_Master_Transmit+0x188>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d017      	beq.n	8002a1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	6a39      	ldr	r1, [r7, #32]
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fa19 	bl	8002e58 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00d      	beq.n	8002a48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d107      	bne.n	8002a44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e01a      	b.n	8002a7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d194      	bne.n	800297a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e000      	b.n	8002a7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
  }
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	00100002 	.word	0x00100002
 8002a8c:	ffff0000 	.word	0xffff0000

08002a90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d006      	beq.n	8002aba <I2C_MasterRequestWrite+0x2a>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d003      	beq.n	8002aba <I2C_MasterRequestWrite+0x2a>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ab8:	d108      	bne.n	8002acc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e00b      	b.n	8002ae4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	2b12      	cmp	r3, #18
 8002ad2:	d107      	bne.n	8002ae4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f84f 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00d      	beq.n	8002b18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b0a:	d103      	bne.n	8002b14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e035      	b.n	8002b84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b20:	d108      	bne.n	8002b34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b30:	611a      	str	r2, [r3, #16]
 8002b32:	e01b      	b.n	8002b6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b34:	897b      	ldrh	r3, [r7, #10]
 8002b36:	11db      	asrs	r3, r3, #7
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 0306 	and.w	r3, r3, #6
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f063 030f 	orn	r3, r3, #15
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	490e      	ldr	r1, [pc, #56]	@ (8002b8c <I2C_MasterRequestWrite+0xfc>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f898 	bl	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e010      	b.n	8002b84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4907      	ldr	r1, [pc, #28]	@ (8002b90 <I2C_MasterRequestWrite+0x100>)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f888 	bl	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	00010008 	.word	0x00010008
 8002b90:	00010002 	.word	0x00010002

08002b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba4:	e048      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d044      	beq.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bae:	f7ff fa69 	bl	8002084 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d139      	bne.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d10d      	bne.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	e00c      	b.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	43da      	mvns	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d116      	bne.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e023      	b.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	0c1b      	lsrs	r3, r3, #16
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10d      	bne.n	8002c5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	e00c      	b.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	43da      	mvns	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d093      	beq.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c96:	e071      	b.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca6:	d123      	bne.n	8002cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f043 0204 	orr.w	r2, r3, #4
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e067      	b.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d041      	beq.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf8:	f7ff f9c4 	bl	8002084 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d302      	bcc.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d136      	bne.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d10c      	bne.n	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e00b      	b.n	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	43da      	mvns	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e021      	b.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	0c1b      	lsrs	r3, r3, #16
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10c      	bne.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	43da      	mvns	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4013      	ands	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e00b      	b.n	8002db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	43da      	mvns	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4013      	ands	r3, r2
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f af6d 	bne.w	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd4:	e034      	b.n	8002e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f886 	bl	8002ee8 <I2C_IsAcknowledgeFailed>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e034      	b.n	8002e50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d028      	beq.n	8002e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dee:	f7ff f949 	bl	8002084 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d302      	bcc.n	8002e04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11d      	bne.n	8002e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0e:	2b80      	cmp	r3, #128	@ 0x80
 8002e10:	d016      	beq.n	8002e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e007      	b.n	8002e50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4a:	2b80      	cmp	r3, #128	@ 0x80
 8002e4c:	d1c3      	bne.n	8002dd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e64:	e034      	b.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f83e 	bl	8002ee8 <I2C_IsAcknowledgeFailed>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e034      	b.n	8002ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d028      	beq.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7ff f901 	bl	8002084 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11d      	bne.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d016      	beq.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e007      	b.n	8002ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d1c3      	bne.n	8002e66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efe:	d11b      	bne.n	8002f38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0cc      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b68      	ldr	r3, [pc, #416]	@ (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d90c      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b65      	ldr	r3, [pc, #404]	@ (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b63      	ldr	r3, [pc, #396]	@ (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0b8      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f9c:	4b59      	ldr	r3, [pc, #356]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb4:	4b53      	ldr	r3, [pc, #332]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b50      	ldr	r3, [pc, #320]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	494d      	ldr	r1, [pc, #308]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d044      	beq.n	8003068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b47      	ldr	r3, [pc, #284]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d119      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003002:	2b03      	cmp	r3, #3
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b3f      	ldr	r3, [pc, #252]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b3b      	ldr	r3, [pc, #236]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e067      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b37      	ldr	r3, [pc, #220]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4934      	ldr	r1, [pc, #208]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003038:	f7ff f824 	bl	8002084 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7ff f820 	bl	8002084 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e04f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2b      	ldr	r3, [pc, #172]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b25      	ldr	r3, [pc, #148]	@ (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d20c      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b22      	ldr	r3, [pc, #136]	@ (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b20      	ldr	r3, [pc, #128]	@ (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e032      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4916      	ldr	r1, [pc, #88]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ba:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	490e      	ldr	r1, [pc, #56]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ce:	f000 f841 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	490a      	ldr	r1, [pc, #40]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030ea:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ff84 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023c00 	.word	0x40023c00
 8003104:	40023800 	.word	0x40023800
 8003108:	08008200 	.word	0x08008200
 800310c:	20000300 	.word	0x20000300
 8003110:	20000304 	.word	0x20000304

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <HAL_RCC_GetHCLKFreq+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000300 	.word	0x20000300

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff0 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	@ (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	08008210 	.word	0x08008210

08003154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003158:	b0a6      	sub	sp, #152	@ 0x98
 800315a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800317a:	4bc8      	ldr	r3, [pc, #800]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b0c      	cmp	r3, #12
 8003184:	f200 817e 	bhi.w	8003484 <HAL_RCC_GetSysClockFreq+0x330>
 8003188:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <HAL_RCC_GetSysClockFreq+0x3c>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031c5 	.word	0x080031c5
 8003194:	08003485 	.word	0x08003485
 8003198:	08003485 	.word	0x08003485
 800319c:	08003485 	.word	0x08003485
 80031a0:	080031cd 	.word	0x080031cd
 80031a4:	08003485 	.word	0x08003485
 80031a8:	08003485 	.word	0x08003485
 80031ac:	08003485 	.word	0x08003485
 80031b0:	080031d5 	.word	0x080031d5
 80031b4:	08003485 	.word	0x08003485
 80031b8:	08003485 	.word	0x08003485
 80031bc:	08003485 	.word	0x08003485
 80031c0:	0800333f 	.word	0x0800333f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4bb6      	ldr	r3, [pc, #728]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80031c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80031ca:	e15f      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031cc:	4bb5      	ldr	r3, [pc, #724]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x350>)
 80031ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80031d2:	e15b      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d4:	4bb1      	ldr	r3, [pc, #708]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e0:	4bae      	ldr	r3, [pc, #696]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d031      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ec:	4bab      	ldr	r3, [pc, #684]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	2200      	movs	r2, #0
 80031f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003200:	2300      	movs	r3, #0
 8003202:	667b      	str	r3, [r7, #100]	@ 0x64
 8003204:	4ba7      	ldr	r3, [pc, #668]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003206:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800320a:	462a      	mov	r2, r5
 800320c:	fb03 f202 	mul.w	r2, r3, r2
 8003210:	2300      	movs	r3, #0
 8003212:	4621      	mov	r1, r4
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	4aa2      	ldr	r2, [pc, #648]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800321c:	4621      	mov	r1, r4
 800321e:	fba1 1202 	umull	r1, r2, r1, r2
 8003222:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003224:	460a      	mov	r2, r1
 8003226:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003228:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800322a:	4413      	add	r3, r2
 800322c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800322e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003232:	2200      	movs	r2, #0
 8003234:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003236:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003238:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800323c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003240:	f7fd fcd2 	bl	8000be8 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800324e:	e064      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003250:	4b92      	ldr	r3, [pc, #584]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	2200      	movs	r2, #0
 8003258:	653b      	str	r3, [r7, #80]	@ 0x50
 800325a:	657a      	str	r2, [r7, #84]	@ 0x54
 800325c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800325e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003264:	2300      	movs	r3, #0
 8003266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003268:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800326c:	4622      	mov	r2, r4
 800326e:	462b      	mov	r3, r5
 8003270:	f04f 0000 	mov.w	r0, #0
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	0159      	lsls	r1, r3, #5
 800327a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800327e:	0150      	lsls	r0, r2, #5
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4621      	mov	r1, r4
 8003286:	1a51      	subs	r1, r2, r1
 8003288:	6139      	str	r1, [r7, #16]
 800328a:	4629      	mov	r1, r5
 800328c:	eb63 0301 	sbc.w	r3, r3, r1
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800329e:	4659      	mov	r1, fp
 80032a0:	018b      	lsls	r3, r1, #6
 80032a2:	4651      	mov	r1, sl
 80032a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a8:	4651      	mov	r1, sl
 80032aa:	018a      	lsls	r2, r1, #6
 80032ac:	4651      	mov	r1, sl
 80032ae:	ebb2 0801 	subs.w	r8, r2, r1
 80032b2:	4659      	mov	r1, fp
 80032b4:	eb63 0901 	sbc.w	r9, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032cc:	4690      	mov	r8, r2
 80032ce:	4699      	mov	r9, r3
 80032d0:	4623      	mov	r3, r4
 80032d2:	eb18 0303 	adds.w	r3, r8, r3
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	462b      	mov	r3, r5
 80032da:	eb49 0303 	adc.w	r3, r9, r3
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ec:	4629      	mov	r1, r5
 80032ee:	028b      	lsls	r3, r1, #10
 80032f0:	4621      	mov	r1, r4
 80032f2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f6:	4621      	mov	r1, r4
 80032f8:	028a      	lsls	r2, r1, #10
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003302:	2200      	movs	r2, #0
 8003304:	643b      	str	r3, [r7, #64]	@ 0x40
 8003306:	647a      	str	r2, [r7, #68]	@ 0x44
 8003308:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800330c:	f7fd fc6c 	bl	8000be8 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800331a:	4b60      	ldr	r3, [pc, #384]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	3301      	adds	r3, #1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800332c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003330:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800333c:	e0a6      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333e:	4b57      	ldr	r3, [pc, #348]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334a:	4b54      	ldr	r3, [pc, #336]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d02a      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003356:	4b51      	ldr	r3, [pc, #324]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	2200      	movs	r2, #0
 800335e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003360:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003364:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003368:	2100      	movs	r1, #0
 800336a:	4b4e      	ldr	r3, [pc, #312]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800336c:	fb03 f201 	mul.w	r2, r3, r1
 8003370:	2300      	movs	r3, #0
 8003372:	fb00 f303 	mul.w	r3, r0, r3
 8003376:	4413      	add	r3, r2
 8003378:	4a4a      	ldr	r2, [pc, #296]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800337a:	fba0 1202 	umull	r1, r2, r0, r2
 800337e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003380:	460a      	mov	r2, r1
 8003382:	673a      	str	r2, [r7, #112]	@ 0x70
 8003384:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003386:	4413      	add	r3, r2
 8003388:	677b      	str	r3, [r7, #116]	@ 0x74
 800338a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338e:	2200      	movs	r2, #0
 8003390:	633b      	str	r3, [r7, #48]	@ 0x30
 8003392:	637a      	str	r2, [r7, #52]	@ 0x34
 8003394:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003398:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800339c:	f7fd fc24 	bl	8000be8 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4613      	mov	r3, r2
 80033a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033aa:	e05b      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ac:	4b3b      	ldr	r3, [pc, #236]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	2200      	movs	r2, #0
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	f04f 0000 	mov.w	r0, #0
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	0159      	lsls	r1, r3, #5
 80033d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033da:	0150      	lsls	r0, r2, #5
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4641      	mov	r1, r8
 80033e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033e6:	4649      	mov	r1, r9
 80033e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003400:	ebb2 040a 	subs.w	r4, r2, sl
 8003404:	eb63 050b 	sbc.w	r5, r3, fp
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	464b      	mov	r3, r9
 8003424:	eb45 0303 	adc.w	r3, r5, r3
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003436:	4629      	mov	r1, r5
 8003438:	028b      	lsls	r3, r1, #10
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003440:	4621      	mov	r1, r4
 8003442:	028a      	lsls	r2, r1, #10
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800344c:	2200      	movs	r2, #0
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	61fa      	str	r2, [r7, #28]
 8003452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003456:	f7fd fbc7 	bl	8000be8 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4613      	mov	r3, r2
 8003460:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003464:	4b0d      	ldr	r3, [pc, #52]	@ (800349c <HAL_RCC_GetSysClockFreq+0x348>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0f1b      	lsrs	r3, r3, #28
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003472:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003476:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003482:	e003      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003486:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800348a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003490:	4618      	mov	r0, r3
 8003492:	3798      	adds	r7, #152	@ 0x98
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	017d7840 	.word	0x017d7840

080034a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e28d      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8083 	beq.w	80035ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034c8:	4b94      	ldr	r3, [pc, #592]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d019      	beq.n	8003508 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034d4:	4b91      	ldr	r3, [pc, #580]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034e0:	4b8e      	ldr	r3, [pc, #568]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ec:	d00c      	beq.n	8003508 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ee:	4b8b      	ldr	r3, [pc, #556]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d112      	bne.n	8003520 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fa:	4b88      	ldr	r3, [pc, #544]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003506:	d10b      	bne.n	8003520 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b84      	ldr	r3, [pc, #528]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d05b      	beq.n	80035cc <HAL_RCC_OscConfig+0x124>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d157      	bne.n	80035cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e25a      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x90>
 800352a:	4b7c      	ldr	r3, [pc, #496]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a7b      	ldr	r2, [pc, #492]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e01d      	b.n	8003574 <HAL_RCC_OscConfig+0xcc>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0xb4>
 8003542:	4b76      	ldr	r3, [pc, #472]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b73      	ldr	r3, [pc, #460]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a72      	ldr	r2, [pc, #456]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0xcc>
 800355c:	4b6f      	ldr	r3, [pc, #444]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a6e      	ldr	r2, [pc, #440]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b6c      	ldr	r3, [pc, #432]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6b      	ldr	r2, [pc, #428]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe fd82 	bl	8002084 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe fd7e 	bl	8002084 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e21f      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b61      	ldr	r3, [pc, #388]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0xdc>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fd6e 	bl	8002084 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe fd6a 	bl	8002084 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e20b      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	4b57      	ldr	r3, [pc, #348]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x104>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d06f      	beq.n	80036ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035da:	4b50      	ldr	r3, [pc, #320]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d017      	beq.n	8003616 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035e6:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035f2:	4b4a      	ldr	r3, [pc, #296]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b47      	ldr	r3, [pc, #284]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d11c      	bne.n	8003644 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b44      	ldr	r3, [pc, #272]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	4b41      	ldr	r3, [pc, #260]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x186>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1d3      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b3b      	ldr	r3, [pc, #236]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4937      	ldr	r1, [pc, #220]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e03a      	b.n	80036ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <HAL_RCC_OscConfig+0x278>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fe fd17 	bl	8002084 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7fe fd13 	bl	8002084 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1b4      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b28      	ldr	r3, [pc, #160]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4925      	ldr	r1, [pc, #148]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <HAL_RCC_OscConfig+0x278>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe fcf6 	bl	8002084 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7fe fcf2 	bl	8002084 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e193      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d036      	beq.n	8003734 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_RCC_OscConfig+0x27c>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fe fcd6 	bl	8002084 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fe fcd2 	bl	8002084 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e173      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x234>
 80036fa:	e01b      	b.n	8003734 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <HAL_RCC_OscConfig+0x27c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fe fcbf 	bl	8002084 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	e00e      	b.n	8003728 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370a:	f7fe fcbb 	bl	8002084 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e15c      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
 800371c:	40023800 	.word	0x40023800
 8003720:	42470000 	.word	0x42470000
 8003724:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b8a      	ldr	r3, [pc, #552]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ea      	bne.n	800370a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8097 	beq.w	8003870 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b83      	ldr	r3, [pc, #524]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b7f      	ldr	r3, [pc, #508]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	4a7e      	ldr	r2, [pc, #504]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	@ 0x40
 8003762:	4b7c      	ldr	r3, [pc, #496]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b79      	ldr	r3, [pc, #484]	@ (8003958 <HAL_RCC_OscConfig+0x4b0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b76      	ldr	r3, [pc, #472]	@ (8003958 <HAL_RCC_OscConfig+0x4b0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a75      	ldr	r2, [pc, #468]	@ (8003958 <HAL_RCC_OscConfig+0x4b0>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fe fc7b 	bl	8002084 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fe fc77 	bl	8002084 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e118      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003958 <HAL_RCC_OscConfig+0x4b0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x31e>
 80037b8:	4b66      	ldr	r3, [pc, #408]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037bc:	4a65      	ldr	r2, [pc, #404]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c4:	e01c      	b.n	8003800 <HAL_RCC_OscConfig+0x358>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x340>
 80037ce:	4b61      	ldr	r3, [pc, #388]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d2:	4a60      	ldr	r2, [pc, #384]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037da:	4b5e      	ldr	r3, [pc, #376]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037de:	4a5d      	ldr	r2, [pc, #372]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0x358>
 80037e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ec:	4a59      	ldr	r2, [pc, #356]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f4:	4b57      	ldr	r3, [pc, #348]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f8:	4a56      	ldr	r2, [pc, #344]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7fe fc3c 	bl	8002084 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7fe fc38 	bl	8002084 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0d7      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	4b4b      	ldr	r3, [pc, #300]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ee      	beq.n	8003810 <HAL_RCC_OscConfig+0x368>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fe fc26 	bl	8002084 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fe fc22 	bl	8002084 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0c1      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	4b40      	ldr	r3, [pc, #256]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ee      	bne.n	800383c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	4a3a      	ldr	r2, [pc, #232]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80ad 	beq.w	80039d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387a:	4b36      	ldr	r3, [pc, #216]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b08      	cmp	r3, #8
 8003884:	d060      	beq.n	8003948 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d145      	bne.n	800391a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b33      	ldr	r3, [pc, #204]	@ (800395c <HAL_RCC_OscConfig+0x4b4>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fbf6 	bl	8002084 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fe fbf2 	bl	8002084 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e093      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b29      	ldr	r3, [pc, #164]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	3b01      	subs	r3, #1
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e4:	071b      	lsls	r3, r3, #28
 80038e6:	491b      	ldr	r1, [pc, #108]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ec:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x4b4>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fe fbc7 	bl	8002084 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe fbc3 	bl	8002084 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e064      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x452>
 8003918:	e05c      	b.n	80039d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <HAL_RCC_OscConfig+0x4b4>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe fbb0 	bl	8002084 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe fbac 	bl	8002084 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e04d      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x480>
 8003946:	e045      	b.n	80039d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e040      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
 8003954:	40023800 	.word	0x40023800
 8003958:	40007000 	.word	0x40007000
 800395c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003960:	4b1f      	ldr	r3, [pc, #124]	@ (80039e0 <HAL_RCC_OscConfig+0x538>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d030      	beq.n	80039d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d129      	bne.n	80039d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d122      	bne.n	80039d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003990:	4013      	ands	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003998:	4293      	cmp	r3, r2
 800399a:	d119      	bne.n	80039d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	3b01      	subs	r3, #1
 80039aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d10f      	bne.n	80039d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e07b      	b.n	8003aee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d108      	bne.n	8003a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a06:	d009      	beq.n	8003a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]
 8003a0e:	e005      	b.n	8003a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fe f8d4 	bl	8001be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa0:	ea42 0103 	orr.w	r1, r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	f003 0104 	and.w	r1, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	f003 0210 	and.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003adc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b08a      	sub	sp, #40	@ 0x28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b04:	2301      	movs	r3, #1
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b08:	f7fe fabc 	bl	8002084 <HAL_GetTick>
 8003b0c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b14:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b20:	7ffb      	ldrb	r3, [r7, #31]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d00c      	beq.n	8003b40 <HAL_SPI_TransmitReceive+0x4a>
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2c:	d106      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x46>
 8003b36:	7ffb      	ldrb	r3, [r7, #31]
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d001      	beq.n	8003b40 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e17f      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0x5c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0x5c>
 8003b4c:	887b      	ldrh	r3, [r7, #2]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e174      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x6e>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e16d      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x34a>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d003      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2205      	movs	r2, #5
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	887a      	ldrh	r2, [r7, #2]
 8003b96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	887a      	ldrh	r2, [r7, #2]
 8003ba2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc0:	2b40      	cmp	r3, #64	@ 0x40
 8003bc2:	d007      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bdc:	d17e      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_SPI_TransmitReceive+0xf6>
 8003be6:	8afb      	ldrh	r3, [r7, #22]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d16c      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c10:	e059      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d11b      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x162>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d016      	beq.n	8003c58 <HAL_SPI_TransmitReceive+0x162>
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d113      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d119      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x1a4>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d014      	beq.n	8003c9a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c96:	2301      	movs	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c9a:	f7fe f9f3 	bl	8002084 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d80d      	bhi.n	8003cc6 <HAL_SPI_TransmitReceive+0x1d0>
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d009      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0bc      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1a0      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x11c>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d19b      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x11c>
 8003cda:	e082      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_SPI_TransmitReceive+0x1f4>
 8003ce4:	8afb      	ldrh	r3, [r7, #22]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d171      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d10:	e05d      	b.n	8003dce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d11c      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x264>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d017      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0x264>
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d114      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d119      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x2a6>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d9c:	f7fe f972 	bl	8002084 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d803      	bhi.n	8003db4 <HAL_SPI_TransmitReceive+0x2be>
 8003dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d102      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x2c4>
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e038      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d19c      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x21c>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d197      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f8b6 	bl	8003f58 <SPI_EndRxTxTransaction>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e01d      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3728      	adds	r7, #40	@ 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e58:	f7fe f914 	bl	8002084 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e68:	f7fe f90c 	bl	8002084 <HAL_GetTick>
 8003e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e6e:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	015b      	lsls	r3, r3, #5
 8003e74:	0d1b      	lsrs	r3, r3, #20
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e7e:	e054      	b.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d050      	beq.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e88:	f7fe f8fc 	bl	8002084 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d902      	bls.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d13d      	bne.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eb6:	d111      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ec0:	d004      	beq.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eca:	d107      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee4:	d10f      	bne.n	8003f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e017      	b.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d19b      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000300 	.word	0x20000300

08003f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff6a 	bl	8003e48 <SPI_WaitFlagStateUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e032      	b.n	8003ff0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <SPI_EndRxTxTransaction+0xa0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <SPI_EndRxTxTransaction+0xa4>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	0d5b      	lsrs	r3, r3, #21
 8003f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa8:	d112      	bne.n	8003fd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	@ 0x80
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ff47 	bl	8003e48 <SPI_WaitFlagStateUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d016      	beq.n	8003fee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e00f      	b.n	8003ff0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b80      	cmp	r3, #128	@ 0x80
 8003fe8:	d0f2      	beq.n	8003fd0 <SPI_EndRxTxTransaction+0x78>
 8003fea:	e000      	b.n	8003fee <SPI_EndRxTxTransaction+0x96>
        break;
 8003fec:	bf00      	nop
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000300 	.word	0x20000300
 8003ffc:	165e9f81 	.word	0x165e9f81

08004000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e041      	b.n	8004096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fe24 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f000 fb9c 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10f      	bne.n	80040de <HAL_TIM_Base_DeInit+0x40>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a1a      	ldr	r2, [r3, #32]
 80040c4:	f240 4344 	movw	r3, #1092	@ 0x444
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <HAL_TIM_Base_DeInit+0x40>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fe20 	bl	8001d24 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e041      	b.n	80041dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f839 	bl	80041e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f000 faf9 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_TIM_PWM_Start+0x24>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e022      	b.n	8004262 <HAL_TIM_PWM_Start+0x6a>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b04      	cmp	r3, #4
 8004220:	d109      	bne.n	8004236 <HAL_TIM_PWM_Start+0x3e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	bf14      	ite	ne
 800422e:	2301      	movne	r3, #1
 8004230:	2300      	moveq	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	e015      	b.n	8004262 <HAL_TIM_PWM_Start+0x6a>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d109      	bne.n	8004250 <HAL_TIM_PWM_Start+0x58>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e008      	b.n	8004262 <HAL_TIM_PWM_Start+0x6a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e07c      	b.n	8004364 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <HAL_TIM_PWM_Start+0x82>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004278:	e013      	b.n	80042a2 <HAL_TIM_PWM_Start+0xaa>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b04      	cmp	r3, #4
 800427e:	d104      	bne.n	800428a <HAL_TIM_PWM_Start+0x92>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004288:	e00b      	b.n	80042a2 <HAL_TIM_PWM_Start+0xaa>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d104      	bne.n	800429a <HAL_TIM_PWM_Start+0xa2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004298:	e003      	b.n	80042a2 <HAL_TIM_PWM_Start+0xaa>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2201      	movs	r2, #1
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fd5c 	bl	8004d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2d      	ldr	r2, [pc, #180]	@ (800436c <HAL_TIM_PWM_Start+0x174>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_TIM_PWM_Start+0xcc>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2c      	ldr	r2, [pc, #176]	@ (8004370 <HAL_TIM_PWM_Start+0x178>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_PWM_Start+0xd0>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_TIM_PWM_Start+0xd2>
 80042c8:	2300      	movs	r3, #0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a22      	ldr	r2, [pc, #136]	@ (800436c <HAL_TIM_PWM_Start+0x174>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d022      	beq.n	800432e <HAL_TIM_PWM_Start+0x136>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f0:	d01d      	beq.n	800432e <HAL_TIM_PWM_Start+0x136>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004374 <HAL_TIM_PWM_Start+0x17c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d018      	beq.n	800432e <HAL_TIM_PWM_Start+0x136>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1d      	ldr	r2, [pc, #116]	@ (8004378 <HAL_TIM_PWM_Start+0x180>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_TIM_PWM_Start+0x136>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <HAL_TIM_PWM_Start+0x184>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00e      	beq.n	800432e <HAL_TIM_PWM_Start+0x136>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a16      	ldr	r2, [pc, #88]	@ (8004370 <HAL_TIM_PWM_Start+0x178>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_TIM_PWM_Start+0x136>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a18      	ldr	r2, [pc, #96]	@ (8004380 <HAL_TIM_PWM_Start+0x188>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_TIM_PWM_Start+0x136>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a16      	ldr	r2, [pc, #88]	@ (8004384 <HAL_TIM_PWM_Start+0x18c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d111      	bne.n	8004352 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b06      	cmp	r3, #6
 800433e:	d010      	beq.n	8004362 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004350:	e007      	b.n	8004362 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40010000 	.word	0x40010000
 8004370:	40010400 	.word	0x40010400
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40014000 	.word	0x40014000
 8004384:	40001800 	.word	0x40001800

08004388 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2200      	movs	r2, #0
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fce4 	bl	8004d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004460 <HAL_TIM_PWM_Stop+0xd8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_TIM_PWM_Stop+0x2c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004464 <HAL_TIM_PWM_Stop+0xdc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d101      	bne.n	80043b8 <HAL_TIM_PWM_Stop+0x30>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_TIM_PWM_Stop+0x32>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <HAL_TIM_PWM_Stop+0x66>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	f240 4344 	movw	r3, #1092	@ 0x444
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_PWM_Stop+0x66>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_TIM_PWM_Stop+0x96>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	f240 4344 	movw	r3, #1092	@ 0x444
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <HAL_TIM_PWM_Stop+0x96>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Stop+0xa6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800442c:	e013      	b.n	8004456 <HAL_TIM_PWM_Stop+0xce>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d104      	bne.n	800443e <HAL_TIM_PWM_Stop+0xb6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800443c:	e00b      	b.n	8004456 <HAL_TIM_PWM_Stop+0xce>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d104      	bne.n	800444e <HAL_TIM_PWM_Stop+0xc6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800444c:	e003      	b.n	8004456 <HAL_TIM_PWM_Stop+0xce>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40010000 	.word	0x40010000
 8004464:	40010400 	.word	0x40010400

08004468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004482:	2302      	movs	r3, #2
 8004484:	e0ae      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	f200 809f 	bhi.w	80045d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004496:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	080045d5 	.word	0x080045d5
 80044a4:	080045d5 	.word	0x080045d5
 80044a8:	080045d5 	.word	0x080045d5
 80044ac:	08004511 	.word	0x08004511
 80044b0:	080045d5 	.word	0x080045d5
 80044b4:	080045d5 	.word	0x080045d5
 80044b8:	080045d5 	.word	0x080045d5
 80044bc:	08004553 	.word	0x08004553
 80044c0:	080045d5 	.word	0x080045d5
 80044c4:	080045d5 	.word	0x080045d5
 80044c8:	080045d5 	.word	0x080045d5
 80044cc:	08004593 	.word	0x08004593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f9fc 	bl	80048d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0208 	orr.w	r2, r2, #8
 80044ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0204 	bic.w	r2, r2, #4
 80044fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6999      	ldr	r1, [r3, #24]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	619a      	str	r2, [r3, #24]
      break;
 800450e:	e064      	b.n	80045da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fa4c 	bl	80049b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800452a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6999      	ldr	r1, [r3, #24]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	021a      	lsls	r2, r3, #8
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	619a      	str	r2, [r3, #24]
      break;
 8004550:	e043      	b.n	80045da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	4618      	mov	r0, r3
 800455a:	f000 faa1 	bl	8004aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0208 	orr.w	r2, r2, #8
 800456c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0204 	bic.w	r2, r2, #4
 800457c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69d9      	ldr	r1, [r3, #28]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	61da      	str	r2, [r3, #28]
      break;
 8004590:	e023      	b.n	80045da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	4618      	mov	r0, r3
 800459a:	f000 faf5 	bl	8004b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69d9      	ldr	r1, [r3, #28]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	021a      	lsls	r2, r3, #8
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	61da      	str	r2, [r3, #28]
      break;
 80045d2:	e002      	b.n	80045da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	75fb      	strb	r3, [r7, #23]
      break;
 80045d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIM_ConfigClockSource+0x1c>
 8004604:	2302      	movs	r3, #2
 8004606:	e0b4      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x186>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800462e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004640:	d03e      	beq.n	80046c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004646:	f200 8087 	bhi.w	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464e:	f000 8086 	beq.w	800475e <HAL_TIM_ConfigClockSource+0x172>
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004656:	d87f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b70      	cmp	r3, #112	@ 0x70
 800465a:	d01a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0xa6>
 800465c:	2b70      	cmp	r3, #112	@ 0x70
 800465e:	d87b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b60      	cmp	r3, #96	@ 0x60
 8004662:	d050      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x11a>
 8004664:	2b60      	cmp	r3, #96	@ 0x60
 8004666:	d877      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b50      	cmp	r3, #80	@ 0x50
 800466a:	d03c      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xfa>
 800466c:	2b50      	cmp	r3, #80	@ 0x50
 800466e:	d873      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d058      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x13a>
 8004674:	2b40      	cmp	r3, #64	@ 0x40
 8004676:	d86f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b30      	cmp	r3, #48	@ 0x30
 800467a:	d064      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x15a>
 800467c:	2b30      	cmp	r3, #48	@ 0x30
 800467e:	d86b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d060      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x15a>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d867      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d05c      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x15a>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d05a      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	e062      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046a2:	f000 fb41 	bl	8004d28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	609a      	str	r2, [r3, #8]
      break;
 80046be:	e04f      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	f000 fb2a 	bl	8004d28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046e2:	609a      	str	r2, [r3, #8]
      break;
 80046e4:	e03c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f2:	461a      	mov	r2, r3
 80046f4:	f000 fa9e 	bl	8004c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2150      	movs	r1, #80	@ 0x50
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 faf7 	bl	8004cf2 <TIM_ITRx_SetConfig>
      break;
 8004704:	e02c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004712:	461a      	mov	r2, r3
 8004714:	f000 fabd 	bl	8004c92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2160      	movs	r1, #96	@ 0x60
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fae7 	bl	8004cf2 <TIM_ITRx_SetConfig>
      break;
 8004724:	e01c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	461a      	mov	r2, r3
 8004734:	f000 fa7e 	bl	8004c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2140      	movs	r1, #64	@ 0x40
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fad7 	bl	8004cf2 <TIM_ITRx_SetConfig>
      break;
 8004744:	e00c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 face 	bl	8004cf2 <TIM_ITRx_SetConfig>
      break;
 8004756:	e003      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      break;
 800475c:	e000      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800475e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a46      	ldr	r2, [pc, #280]	@ (80048a8 <TIM_Base_SetConfig+0x12c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479a:	d00f      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a43      	ldr	r2, [pc, #268]	@ (80048ac <TIM_Base_SetConfig+0x130>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00b      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a42      	ldr	r2, [pc, #264]	@ (80048b0 <TIM_Base_SetConfig+0x134>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a41      	ldr	r2, [pc, #260]	@ (80048b4 <TIM_Base_SetConfig+0x138>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a40      	ldr	r2, [pc, #256]	@ (80048b8 <TIM_Base_SetConfig+0x13c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d108      	bne.n	80047ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a35      	ldr	r2, [pc, #212]	@ (80048a8 <TIM_Base_SetConfig+0x12c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d02b      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047dc:	d027      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a32      	ldr	r2, [pc, #200]	@ (80048ac <TIM_Base_SetConfig+0x130>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d023      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a31      	ldr	r2, [pc, #196]	@ (80048b0 <TIM_Base_SetConfig+0x134>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01f      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a30      	ldr	r2, [pc, #192]	@ (80048b4 <TIM_Base_SetConfig+0x138>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01b      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2f      	ldr	r2, [pc, #188]	@ (80048b8 <TIM_Base_SetConfig+0x13c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d017      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2e      	ldr	r2, [pc, #184]	@ (80048bc <TIM_Base_SetConfig+0x140>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2d      	ldr	r2, [pc, #180]	@ (80048c0 <TIM_Base_SetConfig+0x144>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00f      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2c      	ldr	r2, [pc, #176]	@ (80048c4 <TIM_Base_SetConfig+0x148>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2b      	ldr	r2, [pc, #172]	@ (80048c8 <TIM_Base_SetConfig+0x14c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2a      	ldr	r2, [pc, #168]	@ (80048cc <TIM_Base_SetConfig+0x150>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a29      	ldr	r2, [pc, #164]	@ (80048d0 <TIM_Base_SetConfig+0x154>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a10      	ldr	r2, [pc, #64]	@ (80048a8 <TIM_Base_SetConfig+0x12c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0xf8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a12      	ldr	r2, [pc, #72]	@ (80048b8 <TIM_Base_SetConfig+0x13c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d103      	bne.n	800487c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d105      	bne.n	800489a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f023 0201 	bic.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	611a      	str	r2, [r3, #16]
  }
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	40010400 	.word	0x40010400
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800
 80048c8:	40001800 	.word	0x40001800
 80048cc:	40001c00 	.word	0x40001c00
 80048d0:	40002000 	.word	0x40002000

080048d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f023 0201 	bic.w	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 0302 	bic.w	r3, r3, #2
 800491c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a20      	ldr	r2, [pc, #128]	@ (80049ac <TIM_OC1_SetConfig+0xd8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_OC1_SetConfig+0x64>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <TIM_OC1_SetConfig+0xdc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d10c      	bne.n	8004952 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 0308 	bic.w	r3, r3, #8
 800493e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f023 0304 	bic.w	r3, r3, #4
 8004950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a15      	ldr	r2, [pc, #84]	@ (80049ac <TIM_OC1_SetConfig+0xd8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_OC1_SetConfig+0x8e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a14      	ldr	r2, [pc, #80]	@ (80049b0 <TIM_OC1_SetConfig+0xdc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d111      	bne.n	8004986 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400

080049b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f023 0210 	bic.w	r2, r3, #16
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 0320 	bic.w	r3, r3, #32
 80049fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a22      	ldr	r2, [pc, #136]	@ (8004a98 <TIM_OC2_SetConfig+0xe4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_OC2_SetConfig+0x68>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a21      	ldr	r2, [pc, #132]	@ (8004a9c <TIM_OC2_SetConfig+0xe8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d10d      	bne.n	8004a38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <TIM_OC2_SetConfig+0xe4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_OC2_SetConfig+0x94>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <TIM_OC2_SetConfig+0xe8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d113      	bne.n	8004a70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	40010400 	.word	0x40010400

08004aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0303 	bic.w	r3, r3, #3
 8004ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a21      	ldr	r2, [pc, #132]	@ (8004b80 <TIM_OC3_SetConfig+0xe0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_OC3_SetConfig+0x66>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a20      	ldr	r2, [pc, #128]	@ (8004b84 <TIM_OC3_SetConfig+0xe4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d10d      	bne.n	8004b22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a16      	ldr	r2, [pc, #88]	@ (8004b80 <TIM_OC3_SetConfig+0xe0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_OC3_SetConfig+0x92>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a15      	ldr	r2, [pc, #84]	@ (8004b84 <TIM_OC3_SetConfig+0xe4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d113      	bne.n	8004b5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	621a      	str	r2, [r3, #32]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40010400 	.word	0x40010400

08004b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	031b      	lsls	r3, r3, #12
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a12      	ldr	r2, [pc, #72]	@ (8004c2c <TIM_OC4_SetConfig+0xa4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_OC4_SetConfig+0x68>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a11      	ldr	r2, [pc, #68]	@ (8004c30 <TIM_OC4_SetConfig+0xa8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d109      	bne.n	8004c04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	019b      	lsls	r3, r3, #6
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40010400 	.word	0x40010400

08004c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f023 0201 	bic.w	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 030a 	bic.w	r3, r3, #10
 8004c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b087      	sub	sp, #28
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f023 0210 	bic.w	r2, r3, #16
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f043 0307 	orr.w	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	021a      	lsls	r2, r3, #8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	609a      	str	r2, [r3, #8]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1a      	ldr	r2, [r3, #32]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1a      	ldr	r2, [r3, #32]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	431a      	orrs	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e05a      	b.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a21      	ldr	r2, [pc, #132]	@ (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e18:	d01d      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	@ (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1a      	ldr	r2, [pc, #104]	@ (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a17      	ldr	r2, [pc, #92]	@ (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a15      	ldr	r2, [pc, #84]	@ (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10c      	bne.n	8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40000400 	.word	0x40000400
 8004e98:	40000800 	.word	0x40000800
 8004e9c:	40000c00 	.word	0x40000c00
 8004ea0:	40010400 	.word	0x40010400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40001800 	.word	0x40001800

08004eac <rand>:
 8004eac:	4b16      	ldr	r3, [pc, #88]	@ (8004f08 <rand+0x5c>)
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	681c      	ldr	r4, [r3, #0]
 8004eb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004eb4:	b9b3      	cbnz	r3, 8004ee4 <rand+0x38>
 8004eb6:	2018      	movs	r0, #24
 8004eb8:	f001 fcc8 	bl	800684c <malloc>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6320      	str	r0, [r4, #48]	@ 0x30
 8004ec0:	b920      	cbnz	r0, 8004ecc <rand+0x20>
 8004ec2:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <rand+0x60>)
 8004ec4:	4812      	ldr	r0, [pc, #72]	@ (8004f10 <rand+0x64>)
 8004ec6:	2152      	movs	r1, #82	@ 0x52
 8004ec8:	f000 fe0c 	bl	8005ae4 <__assert_func>
 8004ecc:	4911      	ldr	r1, [pc, #68]	@ (8004f14 <rand+0x68>)
 8004ece:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <rand+0x6c>)
 8004ed0:	e9c0 1300 	strd	r1, r3, [r0]
 8004ed4:	4b11      	ldr	r3, [pc, #68]	@ (8004f1c <rand+0x70>)
 8004ed6:	6083      	str	r3, [r0, #8]
 8004ed8:	230b      	movs	r3, #11
 8004eda:	8183      	strh	r3, [r0, #12]
 8004edc:	2100      	movs	r1, #0
 8004ede:	2001      	movs	r0, #1
 8004ee0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ee4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ee6:	480e      	ldr	r0, [pc, #56]	@ (8004f20 <rand+0x74>)
 8004ee8:	690b      	ldr	r3, [r1, #16]
 8004eea:	694c      	ldr	r4, [r1, #20]
 8004eec:	4a0d      	ldr	r2, [pc, #52]	@ (8004f24 <rand+0x78>)
 8004eee:	4358      	muls	r0, r3
 8004ef0:	fb02 0004 	mla	r0, r2, r4, r0
 8004ef4:	fba3 3202 	umull	r3, r2, r3, r2
 8004ef8:	3301      	adds	r3, #1
 8004efa:	eb40 0002 	adc.w	r0, r0, r2
 8004efe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004f02:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004f06:	bd10      	pop	{r4, pc}
 8004f08:	20000318 	.word	0x20000318
 8004f0c:	08008218 	.word	0x08008218
 8004f10:	0800822f 	.word	0x0800822f
 8004f14:	abcd330e 	.word	0xabcd330e
 8004f18:	e66d1234 	.word	0xe66d1234
 8004f1c:	0005deec 	.word	0x0005deec
 8004f20:	5851f42d 	.word	0x5851f42d
 8004f24:	4c957f2d 	.word	0x4c957f2d

08004f28 <__cvt>:
 8004f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f2c:	ec57 6b10 	vmov	r6, r7, d0
 8004f30:	2f00      	cmp	r7, #0
 8004f32:	460c      	mov	r4, r1
 8004f34:	4619      	mov	r1, r3
 8004f36:	463b      	mov	r3, r7
 8004f38:	bfbb      	ittet	lt
 8004f3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f3e:	461f      	movlt	r7, r3
 8004f40:	2300      	movge	r3, #0
 8004f42:	232d      	movlt	r3, #45	@ 0x2d
 8004f44:	700b      	strb	r3, [r1, #0]
 8004f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f4c:	4691      	mov	r9, r2
 8004f4e:	f023 0820 	bic.w	r8, r3, #32
 8004f52:	bfbc      	itt	lt
 8004f54:	4632      	movlt	r2, r6
 8004f56:	4616      	movlt	r6, r2
 8004f58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f5c:	d005      	beq.n	8004f6a <__cvt+0x42>
 8004f5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f62:	d100      	bne.n	8004f66 <__cvt+0x3e>
 8004f64:	3401      	adds	r4, #1
 8004f66:	2102      	movs	r1, #2
 8004f68:	e000      	b.n	8004f6c <__cvt+0x44>
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	ab03      	add	r3, sp, #12
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	ab02      	add	r3, sp, #8
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	ec47 6b10 	vmov	d0, r6, r7
 8004f78:	4653      	mov	r3, sl
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	f000 fe58 	bl	8005c30 <_dtoa_r>
 8004f80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f84:	4605      	mov	r5, r0
 8004f86:	d119      	bne.n	8004fbc <__cvt+0x94>
 8004f88:	f019 0f01 	tst.w	r9, #1
 8004f8c:	d00e      	beq.n	8004fac <__cvt+0x84>
 8004f8e:	eb00 0904 	add.w	r9, r0, r4
 8004f92:	2200      	movs	r2, #0
 8004f94:	2300      	movs	r3, #0
 8004f96:	4630      	mov	r0, r6
 8004f98:	4639      	mov	r1, r7
 8004f9a:	f7fb fdb5 	bl	8000b08 <__aeabi_dcmpeq>
 8004f9e:	b108      	cbz	r0, 8004fa4 <__cvt+0x7c>
 8004fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fa4:	2230      	movs	r2, #48	@ 0x30
 8004fa6:	9b03      	ldr	r3, [sp, #12]
 8004fa8:	454b      	cmp	r3, r9
 8004faa:	d31e      	bcc.n	8004fea <__cvt+0xc2>
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fb0:	1b5b      	subs	r3, r3, r5
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	b004      	add	sp, #16
 8004fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fc0:	eb00 0904 	add.w	r9, r0, r4
 8004fc4:	d1e5      	bne.n	8004f92 <__cvt+0x6a>
 8004fc6:	7803      	ldrb	r3, [r0, #0]
 8004fc8:	2b30      	cmp	r3, #48	@ 0x30
 8004fca:	d10a      	bne.n	8004fe2 <__cvt+0xba>
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7fb fd98 	bl	8000b08 <__aeabi_dcmpeq>
 8004fd8:	b918      	cbnz	r0, 8004fe2 <__cvt+0xba>
 8004fda:	f1c4 0401 	rsb	r4, r4, #1
 8004fde:	f8ca 4000 	str.w	r4, [sl]
 8004fe2:	f8da 3000 	ldr.w	r3, [sl]
 8004fe6:	4499      	add	r9, r3
 8004fe8:	e7d3      	b.n	8004f92 <__cvt+0x6a>
 8004fea:	1c59      	adds	r1, r3, #1
 8004fec:	9103      	str	r1, [sp, #12]
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	e7d9      	b.n	8004fa6 <__cvt+0x7e>

08004ff2 <__exponent>:
 8004ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	bfba      	itte	lt
 8004ff8:	4249      	neglt	r1, r1
 8004ffa:	232d      	movlt	r3, #45	@ 0x2d
 8004ffc:	232b      	movge	r3, #43	@ 0x2b
 8004ffe:	2909      	cmp	r1, #9
 8005000:	7002      	strb	r2, [r0, #0]
 8005002:	7043      	strb	r3, [r0, #1]
 8005004:	dd29      	ble.n	800505a <__exponent+0x68>
 8005006:	f10d 0307 	add.w	r3, sp, #7
 800500a:	461d      	mov	r5, r3
 800500c:	270a      	movs	r7, #10
 800500e:	461a      	mov	r2, r3
 8005010:	fbb1 f6f7 	udiv	r6, r1, r7
 8005014:	fb07 1416 	mls	r4, r7, r6, r1
 8005018:	3430      	adds	r4, #48	@ 0x30
 800501a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800501e:	460c      	mov	r4, r1
 8005020:	2c63      	cmp	r4, #99	@ 0x63
 8005022:	f103 33ff 	add.w	r3, r3, #4294967295
 8005026:	4631      	mov	r1, r6
 8005028:	dcf1      	bgt.n	800500e <__exponent+0x1c>
 800502a:	3130      	adds	r1, #48	@ 0x30
 800502c:	1e94      	subs	r4, r2, #2
 800502e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005032:	1c41      	adds	r1, r0, #1
 8005034:	4623      	mov	r3, r4
 8005036:	42ab      	cmp	r3, r5
 8005038:	d30a      	bcc.n	8005050 <__exponent+0x5e>
 800503a:	f10d 0309 	add.w	r3, sp, #9
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	42ac      	cmp	r4, r5
 8005042:	bf88      	it	hi
 8005044:	2300      	movhi	r3, #0
 8005046:	3302      	adds	r3, #2
 8005048:	4403      	add	r3, r0
 800504a:	1a18      	subs	r0, r3, r0
 800504c:	b003      	add	sp, #12
 800504e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005050:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005054:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005058:	e7ed      	b.n	8005036 <__exponent+0x44>
 800505a:	2330      	movs	r3, #48	@ 0x30
 800505c:	3130      	adds	r1, #48	@ 0x30
 800505e:	7083      	strb	r3, [r0, #2]
 8005060:	70c1      	strb	r1, [r0, #3]
 8005062:	1d03      	adds	r3, r0, #4
 8005064:	e7f1      	b.n	800504a <__exponent+0x58>
	...

08005068 <_printf_float>:
 8005068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506c:	b08d      	sub	sp, #52	@ 0x34
 800506e:	460c      	mov	r4, r1
 8005070:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005074:	4616      	mov	r6, r2
 8005076:	461f      	mov	r7, r3
 8005078:	4605      	mov	r5, r0
 800507a:	f000 fcbb 	bl	80059f4 <_localeconv_r>
 800507e:	6803      	ldr	r3, [r0, #0]
 8005080:	9304      	str	r3, [sp, #16]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fb f914 	bl	80002b0 <strlen>
 8005088:	2300      	movs	r3, #0
 800508a:	930a      	str	r3, [sp, #40]	@ 0x28
 800508c:	f8d8 3000 	ldr.w	r3, [r8]
 8005090:	9005      	str	r0, [sp, #20]
 8005092:	3307      	adds	r3, #7
 8005094:	f023 0307 	bic.w	r3, r3, #7
 8005098:	f103 0208 	add.w	r2, r3, #8
 800509c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80050a0:	f8d4 b000 	ldr.w	fp, [r4]
 80050a4:	f8c8 2000 	str.w	r2, [r8]
 80050a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050b0:	9307      	str	r3, [sp, #28]
 80050b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80050b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050be:	4b9c      	ldr	r3, [pc, #624]	@ (8005330 <_printf_float+0x2c8>)
 80050c0:	f04f 32ff 	mov.w	r2, #4294967295
 80050c4:	f7fb fd52 	bl	8000b6c <__aeabi_dcmpun>
 80050c8:	bb70      	cbnz	r0, 8005128 <_printf_float+0xc0>
 80050ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ce:	4b98      	ldr	r3, [pc, #608]	@ (8005330 <_printf_float+0x2c8>)
 80050d0:	f04f 32ff 	mov.w	r2, #4294967295
 80050d4:	f7fb fd2c 	bl	8000b30 <__aeabi_dcmple>
 80050d8:	bb30      	cbnz	r0, 8005128 <_printf_float+0xc0>
 80050da:	2200      	movs	r2, #0
 80050dc:	2300      	movs	r3, #0
 80050de:	4640      	mov	r0, r8
 80050e0:	4649      	mov	r1, r9
 80050e2:	f7fb fd1b 	bl	8000b1c <__aeabi_dcmplt>
 80050e6:	b110      	cbz	r0, 80050ee <_printf_float+0x86>
 80050e8:	232d      	movs	r3, #45	@ 0x2d
 80050ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ee:	4a91      	ldr	r2, [pc, #580]	@ (8005334 <_printf_float+0x2cc>)
 80050f0:	4b91      	ldr	r3, [pc, #580]	@ (8005338 <_printf_float+0x2d0>)
 80050f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050f6:	bf94      	ite	ls
 80050f8:	4690      	movls	r8, r2
 80050fa:	4698      	movhi	r8, r3
 80050fc:	2303      	movs	r3, #3
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	f02b 0304 	bic.w	r3, fp, #4
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	f04f 0900 	mov.w	r9, #0
 800510a:	9700      	str	r7, [sp, #0]
 800510c:	4633      	mov	r3, r6
 800510e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005110:	4621      	mov	r1, r4
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f9d2 	bl	80054bc <_printf_common>
 8005118:	3001      	adds	r0, #1
 800511a:	f040 808d 	bne.w	8005238 <_printf_float+0x1d0>
 800511e:	f04f 30ff 	mov.w	r0, #4294967295
 8005122:	b00d      	add	sp, #52	@ 0x34
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	4640      	mov	r0, r8
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb fd1c 	bl	8000b6c <__aeabi_dcmpun>
 8005134:	b140      	cbz	r0, 8005148 <_printf_float+0xe0>
 8005136:	464b      	mov	r3, r9
 8005138:	2b00      	cmp	r3, #0
 800513a:	bfbc      	itt	lt
 800513c:	232d      	movlt	r3, #45	@ 0x2d
 800513e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005142:	4a7e      	ldr	r2, [pc, #504]	@ (800533c <_printf_float+0x2d4>)
 8005144:	4b7e      	ldr	r3, [pc, #504]	@ (8005340 <_printf_float+0x2d8>)
 8005146:	e7d4      	b.n	80050f2 <_printf_float+0x8a>
 8005148:	6863      	ldr	r3, [r4, #4]
 800514a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800514e:	9206      	str	r2, [sp, #24]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	d13b      	bne.n	80051cc <_printf_float+0x164>
 8005154:	2306      	movs	r3, #6
 8005156:	6063      	str	r3, [r4, #4]
 8005158:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800515c:	2300      	movs	r3, #0
 800515e:	6022      	str	r2, [r4, #0]
 8005160:	9303      	str	r3, [sp, #12]
 8005162:	ab0a      	add	r3, sp, #40	@ 0x28
 8005164:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005168:	ab09      	add	r3, sp, #36	@ 0x24
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	6861      	ldr	r1, [r4, #4]
 800516e:	ec49 8b10 	vmov	d0, r8, r9
 8005172:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005176:	4628      	mov	r0, r5
 8005178:	f7ff fed6 	bl	8004f28 <__cvt>
 800517c:	9b06      	ldr	r3, [sp, #24]
 800517e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005180:	2b47      	cmp	r3, #71	@ 0x47
 8005182:	4680      	mov	r8, r0
 8005184:	d129      	bne.n	80051da <_printf_float+0x172>
 8005186:	1cc8      	adds	r0, r1, #3
 8005188:	db02      	blt.n	8005190 <_printf_float+0x128>
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	4299      	cmp	r1, r3
 800518e:	dd41      	ble.n	8005214 <_printf_float+0x1ac>
 8005190:	f1aa 0a02 	sub.w	sl, sl, #2
 8005194:	fa5f fa8a 	uxtb.w	sl, sl
 8005198:	3901      	subs	r1, #1
 800519a:	4652      	mov	r2, sl
 800519c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80051a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80051a2:	f7ff ff26 	bl	8004ff2 <__exponent>
 80051a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051a8:	1813      	adds	r3, r2, r0
 80051aa:	2a01      	cmp	r2, #1
 80051ac:	4681      	mov	r9, r0
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	dc02      	bgt.n	80051b8 <_printf_float+0x150>
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	07d2      	lsls	r2, r2, #31
 80051b6:	d501      	bpl.n	80051bc <_printf_float+0x154>
 80051b8:	3301      	adds	r3, #1
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0a2      	beq.n	800510a <_printf_float+0xa2>
 80051c4:	232d      	movs	r3, #45	@ 0x2d
 80051c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ca:	e79e      	b.n	800510a <_printf_float+0xa2>
 80051cc:	9a06      	ldr	r2, [sp, #24]
 80051ce:	2a47      	cmp	r2, #71	@ 0x47
 80051d0:	d1c2      	bne.n	8005158 <_printf_float+0xf0>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1c0      	bne.n	8005158 <_printf_float+0xf0>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e7bd      	b.n	8005156 <_printf_float+0xee>
 80051da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051de:	d9db      	bls.n	8005198 <_printf_float+0x130>
 80051e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051e4:	d118      	bne.n	8005218 <_printf_float+0x1b0>
 80051e6:	2900      	cmp	r1, #0
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	dd0b      	ble.n	8005204 <_printf_float+0x19c>
 80051ec:	6121      	str	r1, [r4, #16]
 80051ee:	b913      	cbnz	r3, 80051f6 <_printf_float+0x18e>
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	07d0      	lsls	r0, r2, #31
 80051f4:	d502      	bpl.n	80051fc <_printf_float+0x194>
 80051f6:	3301      	adds	r3, #1
 80051f8:	440b      	add	r3, r1
 80051fa:	6123      	str	r3, [r4, #16]
 80051fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051fe:	f04f 0900 	mov.w	r9, #0
 8005202:	e7db      	b.n	80051bc <_printf_float+0x154>
 8005204:	b913      	cbnz	r3, 800520c <_printf_float+0x1a4>
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	07d2      	lsls	r2, r2, #31
 800520a:	d501      	bpl.n	8005210 <_printf_float+0x1a8>
 800520c:	3302      	adds	r3, #2
 800520e:	e7f4      	b.n	80051fa <_printf_float+0x192>
 8005210:	2301      	movs	r3, #1
 8005212:	e7f2      	b.n	80051fa <_printf_float+0x192>
 8005214:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800521a:	4299      	cmp	r1, r3
 800521c:	db05      	blt.n	800522a <_printf_float+0x1c2>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	6121      	str	r1, [r4, #16]
 8005222:	07d8      	lsls	r0, r3, #31
 8005224:	d5ea      	bpl.n	80051fc <_printf_float+0x194>
 8005226:	1c4b      	adds	r3, r1, #1
 8005228:	e7e7      	b.n	80051fa <_printf_float+0x192>
 800522a:	2900      	cmp	r1, #0
 800522c:	bfd4      	ite	le
 800522e:	f1c1 0202 	rsble	r2, r1, #2
 8005232:	2201      	movgt	r2, #1
 8005234:	4413      	add	r3, r2
 8005236:	e7e0      	b.n	80051fa <_printf_float+0x192>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	055a      	lsls	r2, r3, #21
 800523c:	d407      	bmi.n	800524e <_printf_float+0x1e6>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	4642      	mov	r2, r8
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	d12b      	bne.n	80052a4 <_printf_float+0x23c>
 800524c:	e767      	b.n	800511e <_printf_float+0xb6>
 800524e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005252:	f240 80dd 	bls.w	8005410 <_printf_float+0x3a8>
 8005256:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800525a:	2200      	movs	r2, #0
 800525c:	2300      	movs	r3, #0
 800525e:	f7fb fc53 	bl	8000b08 <__aeabi_dcmpeq>
 8005262:	2800      	cmp	r0, #0
 8005264:	d033      	beq.n	80052ce <_printf_float+0x266>
 8005266:	4a37      	ldr	r2, [pc, #220]	@ (8005344 <_printf_float+0x2dc>)
 8005268:	2301      	movs	r3, #1
 800526a:	4631      	mov	r1, r6
 800526c:	4628      	mov	r0, r5
 800526e:	47b8      	blx	r7
 8005270:	3001      	adds	r0, #1
 8005272:	f43f af54 	beq.w	800511e <_printf_float+0xb6>
 8005276:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800527a:	4543      	cmp	r3, r8
 800527c:	db02      	blt.n	8005284 <_printf_float+0x21c>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	07d8      	lsls	r0, r3, #31
 8005282:	d50f      	bpl.n	80052a4 <_printf_float+0x23c>
 8005284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005288:	4631      	mov	r1, r6
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	f43f af45 	beq.w	800511e <_printf_float+0xb6>
 8005294:	f04f 0900 	mov.w	r9, #0
 8005298:	f108 38ff 	add.w	r8, r8, #4294967295
 800529c:	f104 0a1a 	add.w	sl, r4, #26
 80052a0:	45c8      	cmp	r8, r9
 80052a2:	dc09      	bgt.n	80052b8 <_printf_float+0x250>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	079b      	lsls	r3, r3, #30
 80052a8:	f100 8103 	bmi.w	80054b2 <_printf_float+0x44a>
 80052ac:	68e0      	ldr	r0, [r4, #12]
 80052ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052b0:	4298      	cmp	r0, r3
 80052b2:	bfb8      	it	lt
 80052b4:	4618      	movlt	r0, r3
 80052b6:	e734      	b.n	8005122 <_printf_float+0xba>
 80052b8:	2301      	movs	r3, #1
 80052ba:	4652      	mov	r2, sl
 80052bc:	4631      	mov	r1, r6
 80052be:	4628      	mov	r0, r5
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f af2b 	beq.w	800511e <_printf_float+0xb6>
 80052c8:	f109 0901 	add.w	r9, r9, #1
 80052cc:	e7e8      	b.n	80052a0 <_printf_float+0x238>
 80052ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dc39      	bgt.n	8005348 <_printf_float+0x2e0>
 80052d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005344 <_printf_float+0x2dc>)
 80052d6:	2301      	movs	r3, #1
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f af1d 	beq.w	800511e <_printf_float+0xb6>
 80052e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052e8:	ea59 0303 	orrs.w	r3, r9, r3
 80052ec:	d102      	bne.n	80052f4 <_printf_float+0x28c>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	07d9      	lsls	r1, r3, #31
 80052f2:	d5d7      	bpl.n	80052a4 <_printf_float+0x23c>
 80052f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052f8:	4631      	mov	r1, r6
 80052fa:	4628      	mov	r0, r5
 80052fc:	47b8      	blx	r7
 80052fe:	3001      	adds	r0, #1
 8005300:	f43f af0d 	beq.w	800511e <_printf_float+0xb6>
 8005304:	f04f 0a00 	mov.w	sl, #0
 8005308:	f104 0b1a 	add.w	fp, r4, #26
 800530c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800530e:	425b      	negs	r3, r3
 8005310:	4553      	cmp	r3, sl
 8005312:	dc01      	bgt.n	8005318 <_printf_float+0x2b0>
 8005314:	464b      	mov	r3, r9
 8005316:	e793      	b.n	8005240 <_printf_float+0x1d8>
 8005318:	2301      	movs	r3, #1
 800531a:	465a      	mov	r2, fp
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f aefb 	beq.w	800511e <_printf_float+0xb6>
 8005328:	f10a 0a01 	add.w	sl, sl, #1
 800532c:	e7ee      	b.n	800530c <_printf_float+0x2a4>
 800532e:	bf00      	nop
 8005330:	7fefffff 	.word	0x7fefffff
 8005334:	08008287 	.word	0x08008287
 8005338:	0800828b 	.word	0x0800828b
 800533c:	0800828f 	.word	0x0800828f
 8005340:	08008293 	.word	0x08008293
 8005344:	08008297 	.word	0x08008297
 8005348:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800534a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800534e:	4553      	cmp	r3, sl
 8005350:	bfa8      	it	ge
 8005352:	4653      	movge	r3, sl
 8005354:	2b00      	cmp	r3, #0
 8005356:	4699      	mov	r9, r3
 8005358:	dc36      	bgt.n	80053c8 <_printf_float+0x360>
 800535a:	f04f 0b00 	mov.w	fp, #0
 800535e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005362:	f104 021a 	add.w	r2, r4, #26
 8005366:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005368:	9306      	str	r3, [sp, #24]
 800536a:	eba3 0309 	sub.w	r3, r3, r9
 800536e:	455b      	cmp	r3, fp
 8005370:	dc31      	bgt.n	80053d6 <_printf_float+0x36e>
 8005372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005374:	459a      	cmp	sl, r3
 8005376:	dc3a      	bgt.n	80053ee <_printf_float+0x386>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	07da      	lsls	r2, r3, #31
 800537c:	d437      	bmi.n	80053ee <_printf_float+0x386>
 800537e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005380:	ebaa 0903 	sub.w	r9, sl, r3
 8005384:	9b06      	ldr	r3, [sp, #24]
 8005386:	ebaa 0303 	sub.w	r3, sl, r3
 800538a:	4599      	cmp	r9, r3
 800538c:	bfa8      	it	ge
 800538e:	4699      	movge	r9, r3
 8005390:	f1b9 0f00 	cmp.w	r9, #0
 8005394:	dc33      	bgt.n	80053fe <_printf_float+0x396>
 8005396:	f04f 0800 	mov.w	r8, #0
 800539a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800539e:	f104 0b1a 	add.w	fp, r4, #26
 80053a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a4:	ebaa 0303 	sub.w	r3, sl, r3
 80053a8:	eba3 0309 	sub.w	r3, r3, r9
 80053ac:	4543      	cmp	r3, r8
 80053ae:	f77f af79 	ble.w	80052a4 <_printf_float+0x23c>
 80053b2:	2301      	movs	r3, #1
 80053b4:	465a      	mov	r2, fp
 80053b6:	4631      	mov	r1, r6
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b8      	blx	r7
 80053bc:	3001      	adds	r0, #1
 80053be:	f43f aeae 	beq.w	800511e <_printf_float+0xb6>
 80053c2:	f108 0801 	add.w	r8, r8, #1
 80053c6:	e7ec      	b.n	80053a2 <_printf_float+0x33a>
 80053c8:	4642      	mov	r2, r8
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	d1c2      	bne.n	800535a <_printf_float+0x2f2>
 80053d4:	e6a3      	b.n	800511e <_printf_float+0xb6>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4631      	mov	r1, r6
 80053da:	4628      	mov	r0, r5
 80053dc:	9206      	str	r2, [sp, #24]
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	f43f ae9c 	beq.w	800511e <_printf_float+0xb6>
 80053e6:	9a06      	ldr	r2, [sp, #24]
 80053e8:	f10b 0b01 	add.w	fp, fp, #1
 80053ec:	e7bb      	b.n	8005366 <_printf_float+0x2fe>
 80053ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	d1c0      	bne.n	800537e <_printf_float+0x316>
 80053fc:	e68f      	b.n	800511e <_printf_float+0xb6>
 80053fe:	9a06      	ldr	r2, [sp, #24]
 8005400:	464b      	mov	r3, r9
 8005402:	4442      	add	r2, r8
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	47b8      	blx	r7
 800540a:	3001      	adds	r0, #1
 800540c:	d1c3      	bne.n	8005396 <_printf_float+0x32e>
 800540e:	e686      	b.n	800511e <_printf_float+0xb6>
 8005410:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005414:	f1ba 0f01 	cmp.w	sl, #1
 8005418:	dc01      	bgt.n	800541e <_printf_float+0x3b6>
 800541a:	07db      	lsls	r3, r3, #31
 800541c:	d536      	bpl.n	800548c <_printf_float+0x424>
 800541e:	2301      	movs	r3, #1
 8005420:	4642      	mov	r2, r8
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	f43f ae78 	beq.w	800511e <_printf_float+0xb6>
 800542e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	f43f ae70 	beq.w	800511e <_printf_float+0xb6>
 800543e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005442:	2200      	movs	r2, #0
 8005444:	2300      	movs	r3, #0
 8005446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800544a:	f7fb fb5d 	bl	8000b08 <__aeabi_dcmpeq>
 800544e:	b9c0      	cbnz	r0, 8005482 <_printf_float+0x41a>
 8005450:	4653      	mov	r3, sl
 8005452:	f108 0201 	add.w	r2, r8, #1
 8005456:	4631      	mov	r1, r6
 8005458:	4628      	mov	r0, r5
 800545a:	47b8      	blx	r7
 800545c:	3001      	adds	r0, #1
 800545e:	d10c      	bne.n	800547a <_printf_float+0x412>
 8005460:	e65d      	b.n	800511e <_printf_float+0xb6>
 8005462:	2301      	movs	r3, #1
 8005464:	465a      	mov	r2, fp
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	47b8      	blx	r7
 800546c:	3001      	adds	r0, #1
 800546e:	f43f ae56 	beq.w	800511e <_printf_float+0xb6>
 8005472:	f108 0801 	add.w	r8, r8, #1
 8005476:	45d0      	cmp	r8, sl
 8005478:	dbf3      	blt.n	8005462 <_printf_float+0x3fa>
 800547a:	464b      	mov	r3, r9
 800547c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005480:	e6df      	b.n	8005242 <_printf_float+0x1da>
 8005482:	f04f 0800 	mov.w	r8, #0
 8005486:	f104 0b1a 	add.w	fp, r4, #26
 800548a:	e7f4      	b.n	8005476 <_printf_float+0x40e>
 800548c:	2301      	movs	r3, #1
 800548e:	4642      	mov	r2, r8
 8005490:	e7e1      	b.n	8005456 <_printf_float+0x3ee>
 8005492:	2301      	movs	r3, #1
 8005494:	464a      	mov	r2, r9
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	47b8      	blx	r7
 800549c:	3001      	adds	r0, #1
 800549e:	f43f ae3e 	beq.w	800511e <_printf_float+0xb6>
 80054a2:	f108 0801 	add.w	r8, r8, #1
 80054a6:	68e3      	ldr	r3, [r4, #12]
 80054a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054aa:	1a5b      	subs	r3, r3, r1
 80054ac:	4543      	cmp	r3, r8
 80054ae:	dcf0      	bgt.n	8005492 <_printf_float+0x42a>
 80054b0:	e6fc      	b.n	80052ac <_printf_float+0x244>
 80054b2:	f04f 0800 	mov.w	r8, #0
 80054b6:	f104 0919 	add.w	r9, r4, #25
 80054ba:	e7f4      	b.n	80054a6 <_printf_float+0x43e>

080054bc <_printf_common>:
 80054bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	4616      	mov	r6, r2
 80054c2:	4698      	mov	r8, r3
 80054c4:	688a      	ldr	r2, [r1, #8]
 80054c6:	690b      	ldr	r3, [r1, #16]
 80054c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054cc:	4293      	cmp	r3, r2
 80054ce:	bfb8      	it	lt
 80054d0:	4613      	movlt	r3, r2
 80054d2:	6033      	str	r3, [r6, #0]
 80054d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054d8:	4607      	mov	r7, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	b10a      	cbz	r2, 80054e2 <_printf_common+0x26>
 80054de:	3301      	adds	r3, #1
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0699      	lsls	r1, r3, #26
 80054e6:	bf42      	ittt	mi
 80054e8:	6833      	ldrmi	r3, [r6, #0]
 80054ea:	3302      	addmi	r3, #2
 80054ec:	6033      	strmi	r3, [r6, #0]
 80054ee:	6825      	ldr	r5, [r4, #0]
 80054f0:	f015 0506 	ands.w	r5, r5, #6
 80054f4:	d106      	bne.n	8005504 <_printf_common+0x48>
 80054f6:	f104 0a19 	add.w	sl, r4, #25
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	6832      	ldr	r2, [r6, #0]
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	42ab      	cmp	r3, r5
 8005502:	dc26      	bgt.n	8005552 <_printf_common+0x96>
 8005504:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	3b00      	subs	r3, #0
 800550c:	bf18      	it	ne
 800550e:	2301      	movne	r3, #1
 8005510:	0692      	lsls	r2, r2, #26
 8005512:	d42b      	bmi.n	800556c <_printf_common+0xb0>
 8005514:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005518:	4641      	mov	r1, r8
 800551a:	4638      	mov	r0, r7
 800551c:	47c8      	blx	r9
 800551e:	3001      	adds	r0, #1
 8005520:	d01e      	beq.n	8005560 <_printf_common+0xa4>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	6922      	ldr	r2, [r4, #16]
 8005526:	f003 0306 	and.w	r3, r3, #6
 800552a:	2b04      	cmp	r3, #4
 800552c:	bf02      	ittt	eq
 800552e:	68e5      	ldreq	r5, [r4, #12]
 8005530:	6833      	ldreq	r3, [r6, #0]
 8005532:	1aed      	subeq	r5, r5, r3
 8005534:	68a3      	ldr	r3, [r4, #8]
 8005536:	bf0c      	ite	eq
 8005538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800553c:	2500      	movne	r5, #0
 800553e:	4293      	cmp	r3, r2
 8005540:	bfc4      	itt	gt
 8005542:	1a9b      	subgt	r3, r3, r2
 8005544:	18ed      	addgt	r5, r5, r3
 8005546:	2600      	movs	r6, #0
 8005548:	341a      	adds	r4, #26
 800554a:	42b5      	cmp	r5, r6
 800554c:	d11a      	bne.n	8005584 <_printf_common+0xc8>
 800554e:	2000      	movs	r0, #0
 8005550:	e008      	b.n	8005564 <_printf_common+0xa8>
 8005552:	2301      	movs	r3, #1
 8005554:	4652      	mov	r2, sl
 8005556:	4641      	mov	r1, r8
 8005558:	4638      	mov	r0, r7
 800555a:	47c8      	blx	r9
 800555c:	3001      	adds	r0, #1
 800555e:	d103      	bne.n	8005568 <_printf_common+0xac>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	3501      	adds	r5, #1
 800556a:	e7c6      	b.n	80054fa <_printf_common+0x3e>
 800556c:	18e1      	adds	r1, r4, r3
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	2030      	movs	r0, #48	@ 0x30
 8005572:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005576:	4422      	add	r2, r4
 8005578:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800557c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005580:	3302      	adds	r3, #2
 8005582:	e7c7      	b.n	8005514 <_printf_common+0x58>
 8005584:	2301      	movs	r3, #1
 8005586:	4622      	mov	r2, r4
 8005588:	4641      	mov	r1, r8
 800558a:	4638      	mov	r0, r7
 800558c:	47c8      	blx	r9
 800558e:	3001      	adds	r0, #1
 8005590:	d0e6      	beq.n	8005560 <_printf_common+0xa4>
 8005592:	3601      	adds	r6, #1
 8005594:	e7d9      	b.n	800554a <_printf_common+0x8e>
	...

08005598 <_printf_i>:
 8005598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	7e0f      	ldrb	r7, [r1, #24]
 800559e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055a0:	2f78      	cmp	r7, #120	@ 0x78
 80055a2:	4691      	mov	r9, r2
 80055a4:	4680      	mov	r8, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	469a      	mov	sl, r3
 80055aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055ae:	d807      	bhi.n	80055c0 <_printf_i+0x28>
 80055b0:	2f62      	cmp	r7, #98	@ 0x62
 80055b2:	d80a      	bhi.n	80055ca <_printf_i+0x32>
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	f000 80d2 	beq.w	800575e <_printf_i+0x1c6>
 80055ba:	2f58      	cmp	r7, #88	@ 0x58
 80055bc:	f000 80b9 	beq.w	8005732 <_printf_i+0x19a>
 80055c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055c8:	e03a      	b.n	8005640 <_printf_i+0xa8>
 80055ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055ce:	2b15      	cmp	r3, #21
 80055d0:	d8f6      	bhi.n	80055c0 <_printf_i+0x28>
 80055d2:	a101      	add	r1, pc, #4	@ (adr r1, 80055d8 <_printf_i+0x40>)
 80055d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005645 	.word	0x08005645
 80055e0:	080055c1 	.word	0x080055c1
 80055e4:	080055c1 	.word	0x080055c1
 80055e8:	080055c1 	.word	0x080055c1
 80055ec:	080055c1 	.word	0x080055c1
 80055f0:	08005645 	.word	0x08005645
 80055f4:	080055c1 	.word	0x080055c1
 80055f8:	080055c1 	.word	0x080055c1
 80055fc:	080055c1 	.word	0x080055c1
 8005600:	080055c1 	.word	0x080055c1
 8005604:	08005745 	.word	0x08005745
 8005608:	0800566f 	.word	0x0800566f
 800560c:	080056ff 	.word	0x080056ff
 8005610:	080055c1 	.word	0x080055c1
 8005614:	080055c1 	.word	0x080055c1
 8005618:	08005767 	.word	0x08005767
 800561c:	080055c1 	.word	0x080055c1
 8005620:	0800566f 	.word	0x0800566f
 8005624:	080055c1 	.word	0x080055c1
 8005628:	080055c1 	.word	0x080055c1
 800562c:	08005707 	.word	0x08005707
 8005630:	6833      	ldr	r3, [r6, #0]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6032      	str	r2, [r6, #0]
 8005638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800563c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005640:	2301      	movs	r3, #1
 8005642:	e09d      	b.n	8005780 <_printf_i+0x1e8>
 8005644:	6833      	ldr	r3, [r6, #0]
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	1d19      	adds	r1, r3, #4
 800564a:	6031      	str	r1, [r6, #0]
 800564c:	0606      	lsls	r6, r0, #24
 800564e:	d501      	bpl.n	8005654 <_printf_i+0xbc>
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	e003      	b.n	800565c <_printf_i+0xc4>
 8005654:	0645      	lsls	r5, r0, #25
 8005656:	d5fb      	bpl.n	8005650 <_printf_i+0xb8>
 8005658:	f9b3 5000 	ldrsh.w	r5, [r3]
 800565c:	2d00      	cmp	r5, #0
 800565e:	da03      	bge.n	8005668 <_printf_i+0xd0>
 8005660:	232d      	movs	r3, #45	@ 0x2d
 8005662:	426d      	negs	r5, r5
 8005664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005668:	4859      	ldr	r0, [pc, #356]	@ (80057d0 <_printf_i+0x238>)
 800566a:	230a      	movs	r3, #10
 800566c:	e011      	b.n	8005692 <_printf_i+0xfa>
 800566e:	6821      	ldr	r1, [r4, #0]
 8005670:	6833      	ldr	r3, [r6, #0]
 8005672:	0608      	lsls	r0, r1, #24
 8005674:	f853 5b04 	ldr.w	r5, [r3], #4
 8005678:	d402      	bmi.n	8005680 <_printf_i+0xe8>
 800567a:	0649      	lsls	r1, r1, #25
 800567c:	bf48      	it	mi
 800567e:	b2ad      	uxthmi	r5, r5
 8005680:	2f6f      	cmp	r7, #111	@ 0x6f
 8005682:	4853      	ldr	r0, [pc, #332]	@ (80057d0 <_printf_i+0x238>)
 8005684:	6033      	str	r3, [r6, #0]
 8005686:	bf14      	ite	ne
 8005688:	230a      	movne	r3, #10
 800568a:	2308      	moveq	r3, #8
 800568c:	2100      	movs	r1, #0
 800568e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005692:	6866      	ldr	r6, [r4, #4]
 8005694:	60a6      	str	r6, [r4, #8]
 8005696:	2e00      	cmp	r6, #0
 8005698:	bfa2      	ittt	ge
 800569a:	6821      	ldrge	r1, [r4, #0]
 800569c:	f021 0104 	bicge.w	r1, r1, #4
 80056a0:	6021      	strge	r1, [r4, #0]
 80056a2:	b90d      	cbnz	r5, 80056a8 <_printf_i+0x110>
 80056a4:	2e00      	cmp	r6, #0
 80056a6:	d04b      	beq.n	8005740 <_printf_i+0x1a8>
 80056a8:	4616      	mov	r6, r2
 80056aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80056ae:	fb03 5711 	mls	r7, r3, r1, r5
 80056b2:	5dc7      	ldrb	r7, [r0, r7]
 80056b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056b8:	462f      	mov	r7, r5
 80056ba:	42bb      	cmp	r3, r7
 80056bc:	460d      	mov	r5, r1
 80056be:	d9f4      	bls.n	80056aa <_printf_i+0x112>
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d10b      	bne.n	80056dc <_printf_i+0x144>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	07df      	lsls	r7, r3, #31
 80056c8:	d508      	bpl.n	80056dc <_printf_i+0x144>
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	6861      	ldr	r1, [r4, #4]
 80056ce:	4299      	cmp	r1, r3
 80056d0:	bfde      	ittt	le
 80056d2:	2330      	movle	r3, #48	@ 0x30
 80056d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056dc:	1b92      	subs	r2, r2, r6
 80056de:	6122      	str	r2, [r4, #16]
 80056e0:	f8cd a000 	str.w	sl, [sp]
 80056e4:	464b      	mov	r3, r9
 80056e6:	aa03      	add	r2, sp, #12
 80056e8:	4621      	mov	r1, r4
 80056ea:	4640      	mov	r0, r8
 80056ec:	f7ff fee6 	bl	80054bc <_printf_common>
 80056f0:	3001      	adds	r0, #1
 80056f2:	d14a      	bne.n	800578a <_printf_i+0x1f2>
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295
 80056f8:	b004      	add	sp, #16
 80056fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	f043 0320 	orr.w	r3, r3, #32
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	4833      	ldr	r0, [pc, #204]	@ (80057d4 <_printf_i+0x23c>)
 8005708:	2778      	movs	r7, #120	@ 0x78
 800570a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	6831      	ldr	r1, [r6, #0]
 8005712:	061f      	lsls	r7, r3, #24
 8005714:	f851 5b04 	ldr.w	r5, [r1], #4
 8005718:	d402      	bmi.n	8005720 <_printf_i+0x188>
 800571a:	065f      	lsls	r7, r3, #25
 800571c:	bf48      	it	mi
 800571e:	b2ad      	uxthmi	r5, r5
 8005720:	6031      	str	r1, [r6, #0]
 8005722:	07d9      	lsls	r1, r3, #31
 8005724:	bf44      	itt	mi
 8005726:	f043 0320 	orrmi.w	r3, r3, #32
 800572a:	6023      	strmi	r3, [r4, #0]
 800572c:	b11d      	cbz	r5, 8005736 <_printf_i+0x19e>
 800572e:	2310      	movs	r3, #16
 8005730:	e7ac      	b.n	800568c <_printf_i+0xf4>
 8005732:	4827      	ldr	r0, [pc, #156]	@ (80057d0 <_printf_i+0x238>)
 8005734:	e7e9      	b.n	800570a <_printf_i+0x172>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	f023 0320 	bic.w	r3, r3, #32
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	e7f6      	b.n	800572e <_printf_i+0x196>
 8005740:	4616      	mov	r6, r2
 8005742:	e7bd      	b.n	80056c0 <_printf_i+0x128>
 8005744:	6833      	ldr	r3, [r6, #0]
 8005746:	6825      	ldr	r5, [r4, #0]
 8005748:	6961      	ldr	r1, [r4, #20]
 800574a:	1d18      	adds	r0, r3, #4
 800574c:	6030      	str	r0, [r6, #0]
 800574e:	062e      	lsls	r6, r5, #24
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	d501      	bpl.n	8005758 <_printf_i+0x1c0>
 8005754:	6019      	str	r1, [r3, #0]
 8005756:	e002      	b.n	800575e <_printf_i+0x1c6>
 8005758:	0668      	lsls	r0, r5, #25
 800575a:	d5fb      	bpl.n	8005754 <_printf_i+0x1bc>
 800575c:	8019      	strh	r1, [r3, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	6123      	str	r3, [r4, #16]
 8005762:	4616      	mov	r6, r2
 8005764:	e7bc      	b.n	80056e0 <_printf_i+0x148>
 8005766:	6833      	ldr	r3, [r6, #0]
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	6032      	str	r2, [r6, #0]
 800576c:	681e      	ldr	r6, [r3, #0]
 800576e:	6862      	ldr	r2, [r4, #4]
 8005770:	2100      	movs	r1, #0
 8005772:	4630      	mov	r0, r6
 8005774:	f7fa fd4c 	bl	8000210 <memchr>
 8005778:	b108      	cbz	r0, 800577e <_printf_i+0x1e6>
 800577a:	1b80      	subs	r0, r0, r6
 800577c:	6060      	str	r0, [r4, #4]
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	6123      	str	r3, [r4, #16]
 8005782:	2300      	movs	r3, #0
 8005784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005788:	e7aa      	b.n	80056e0 <_printf_i+0x148>
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	4632      	mov	r2, r6
 800578e:	4649      	mov	r1, r9
 8005790:	4640      	mov	r0, r8
 8005792:	47d0      	blx	sl
 8005794:	3001      	adds	r0, #1
 8005796:	d0ad      	beq.n	80056f4 <_printf_i+0x15c>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	079b      	lsls	r3, r3, #30
 800579c:	d413      	bmi.n	80057c6 <_printf_i+0x22e>
 800579e:	68e0      	ldr	r0, [r4, #12]
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	4298      	cmp	r0, r3
 80057a4:	bfb8      	it	lt
 80057a6:	4618      	movlt	r0, r3
 80057a8:	e7a6      	b.n	80056f8 <_printf_i+0x160>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4632      	mov	r2, r6
 80057ae:	4649      	mov	r1, r9
 80057b0:	4640      	mov	r0, r8
 80057b2:	47d0      	blx	sl
 80057b4:	3001      	adds	r0, #1
 80057b6:	d09d      	beq.n	80056f4 <_printf_i+0x15c>
 80057b8:	3501      	adds	r5, #1
 80057ba:	68e3      	ldr	r3, [r4, #12]
 80057bc:	9903      	ldr	r1, [sp, #12]
 80057be:	1a5b      	subs	r3, r3, r1
 80057c0:	42ab      	cmp	r3, r5
 80057c2:	dcf2      	bgt.n	80057aa <_printf_i+0x212>
 80057c4:	e7eb      	b.n	800579e <_printf_i+0x206>
 80057c6:	2500      	movs	r5, #0
 80057c8:	f104 0619 	add.w	r6, r4, #25
 80057cc:	e7f5      	b.n	80057ba <_printf_i+0x222>
 80057ce:	bf00      	nop
 80057d0:	08008299 	.word	0x08008299
 80057d4:	080082aa 	.word	0x080082aa

080057d8 <std>:
 80057d8:	2300      	movs	r3, #0
 80057da:	b510      	push	{r4, lr}
 80057dc:	4604      	mov	r4, r0
 80057de:	e9c0 3300 	strd	r3, r3, [r0]
 80057e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057e6:	6083      	str	r3, [r0, #8]
 80057e8:	8181      	strh	r1, [r0, #12]
 80057ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80057ec:	81c2      	strh	r2, [r0, #14]
 80057ee:	6183      	str	r3, [r0, #24]
 80057f0:	4619      	mov	r1, r3
 80057f2:	2208      	movs	r2, #8
 80057f4:	305c      	adds	r0, #92	@ 0x5c
 80057f6:	f000 f8f4 	bl	80059e2 <memset>
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <std+0x58>)
 80057fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80057fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <std+0x5c>)
 8005800:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <std+0x60>)
 8005804:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <std+0x64>)
 8005808:	6323      	str	r3, [r4, #48]	@ 0x30
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <std+0x68>)
 800580c:	6224      	str	r4, [r4, #32]
 800580e:	429c      	cmp	r4, r3
 8005810:	d006      	beq.n	8005820 <std+0x48>
 8005812:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005816:	4294      	cmp	r4, r2
 8005818:	d002      	beq.n	8005820 <std+0x48>
 800581a:	33d0      	adds	r3, #208	@ 0xd0
 800581c:	429c      	cmp	r4, r3
 800581e:	d105      	bne.n	800582c <std+0x54>
 8005820:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005828:	f000 b958 	b.w	8005adc <__retarget_lock_init_recursive>
 800582c:	bd10      	pop	{r4, pc}
 800582e:	bf00      	nop
 8005830:	0800595d 	.word	0x0800595d
 8005834:	0800597f 	.word	0x0800597f
 8005838:	080059b7 	.word	0x080059b7
 800583c:	080059db 	.word	0x080059db
 8005840:	20000608 	.word	0x20000608

08005844 <stdio_exit_handler>:
 8005844:	4a02      	ldr	r2, [pc, #8]	@ (8005850 <stdio_exit_handler+0xc>)
 8005846:	4903      	ldr	r1, [pc, #12]	@ (8005854 <stdio_exit_handler+0x10>)
 8005848:	4803      	ldr	r0, [pc, #12]	@ (8005858 <stdio_exit_handler+0x14>)
 800584a:	f000 b869 	b.w	8005920 <_fwalk_sglue>
 800584e:	bf00      	nop
 8005850:	2000030c 	.word	0x2000030c
 8005854:	080071c5 	.word	0x080071c5
 8005858:	2000031c 	.word	0x2000031c

0800585c <cleanup_stdio>:
 800585c:	6841      	ldr	r1, [r0, #4]
 800585e:	4b0c      	ldr	r3, [pc, #48]	@ (8005890 <cleanup_stdio+0x34>)
 8005860:	4299      	cmp	r1, r3
 8005862:	b510      	push	{r4, lr}
 8005864:	4604      	mov	r4, r0
 8005866:	d001      	beq.n	800586c <cleanup_stdio+0x10>
 8005868:	f001 fcac 	bl	80071c4 <_fflush_r>
 800586c:	68a1      	ldr	r1, [r4, #8]
 800586e:	4b09      	ldr	r3, [pc, #36]	@ (8005894 <cleanup_stdio+0x38>)
 8005870:	4299      	cmp	r1, r3
 8005872:	d002      	beq.n	800587a <cleanup_stdio+0x1e>
 8005874:	4620      	mov	r0, r4
 8005876:	f001 fca5 	bl	80071c4 <_fflush_r>
 800587a:	68e1      	ldr	r1, [r4, #12]
 800587c:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <cleanup_stdio+0x3c>)
 800587e:	4299      	cmp	r1, r3
 8005880:	d004      	beq.n	800588c <cleanup_stdio+0x30>
 8005882:	4620      	mov	r0, r4
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	f001 bc9c 	b.w	80071c4 <_fflush_r>
 800588c:	bd10      	pop	{r4, pc}
 800588e:	bf00      	nop
 8005890:	20000608 	.word	0x20000608
 8005894:	20000670 	.word	0x20000670
 8005898:	200006d8 	.word	0x200006d8

0800589c <global_stdio_init.part.0>:
 800589c:	b510      	push	{r4, lr}
 800589e:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <global_stdio_init.part.0+0x30>)
 80058a0:	4c0b      	ldr	r4, [pc, #44]	@ (80058d0 <global_stdio_init.part.0+0x34>)
 80058a2:	4a0c      	ldr	r2, [pc, #48]	@ (80058d4 <global_stdio_init.part.0+0x38>)
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	4620      	mov	r0, r4
 80058a8:	2200      	movs	r2, #0
 80058aa:	2104      	movs	r1, #4
 80058ac:	f7ff ff94 	bl	80057d8 <std>
 80058b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058b4:	2201      	movs	r2, #1
 80058b6:	2109      	movs	r1, #9
 80058b8:	f7ff ff8e 	bl	80057d8 <std>
 80058bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058c0:	2202      	movs	r2, #2
 80058c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c6:	2112      	movs	r1, #18
 80058c8:	f7ff bf86 	b.w	80057d8 <std>
 80058cc:	20000740 	.word	0x20000740
 80058d0:	20000608 	.word	0x20000608
 80058d4:	08005845 	.word	0x08005845

080058d8 <__sfp_lock_acquire>:
 80058d8:	4801      	ldr	r0, [pc, #4]	@ (80058e0 <__sfp_lock_acquire+0x8>)
 80058da:	f000 b900 	b.w	8005ade <__retarget_lock_acquire_recursive>
 80058de:	bf00      	nop
 80058e0:	20000749 	.word	0x20000749

080058e4 <__sfp_lock_release>:
 80058e4:	4801      	ldr	r0, [pc, #4]	@ (80058ec <__sfp_lock_release+0x8>)
 80058e6:	f000 b8fb 	b.w	8005ae0 <__retarget_lock_release_recursive>
 80058ea:	bf00      	nop
 80058ec:	20000749 	.word	0x20000749

080058f0 <__sinit>:
 80058f0:	b510      	push	{r4, lr}
 80058f2:	4604      	mov	r4, r0
 80058f4:	f7ff fff0 	bl	80058d8 <__sfp_lock_acquire>
 80058f8:	6a23      	ldr	r3, [r4, #32]
 80058fa:	b11b      	cbz	r3, 8005904 <__sinit+0x14>
 80058fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005900:	f7ff bff0 	b.w	80058e4 <__sfp_lock_release>
 8005904:	4b04      	ldr	r3, [pc, #16]	@ (8005918 <__sinit+0x28>)
 8005906:	6223      	str	r3, [r4, #32]
 8005908:	4b04      	ldr	r3, [pc, #16]	@ (800591c <__sinit+0x2c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f5      	bne.n	80058fc <__sinit+0xc>
 8005910:	f7ff ffc4 	bl	800589c <global_stdio_init.part.0>
 8005914:	e7f2      	b.n	80058fc <__sinit+0xc>
 8005916:	bf00      	nop
 8005918:	0800585d 	.word	0x0800585d
 800591c:	20000740 	.word	0x20000740

08005920 <_fwalk_sglue>:
 8005920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005924:	4607      	mov	r7, r0
 8005926:	4688      	mov	r8, r1
 8005928:	4614      	mov	r4, r2
 800592a:	2600      	movs	r6, #0
 800592c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005930:	f1b9 0901 	subs.w	r9, r9, #1
 8005934:	d505      	bpl.n	8005942 <_fwalk_sglue+0x22>
 8005936:	6824      	ldr	r4, [r4, #0]
 8005938:	2c00      	cmp	r4, #0
 800593a:	d1f7      	bne.n	800592c <_fwalk_sglue+0xc>
 800593c:	4630      	mov	r0, r6
 800593e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005942:	89ab      	ldrh	r3, [r5, #12]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d907      	bls.n	8005958 <_fwalk_sglue+0x38>
 8005948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800594c:	3301      	adds	r3, #1
 800594e:	d003      	beq.n	8005958 <_fwalk_sglue+0x38>
 8005950:	4629      	mov	r1, r5
 8005952:	4638      	mov	r0, r7
 8005954:	47c0      	blx	r8
 8005956:	4306      	orrs	r6, r0
 8005958:	3568      	adds	r5, #104	@ 0x68
 800595a:	e7e9      	b.n	8005930 <_fwalk_sglue+0x10>

0800595c <__sread>:
 800595c:	b510      	push	{r4, lr}
 800595e:	460c      	mov	r4, r1
 8005960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005964:	f000 f86c 	bl	8005a40 <_read_r>
 8005968:	2800      	cmp	r0, #0
 800596a:	bfab      	itete	ge
 800596c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800596e:	89a3      	ldrhlt	r3, [r4, #12]
 8005970:	181b      	addge	r3, r3, r0
 8005972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005976:	bfac      	ite	ge
 8005978:	6563      	strge	r3, [r4, #84]	@ 0x54
 800597a:	81a3      	strhlt	r3, [r4, #12]
 800597c:	bd10      	pop	{r4, pc}

0800597e <__swrite>:
 800597e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005982:	461f      	mov	r7, r3
 8005984:	898b      	ldrh	r3, [r1, #12]
 8005986:	05db      	lsls	r3, r3, #23
 8005988:	4605      	mov	r5, r0
 800598a:	460c      	mov	r4, r1
 800598c:	4616      	mov	r6, r2
 800598e:	d505      	bpl.n	800599c <__swrite+0x1e>
 8005990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005994:	2302      	movs	r3, #2
 8005996:	2200      	movs	r2, #0
 8005998:	f000 f840 	bl	8005a1c <_lseek_r>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059a6:	81a3      	strh	r3, [r4, #12]
 80059a8:	4632      	mov	r2, r6
 80059aa:	463b      	mov	r3, r7
 80059ac:	4628      	mov	r0, r5
 80059ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	f000 b857 	b.w	8005a64 <_write_r>

080059b6 <__sseek>:
 80059b6:	b510      	push	{r4, lr}
 80059b8:	460c      	mov	r4, r1
 80059ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059be:	f000 f82d 	bl	8005a1c <_lseek_r>
 80059c2:	1c43      	adds	r3, r0, #1
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	bf15      	itete	ne
 80059c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059d2:	81a3      	strheq	r3, [r4, #12]
 80059d4:	bf18      	it	ne
 80059d6:	81a3      	strhne	r3, [r4, #12]
 80059d8:	bd10      	pop	{r4, pc}

080059da <__sclose>:
 80059da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059de:	f000 b80d 	b.w	80059fc <_close_r>

080059e2 <memset>:
 80059e2:	4402      	add	r2, r0
 80059e4:	4603      	mov	r3, r0
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d100      	bne.n	80059ec <memset+0xa>
 80059ea:	4770      	bx	lr
 80059ec:	f803 1b01 	strb.w	r1, [r3], #1
 80059f0:	e7f9      	b.n	80059e6 <memset+0x4>
	...

080059f4 <_localeconv_r>:
 80059f4:	4800      	ldr	r0, [pc, #0]	@ (80059f8 <_localeconv_r+0x4>)
 80059f6:	4770      	bx	lr
 80059f8:	20000458 	.word	0x20000458

080059fc <_close_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d06      	ldr	r5, [pc, #24]	@ (8005a18 <_close_r+0x1c>)
 8005a00:	2300      	movs	r3, #0
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	f7fc fa2f 	bl	8001e6a <_close>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_close_r+0x1a>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_close_r+0x1a>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	20000744 	.word	0x20000744

08005a1c <_lseek_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d07      	ldr	r5, [pc, #28]	@ (8005a3c <_lseek_r+0x20>)
 8005a20:	4604      	mov	r4, r0
 8005a22:	4608      	mov	r0, r1
 8005a24:	4611      	mov	r1, r2
 8005a26:	2200      	movs	r2, #0
 8005a28:	602a      	str	r2, [r5, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f7fc fa44 	bl	8001eb8 <_lseek>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_lseek_r+0x1e>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_lseek_r+0x1e>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	20000744 	.word	0x20000744

08005a40 <_read_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d07      	ldr	r5, [pc, #28]	@ (8005a60 <_read_r+0x20>)
 8005a44:	4604      	mov	r4, r0
 8005a46:	4608      	mov	r0, r1
 8005a48:	4611      	mov	r1, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	602a      	str	r2, [r5, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f7fc f9d2 	bl	8001df8 <_read>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_read_r+0x1e>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_read_r+0x1e>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	20000744 	.word	0x20000744

08005a64 <_write_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d07      	ldr	r5, [pc, #28]	@ (8005a84 <_write_r+0x20>)
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4608      	mov	r0, r1
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	602a      	str	r2, [r5, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f7fc f9dd 	bl	8001e32 <_write>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_write_r+0x1e>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_write_r+0x1e>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	20000744 	.word	0x20000744

08005a88 <__errno>:
 8005a88:	4b01      	ldr	r3, [pc, #4]	@ (8005a90 <__errno+0x8>)
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000318 	.word	0x20000318

08005a94 <__libc_init_array>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4d0d      	ldr	r5, [pc, #52]	@ (8005acc <__libc_init_array+0x38>)
 8005a98:	4c0d      	ldr	r4, [pc, #52]	@ (8005ad0 <__libc_init_array+0x3c>)
 8005a9a:	1b64      	subs	r4, r4, r5
 8005a9c:	10a4      	asrs	r4, r4, #2
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	42a6      	cmp	r6, r4
 8005aa2:	d109      	bne.n	8005ab8 <__libc_init_array+0x24>
 8005aa4:	4d0b      	ldr	r5, [pc, #44]	@ (8005ad4 <__libc_init_array+0x40>)
 8005aa6:	4c0c      	ldr	r4, [pc, #48]	@ (8005ad8 <__libc_init_array+0x44>)
 8005aa8:	f001 febc 	bl	8007824 <_init>
 8005aac:	1b64      	subs	r4, r4, r5
 8005aae:	10a4      	asrs	r4, r4, #2
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	42a6      	cmp	r6, r4
 8005ab4:	d105      	bne.n	8005ac2 <__libc_init_array+0x2e>
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
 8005ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abc:	4798      	blx	r3
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7ee      	b.n	8005aa0 <__libc_init_array+0xc>
 8005ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac6:	4798      	blx	r3
 8005ac8:	3601      	adds	r6, #1
 8005aca:	e7f2      	b.n	8005ab2 <__libc_init_array+0x1e>
 8005acc:	080085ec 	.word	0x080085ec
 8005ad0:	080085ec 	.word	0x080085ec
 8005ad4:	080085ec 	.word	0x080085ec
 8005ad8:	080085f0 	.word	0x080085f0

08005adc <__retarget_lock_init_recursive>:
 8005adc:	4770      	bx	lr

08005ade <__retarget_lock_acquire_recursive>:
 8005ade:	4770      	bx	lr

08005ae0 <__retarget_lock_release_recursive>:
 8005ae0:	4770      	bx	lr
	...

08005ae4 <__assert_func>:
 8005ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ae6:	4614      	mov	r4, r2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <__assert_func+0x2c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4605      	mov	r5, r0
 8005af0:	68d8      	ldr	r0, [r3, #12]
 8005af2:	b954      	cbnz	r4, 8005b0a <__assert_func+0x26>
 8005af4:	4b07      	ldr	r3, [pc, #28]	@ (8005b14 <__assert_func+0x30>)
 8005af6:	461c      	mov	r4, r3
 8005af8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005afc:	9100      	str	r1, [sp, #0]
 8005afe:	462b      	mov	r3, r5
 8005b00:	4905      	ldr	r1, [pc, #20]	@ (8005b18 <__assert_func+0x34>)
 8005b02:	f001 fb87 	bl	8007214 <fiprintf>
 8005b06:	f001 fbb5 	bl	8007274 <abort>
 8005b0a:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <__assert_func+0x38>)
 8005b0c:	e7f4      	b.n	8005af8 <__assert_func+0x14>
 8005b0e:	bf00      	nop
 8005b10:	20000318 	.word	0x20000318
 8005b14:	080082f6 	.word	0x080082f6
 8005b18:	080082c8 	.word	0x080082c8
 8005b1c:	080082bb 	.word	0x080082bb

08005b20 <quorem>:
 8005b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	6903      	ldr	r3, [r0, #16]
 8005b26:	690c      	ldr	r4, [r1, #16]
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	4607      	mov	r7, r0
 8005b2c:	db7e      	blt.n	8005c2c <quorem+0x10c>
 8005b2e:	3c01      	subs	r4, #1
 8005b30:	f101 0814 	add.w	r8, r1, #20
 8005b34:	00a3      	lsls	r3, r4, #2
 8005b36:	f100 0514 	add.w	r5, r0, #20
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b52:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b56:	d32e      	bcc.n	8005bb6 <quorem+0x96>
 8005b58:	f04f 0a00 	mov.w	sl, #0
 8005b5c:	46c4      	mov	ip, r8
 8005b5e:	46ae      	mov	lr, r5
 8005b60:	46d3      	mov	fp, sl
 8005b62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b66:	b298      	uxth	r0, r3
 8005b68:	fb06 a000 	mla	r0, r6, r0, sl
 8005b6c:	0c02      	lsrs	r2, r0, #16
 8005b6e:	0c1b      	lsrs	r3, r3, #16
 8005b70:	fb06 2303 	mla	r3, r6, r3, r2
 8005b74:	f8de 2000 	ldr.w	r2, [lr]
 8005b78:	b280      	uxth	r0, r0
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	1a12      	subs	r2, r2, r0
 8005b7e:	445a      	add	r2, fp
 8005b80:	f8de 0000 	ldr.w	r0, [lr]
 8005b84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b92:	b292      	uxth	r2, r2
 8005b94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b98:	45e1      	cmp	r9, ip
 8005b9a:	f84e 2b04 	str.w	r2, [lr], #4
 8005b9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ba2:	d2de      	bcs.n	8005b62 <quorem+0x42>
 8005ba4:	9b00      	ldr	r3, [sp, #0]
 8005ba6:	58eb      	ldr	r3, [r5, r3]
 8005ba8:	b92b      	cbnz	r3, 8005bb6 <quorem+0x96>
 8005baa:	9b01      	ldr	r3, [sp, #4]
 8005bac:	3b04      	subs	r3, #4
 8005bae:	429d      	cmp	r5, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	d32f      	bcc.n	8005c14 <quorem+0xf4>
 8005bb4:	613c      	str	r4, [r7, #16]
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	f001 f978 	bl	8006eac <__mcmp>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	db25      	blt.n	8005c0c <quorem+0xec>
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bc8:	f8d1 c000 	ldr.w	ip, [r1]
 8005bcc:	fa1f fe82 	uxth.w	lr, r2
 8005bd0:	fa1f f38c 	uxth.w	r3, ip
 8005bd4:	eba3 030e 	sub.w	r3, r3, lr
 8005bd8:	4403      	add	r3, r0
 8005bda:	0c12      	lsrs	r2, r2, #16
 8005bdc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005be0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bea:	45c1      	cmp	r9, r8
 8005bec:	f841 3b04 	str.w	r3, [r1], #4
 8005bf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bf4:	d2e6      	bcs.n	8005bc4 <quorem+0xa4>
 8005bf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bfe:	b922      	cbnz	r2, 8005c0a <quorem+0xea>
 8005c00:	3b04      	subs	r3, #4
 8005c02:	429d      	cmp	r5, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	d30b      	bcc.n	8005c20 <quorem+0x100>
 8005c08:	613c      	str	r4, [r7, #16]
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	b003      	add	sp, #12
 8005c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	3b04      	subs	r3, #4
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	d1cb      	bne.n	8005bb4 <quorem+0x94>
 8005c1c:	3c01      	subs	r4, #1
 8005c1e:	e7c6      	b.n	8005bae <quorem+0x8e>
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	3b04      	subs	r3, #4
 8005c24:	2a00      	cmp	r2, #0
 8005c26:	d1ef      	bne.n	8005c08 <quorem+0xe8>
 8005c28:	3c01      	subs	r4, #1
 8005c2a:	e7ea      	b.n	8005c02 <quorem+0xe2>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e7ee      	b.n	8005c0e <quorem+0xee>

08005c30 <_dtoa_r>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	69c7      	ldr	r7, [r0, #28]
 8005c36:	b099      	sub	sp, #100	@ 0x64
 8005c38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c3c:	ec55 4b10 	vmov	r4, r5, d0
 8005c40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c44:	4683      	mov	fp, r0
 8005c46:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c4a:	b97f      	cbnz	r7, 8005c6c <_dtoa_r+0x3c>
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	f000 fdfd 	bl	800684c <malloc>
 8005c52:	4602      	mov	r2, r0
 8005c54:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c58:	b920      	cbnz	r0, 8005c64 <_dtoa_r+0x34>
 8005c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ef8 <_dtoa_r+0x2c8>)
 8005c5c:	21ef      	movs	r1, #239	@ 0xef
 8005c5e:	48a7      	ldr	r0, [pc, #668]	@ (8005efc <_dtoa_r+0x2cc>)
 8005c60:	f7ff ff40 	bl	8005ae4 <__assert_func>
 8005c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c68:	6007      	str	r7, [r0, #0]
 8005c6a:	60c7      	str	r7, [r0, #12]
 8005c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	b159      	cbz	r1, 8005c8c <_dtoa_r+0x5c>
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	604a      	str	r2, [r1, #4]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4093      	lsls	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
 8005c7e:	4658      	mov	r0, fp
 8005c80:	f000 feda 	bl	8006a38 <_Bfree>
 8005c84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	1e2b      	subs	r3, r5, #0
 8005c8e:	bfb9      	ittee	lt
 8005c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c94:	9303      	strlt	r3, [sp, #12]
 8005c96:	2300      	movge	r3, #0
 8005c98:	6033      	strge	r3, [r6, #0]
 8005c9a:	9f03      	ldr	r7, [sp, #12]
 8005c9c:	4b98      	ldr	r3, [pc, #608]	@ (8005f00 <_dtoa_r+0x2d0>)
 8005c9e:	bfbc      	itt	lt
 8005ca0:	2201      	movlt	r2, #1
 8005ca2:	6032      	strlt	r2, [r6, #0]
 8005ca4:	43bb      	bics	r3, r7
 8005ca6:	d112      	bne.n	8005cce <_dtoa_r+0x9e>
 8005ca8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cb4:	4323      	orrs	r3, r4
 8005cb6:	f000 854d 	beq.w	8006754 <_dtoa_r+0xb24>
 8005cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f14 <_dtoa_r+0x2e4>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 854f 	beq.w	8006764 <_dtoa_r+0xb34>
 8005cc6:	f10a 0303 	add.w	r3, sl, #3
 8005cca:	f000 bd49 	b.w	8006760 <_dtoa_r+0xb30>
 8005cce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	ec51 0b17 	vmov	r0, r1, d7
 8005cd8:	2300      	movs	r3, #0
 8005cda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cde:	f7fa ff13 	bl	8000b08 <__aeabi_dcmpeq>
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	b158      	cbz	r0, 8005cfe <_dtoa_r+0xce>
 8005ce6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ce8:	2301      	movs	r3, #1
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cee:	b113      	cbz	r3, 8005cf6 <_dtoa_r+0xc6>
 8005cf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cf2:	4b84      	ldr	r3, [pc, #528]	@ (8005f04 <_dtoa_r+0x2d4>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005f18 <_dtoa_r+0x2e8>
 8005cfa:	f000 bd33 	b.w	8006764 <_dtoa_r+0xb34>
 8005cfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d02:	aa16      	add	r2, sp, #88	@ 0x58
 8005d04:	a917      	add	r1, sp, #92	@ 0x5c
 8005d06:	4658      	mov	r0, fp
 8005d08:	f001 f980 	bl	800700c <__d2b>
 8005d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d10:	4681      	mov	r9, r0
 8005d12:	2e00      	cmp	r6, #0
 8005d14:	d077      	beq.n	8005e06 <_dtoa_r+0x1d6>
 8005d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d30:	4619      	mov	r1, r3
 8005d32:	2200      	movs	r2, #0
 8005d34:	4b74      	ldr	r3, [pc, #464]	@ (8005f08 <_dtoa_r+0x2d8>)
 8005d36:	f7fa fac7 	bl	80002c8 <__aeabi_dsub>
 8005d3a:	a369      	add	r3, pc, #420	@ (adr r3, 8005ee0 <_dtoa_r+0x2b0>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fc7a 	bl	8000638 <__aeabi_dmul>
 8005d44:	a368      	add	r3, pc, #416	@ (adr r3, 8005ee8 <_dtoa_r+0x2b8>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fabf 	bl	80002cc <__adddf3>
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4630      	mov	r0, r6
 8005d52:	460d      	mov	r5, r1
 8005d54:	f7fa fc06 	bl	8000564 <__aeabi_i2d>
 8005d58:	a365      	add	r3, pc, #404	@ (adr r3, 8005ef0 <_dtoa_r+0x2c0>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fc6b 	bl	8000638 <__aeabi_dmul>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f7fa faaf 	bl	80002cc <__adddf3>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	460d      	mov	r5, r1
 8005d72:	f7fa ff11 	bl	8000b98 <__aeabi_d2iz>
 8005d76:	2200      	movs	r2, #0
 8005d78:	4607      	mov	r7, r0
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	f7fa fecc 	bl	8000b1c <__aeabi_dcmplt>
 8005d84:	b140      	cbz	r0, 8005d98 <_dtoa_r+0x168>
 8005d86:	4638      	mov	r0, r7
 8005d88:	f7fa fbec 	bl	8000564 <__aeabi_i2d>
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	462b      	mov	r3, r5
 8005d90:	f7fa feba 	bl	8000b08 <__aeabi_dcmpeq>
 8005d94:	b900      	cbnz	r0, 8005d98 <_dtoa_r+0x168>
 8005d96:	3f01      	subs	r7, #1
 8005d98:	2f16      	cmp	r7, #22
 8005d9a:	d851      	bhi.n	8005e40 <_dtoa_r+0x210>
 8005d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8005f0c <_dtoa_r+0x2dc>)
 8005d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005daa:	f7fa feb7 	bl	8000b1c <__aeabi_dcmplt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d048      	beq.n	8005e44 <_dtoa_r+0x214>
 8005db2:	3f01      	subs	r7, #1
 8005db4:	2300      	movs	r3, #0
 8005db6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005db8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005dba:	1b9b      	subs	r3, r3, r6
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	bf44      	itt	mi
 8005dc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dc4:	2300      	movmi	r3, #0
 8005dc6:	9208      	str	r2, [sp, #32]
 8005dc8:	bf54      	ite	pl
 8005dca:	f04f 0800 	movpl.w	r8, #0
 8005dce:	9308      	strmi	r3, [sp, #32]
 8005dd0:	2f00      	cmp	r7, #0
 8005dd2:	db39      	blt.n	8005e48 <_dtoa_r+0x218>
 8005dd4:	9b08      	ldr	r3, [sp, #32]
 8005dd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005dd8:	443b      	add	r3, r7
 8005dda:	9308      	str	r3, [sp, #32]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	d864      	bhi.n	8005eb0 <_dtoa_r+0x280>
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	bfc4      	itt	gt
 8005dea:	3b04      	subgt	r3, #4
 8005dec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df0:	f1a3 0302 	sub.w	r3, r3, #2
 8005df4:	bfcc      	ite	gt
 8005df6:	2400      	movgt	r4, #0
 8005df8:	2401      	movle	r4, #1
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d863      	bhi.n	8005ec6 <_dtoa_r+0x296>
 8005dfe:	e8df f003 	tbb	[pc, r3]
 8005e02:	372a      	.short	0x372a
 8005e04:	5535      	.short	0x5535
 8005e06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e0a:	441e      	add	r6, r3
 8005e0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	bfc1      	itttt	gt
 8005e14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e18:	409f      	lslgt	r7, r3
 8005e1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e22:	bfd6      	itet	le
 8005e24:	f1c3 0320 	rsble	r3, r3, #32
 8005e28:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e2c:	fa04 f003 	lslle.w	r0, r4, r3
 8005e30:	f7fa fb88 	bl	8000544 <__aeabi_ui2d>
 8005e34:	2201      	movs	r2, #1
 8005e36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e3a:	3e01      	subs	r6, #1
 8005e3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e3e:	e777      	b.n	8005d30 <_dtoa_r+0x100>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e7b8      	b.n	8005db6 <_dtoa_r+0x186>
 8005e44:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e46:	e7b7      	b.n	8005db8 <_dtoa_r+0x188>
 8005e48:	427b      	negs	r3, r7
 8005e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	eba8 0807 	sub.w	r8, r8, r7
 8005e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e54:	e7c4      	b.n	8005de0 <_dtoa_r+0x1b0>
 8005e56:	2300      	movs	r3, #0
 8005e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dc35      	bgt.n	8005ecc <_dtoa_r+0x29c>
 8005e60:	2301      	movs	r3, #1
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	9307      	str	r3, [sp, #28]
 8005e66:	461a      	mov	r2, r3
 8005e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e6a:	e00b      	b.n	8005e84 <_dtoa_r+0x254>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e7f3      	b.n	8005e58 <_dtoa_r+0x228>
 8005e70:	2300      	movs	r3, #0
 8005e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	bfb8      	it	lt
 8005e82:	2301      	movlt	r3, #1
 8005e84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	f102 0514 	add.w	r5, r2, #20
 8005e90:	429d      	cmp	r5, r3
 8005e92:	d91f      	bls.n	8005ed4 <_dtoa_r+0x2a4>
 8005e94:	6041      	str	r1, [r0, #4]
 8005e96:	4658      	mov	r0, fp
 8005e98:	f000 fd8e 	bl	80069b8 <_Balloc>
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d13c      	bne.n	8005f1c <_dtoa_r+0x2ec>
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <_dtoa_r+0x2e0>)
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005eaa:	e6d8      	b.n	8005c5e <_dtoa_r+0x2e>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e7e0      	b.n	8005e72 <_dtoa_r+0x242>
 8005eb0:	2401      	movs	r4, #1
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	9307      	str	r3, [sp, #28]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2312      	movs	r3, #18
 8005ec4:	e7d0      	b.n	8005e68 <_dtoa_r+0x238>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eca:	e7f5      	b.n	8005eb8 <_dtoa_r+0x288>
 8005ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	9307      	str	r3, [sp, #28]
 8005ed2:	e7d7      	b.n	8005e84 <_dtoa_r+0x254>
 8005ed4:	3101      	adds	r1, #1
 8005ed6:	0052      	lsls	r2, r2, #1
 8005ed8:	e7d8      	b.n	8005e8c <_dtoa_r+0x25c>
 8005eda:	bf00      	nop
 8005edc:	f3af 8000 	nop.w
 8005ee0:	636f4361 	.word	0x636f4361
 8005ee4:	3fd287a7 	.word	0x3fd287a7
 8005ee8:	8b60c8b3 	.word	0x8b60c8b3
 8005eec:	3fc68a28 	.word	0x3fc68a28
 8005ef0:	509f79fb 	.word	0x509f79fb
 8005ef4:	3fd34413 	.word	0x3fd34413
 8005ef8:	08008218 	.word	0x08008218
 8005efc:	08008304 	.word	0x08008304
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	08008298 	.word	0x08008298
 8005f08:	3ff80000 	.word	0x3ff80000
 8005f0c:	08008400 	.word	0x08008400
 8005f10:	0800835c 	.word	0x0800835c
 8005f14:	08008300 	.word	0x08008300
 8005f18:	08008297 	.word	0x08008297
 8005f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f20:	6018      	str	r0, [r3, #0]
 8005f22:	9b07      	ldr	r3, [sp, #28]
 8005f24:	2b0e      	cmp	r3, #14
 8005f26:	f200 80a4 	bhi.w	8006072 <_dtoa_r+0x442>
 8005f2a:	2c00      	cmp	r4, #0
 8005f2c:	f000 80a1 	beq.w	8006072 <_dtoa_r+0x442>
 8005f30:	2f00      	cmp	r7, #0
 8005f32:	dd33      	ble.n	8005f9c <_dtoa_r+0x36c>
 8005f34:	4bad      	ldr	r3, [pc, #692]	@ (80061ec <_dtoa_r+0x5bc>)
 8005f36:	f007 020f 	and.w	r2, r7, #15
 8005f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3e:	ed93 7b00 	vldr	d7, [r3]
 8005f42:	05f8      	lsls	r0, r7, #23
 8005f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f4c:	d516      	bpl.n	8005f7c <_dtoa_r+0x34c>
 8005f4e:	4ba8      	ldr	r3, [pc, #672]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f58:	f7fa fc98 	bl	800088c <__aeabi_ddiv>
 8005f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f60:	f004 040f 	and.w	r4, r4, #15
 8005f64:	2603      	movs	r6, #3
 8005f66:	4da2      	ldr	r5, [pc, #648]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005f68:	b954      	cbnz	r4, 8005f80 <_dtoa_r+0x350>
 8005f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f72:	f7fa fc8b 	bl	800088c <__aeabi_ddiv>
 8005f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7a:	e028      	b.n	8005fce <_dtoa_r+0x39e>
 8005f7c:	2602      	movs	r6, #2
 8005f7e:	e7f2      	b.n	8005f66 <_dtoa_r+0x336>
 8005f80:	07e1      	lsls	r1, r4, #31
 8005f82:	d508      	bpl.n	8005f96 <_dtoa_r+0x366>
 8005f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f8c:	f7fa fb54 	bl	8000638 <__aeabi_dmul>
 8005f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f94:	3601      	adds	r6, #1
 8005f96:	1064      	asrs	r4, r4, #1
 8005f98:	3508      	adds	r5, #8
 8005f9a:	e7e5      	b.n	8005f68 <_dtoa_r+0x338>
 8005f9c:	f000 80d2 	beq.w	8006144 <_dtoa_r+0x514>
 8005fa0:	427c      	negs	r4, r7
 8005fa2:	4b92      	ldr	r3, [pc, #584]	@ (80061ec <_dtoa_r+0x5bc>)
 8005fa4:	4d92      	ldr	r5, [pc, #584]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005fa6:	f004 020f 	and.w	r2, r4, #15
 8005faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fb6:	f7fa fb3f 	bl	8000638 <__aeabi_dmul>
 8005fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fbe:	1124      	asrs	r4, r4, #4
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2602      	movs	r6, #2
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	f040 80b2 	bne.w	800612e <_dtoa_r+0x4fe>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1d3      	bne.n	8005f76 <_dtoa_r+0x346>
 8005fce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80b7 	beq.w	8006148 <_dtoa_r+0x518>
 8005fda:	4b86      	ldr	r3, [pc, #536]	@ (80061f4 <_dtoa_r+0x5c4>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa fd9b 	bl	8000b1c <__aeabi_dcmplt>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f000 80ae 	beq.w	8006148 <_dtoa_r+0x518>
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80aa 	beq.w	8006148 <_dtoa_r+0x518>
 8005ff4:	9b00      	ldr	r3, [sp, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dd37      	ble.n	800606a <_dtoa_r+0x43a>
 8005ffa:	1e7b      	subs	r3, r7, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	4620      	mov	r0, r4
 8006000:	4b7d      	ldr	r3, [pc, #500]	@ (80061f8 <_dtoa_r+0x5c8>)
 8006002:	2200      	movs	r2, #0
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa fb17 	bl	8000638 <__aeabi_dmul>
 800600a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800600e:	9c00      	ldr	r4, [sp, #0]
 8006010:	3601      	adds	r6, #1
 8006012:	4630      	mov	r0, r6
 8006014:	f7fa faa6 	bl	8000564 <__aeabi_i2d>
 8006018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800601c:	f7fa fb0c 	bl	8000638 <__aeabi_dmul>
 8006020:	4b76      	ldr	r3, [pc, #472]	@ (80061fc <_dtoa_r+0x5cc>)
 8006022:	2200      	movs	r2, #0
 8006024:	f7fa f952 	bl	80002cc <__adddf3>
 8006028:	4605      	mov	r5, r0
 800602a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800602e:	2c00      	cmp	r4, #0
 8006030:	f040 808d 	bne.w	800614e <_dtoa_r+0x51e>
 8006034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006038:	4b71      	ldr	r3, [pc, #452]	@ (8006200 <_dtoa_r+0x5d0>)
 800603a:	2200      	movs	r2, #0
 800603c:	f7fa f944 	bl	80002c8 <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006048:	462a      	mov	r2, r5
 800604a:	4633      	mov	r3, r6
 800604c:	f7fa fd84 	bl	8000b58 <__aeabi_dcmpgt>
 8006050:	2800      	cmp	r0, #0
 8006052:	f040 828b 	bne.w	800656c <_dtoa_r+0x93c>
 8006056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800605a:	462a      	mov	r2, r5
 800605c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006060:	f7fa fd5c 	bl	8000b1c <__aeabi_dcmplt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 8128 	bne.w	80062ba <_dtoa_r+0x68a>
 800606a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800606e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006072:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006074:	2b00      	cmp	r3, #0
 8006076:	f2c0 815a 	blt.w	800632e <_dtoa_r+0x6fe>
 800607a:	2f0e      	cmp	r7, #14
 800607c:	f300 8157 	bgt.w	800632e <_dtoa_r+0x6fe>
 8006080:	4b5a      	ldr	r3, [pc, #360]	@ (80061ec <_dtoa_r+0x5bc>)
 8006082:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006086:	ed93 7b00 	vldr	d7, [r3]
 800608a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	ed8d 7b00 	vstr	d7, [sp]
 8006092:	da03      	bge.n	800609c <_dtoa_r+0x46c>
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f340 8101 	ble.w	800629e <_dtoa_r+0x66e>
 800609c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060a0:	4656      	mov	r6, sl
 80060a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7fa fbef 	bl	800088c <__aeabi_ddiv>
 80060ae:	f7fa fd73 	bl	8000b98 <__aeabi_d2iz>
 80060b2:	4680      	mov	r8, r0
 80060b4:	f7fa fa56 	bl	8000564 <__aeabi_i2d>
 80060b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060bc:	f7fa fabc 	bl	8000638 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060cc:	f7fa f8fc 	bl	80002c8 <__aeabi_dsub>
 80060d0:	f806 4b01 	strb.w	r4, [r6], #1
 80060d4:	9d07      	ldr	r5, [sp, #28]
 80060d6:	eba6 040a 	sub.w	r4, r6, sl
 80060da:	42a5      	cmp	r5, r4
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	f040 8117 	bne.w	8006312 <_dtoa_r+0x6e2>
 80060e4:	f7fa f8f2 	bl	80002cc <__adddf3>
 80060e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	f7fa fd32 	bl	8000b58 <__aeabi_dcmpgt>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f040 80f9 	bne.w	80062ec <_dtoa_r+0x6bc>
 80060fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa fd01 	bl	8000b08 <__aeabi_dcmpeq>
 8006106:	b118      	cbz	r0, 8006110 <_dtoa_r+0x4e0>
 8006108:	f018 0f01 	tst.w	r8, #1
 800610c:	f040 80ee 	bne.w	80062ec <_dtoa_r+0x6bc>
 8006110:	4649      	mov	r1, r9
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fc90 	bl	8006a38 <_Bfree>
 8006118:	2300      	movs	r3, #0
 800611a:	7033      	strb	r3, [r6, #0]
 800611c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800611e:	3701      	adds	r7, #1
 8006120:	601f      	str	r7, [r3, #0]
 8006122:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 831d 	beq.w	8006764 <_dtoa_r+0xb34>
 800612a:	601e      	str	r6, [r3, #0]
 800612c:	e31a      	b.n	8006764 <_dtoa_r+0xb34>
 800612e:	07e2      	lsls	r2, r4, #31
 8006130:	d505      	bpl.n	800613e <_dtoa_r+0x50e>
 8006132:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006136:	f7fa fa7f 	bl	8000638 <__aeabi_dmul>
 800613a:	3601      	adds	r6, #1
 800613c:	2301      	movs	r3, #1
 800613e:	1064      	asrs	r4, r4, #1
 8006140:	3508      	adds	r5, #8
 8006142:	e73f      	b.n	8005fc4 <_dtoa_r+0x394>
 8006144:	2602      	movs	r6, #2
 8006146:	e742      	b.n	8005fce <_dtoa_r+0x39e>
 8006148:	9c07      	ldr	r4, [sp, #28]
 800614a:	9704      	str	r7, [sp, #16]
 800614c:	e761      	b.n	8006012 <_dtoa_r+0x3e2>
 800614e:	4b27      	ldr	r3, [pc, #156]	@ (80061ec <_dtoa_r+0x5bc>)
 8006150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006152:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006156:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800615a:	4454      	add	r4, sl
 800615c:	2900      	cmp	r1, #0
 800615e:	d053      	beq.n	8006208 <_dtoa_r+0x5d8>
 8006160:	4928      	ldr	r1, [pc, #160]	@ (8006204 <_dtoa_r+0x5d4>)
 8006162:	2000      	movs	r0, #0
 8006164:	f7fa fb92 	bl	800088c <__aeabi_ddiv>
 8006168:	4633      	mov	r3, r6
 800616a:	462a      	mov	r2, r5
 800616c:	f7fa f8ac 	bl	80002c8 <__aeabi_dsub>
 8006170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006174:	4656      	mov	r6, sl
 8006176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800617a:	f7fa fd0d 	bl	8000b98 <__aeabi_d2iz>
 800617e:	4605      	mov	r5, r0
 8006180:	f7fa f9f0 	bl	8000564 <__aeabi_i2d>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618c:	f7fa f89c 	bl	80002c8 <__aeabi_dsub>
 8006190:	3530      	adds	r5, #48	@ 0x30
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800619a:	f806 5b01 	strb.w	r5, [r6], #1
 800619e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061a2:	f7fa fcbb 	bl	8000b1c <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d171      	bne.n	800628e <_dtoa_r+0x65e>
 80061aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ae:	4911      	ldr	r1, [pc, #68]	@ (80061f4 <_dtoa_r+0x5c4>)
 80061b0:	2000      	movs	r0, #0
 80061b2:	f7fa f889 	bl	80002c8 <__aeabi_dsub>
 80061b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061ba:	f7fa fcaf 	bl	8000b1c <__aeabi_dcmplt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f040 8095 	bne.w	80062ee <_dtoa_r+0x6be>
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	f43f af50 	beq.w	800606a <_dtoa_r+0x43a>
 80061ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061ce:	4b0a      	ldr	r3, [pc, #40]	@ (80061f8 <_dtoa_r+0x5c8>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	f7fa fa31 	bl	8000638 <__aeabi_dmul>
 80061d6:	4b08      	ldr	r3, [pc, #32]	@ (80061f8 <_dtoa_r+0x5c8>)
 80061d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061dc:	2200      	movs	r2, #0
 80061de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e2:	f7fa fa29 	bl	8000638 <__aeabi_dmul>
 80061e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ea:	e7c4      	b.n	8006176 <_dtoa_r+0x546>
 80061ec:	08008400 	.word	0x08008400
 80061f0:	080083d8 	.word	0x080083d8
 80061f4:	3ff00000 	.word	0x3ff00000
 80061f8:	40240000 	.word	0x40240000
 80061fc:	401c0000 	.word	0x401c0000
 8006200:	40140000 	.word	0x40140000
 8006204:	3fe00000 	.word	0x3fe00000
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	f7fa fa14 	bl	8000638 <__aeabi_dmul>
 8006210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006214:	9415      	str	r4, [sp, #84]	@ 0x54
 8006216:	4656      	mov	r6, sl
 8006218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800621c:	f7fa fcbc 	bl	8000b98 <__aeabi_d2iz>
 8006220:	4605      	mov	r5, r0
 8006222:	f7fa f99f 	bl	8000564 <__aeabi_i2d>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622e:	f7fa f84b 	bl	80002c8 <__aeabi_dsub>
 8006232:	3530      	adds	r5, #48	@ 0x30
 8006234:	f806 5b01 	strb.w	r5, [r6], #1
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	42a6      	cmp	r6, r4
 800623e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	d124      	bne.n	8006292 <_dtoa_r+0x662>
 8006248:	4bac      	ldr	r3, [pc, #688]	@ (80064fc <_dtoa_r+0x8cc>)
 800624a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800624e:	f7fa f83d 	bl	80002cc <__adddf3>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800625a:	f7fa fc7d 	bl	8000b58 <__aeabi_dcmpgt>
 800625e:	2800      	cmp	r0, #0
 8006260:	d145      	bne.n	80062ee <_dtoa_r+0x6be>
 8006262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006266:	49a5      	ldr	r1, [pc, #660]	@ (80064fc <_dtoa_r+0x8cc>)
 8006268:	2000      	movs	r0, #0
 800626a:	f7fa f82d 	bl	80002c8 <__aeabi_dsub>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006276:	f7fa fc51 	bl	8000b1c <__aeabi_dcmplt>
 800627a:	2800      	cmp	r0, #0
 800627c:	f43f aef5 	beq.w	800606a <_dtoa_r+0x43a>
 8006280:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006282:	1e73      	subs	r3, r6, #1
 8006284:	9315      	str	r3, [sp, #84]	@ 0x54
 8006286:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800628a:	2b30      	cmp	r3, #48	@ 0x30
 800628c:	d0f8      	beq.n	8006280 <_dtoa_r+0x650>
 800628e:	9f04      	ldr	r7, [sp, #16]
 8006290:	e73e      	b.n	8006110 <_dtoa_r+0x4e0>
 8006292:	4b9b      	ldr	r3, [pc, #620]	@ (8006500 <_dtoa_r+0x8d0>)
 8006294:	f7fa f9d0 	bl	8000638 <__aeabi_dmul>
 8006298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629c:	e7bc      	b.n	8006218 <_dtoa_r+0x5e8>
 800629e:	d10c      	bne.n	80062ba <_dtoa_r+0x68a>
 80062a0:	4b98      	ldr	r3, [pc, #608]	@ (8006504 <_dtoa_r+0x8d4>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062a8:	f7fa f9c6 	bl	8000638 <__aeabi_dmul>
 80062ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062b0:	f7fa fc48 	bl	8000b44 <__aeabi_dcmpge>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f000 8157 	beq.w	8006568 <_dtoa_r+0x938>
 80062ba:	2400      	movs	r4, #0
 80062bc:	4625      	mov	r5, r4
 80062be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c0:	43db      	mvns	r3, r3
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	4656      	mov	r6, sl
 80062c6:	2700      	movs	r7, #0
 80062c8:	4621      	mov	r1, r4
 80062ca:	4658      	mov	r0, fp
 80062cc:	f000 fbb4 	bl	8006a38 <_Bfree>
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	d0dc      	beq.n	800628e <_dtoa_r+0x65e>
 80062d4:	b12f      	cbz	r7, 80062e2 <_dtoa_r+0x6b2>
 80062d6:	42af      	cmp	r7, r5
 80062d8:	d003      	beq.n	80062e2 <_dtoa_r+0x6b2>
 80062da:	4639      	mov	r1, r7
 80062dc:	4658      	mov	r0, fp
 80062de:	f000 fbab 	bl	8006a38 <_Bfree>
 80062e2:	4629      	mov	r1, r5
 80062e4:	4658      	mov	r0, fp
 80062e6:	f000 fba7 	bl	8006a38 <_Bfree>
 80062ea:	e7d0      	b.n	800628e <_dtoa_r+0x65e>
 80062ec:	9704      	str	r7, [sp, #16]
 80062ee:	4633      	mov	r3, r6
 80062f0:	461e      	mov	r6, r3
 80062f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062f6:	2a39      	cmp	r2, #57	@ 0x39
 80062f8:	d107      	bne.n	800630a <_dtoa_r+0x6da>
 80062fa:	459a      	cmp	sl, r3
 80062fc:	d1f8      	bne.n	80062f0 <_dtoa_r+0x6c0>
 80062fe:	9a04      	ldr	r2, [sp, #16]
 8006300:	3201      	adds	r2, #1
 8006302:	9204      	str	r2, [sp, #16]
 8006304:	2230      	movs	r2, #48	@ 0x30
 8006306:	f88a 2000 	strb.w	r2, [sl]
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	3201      	adds	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e7bd      	b.n	800628e <_dtoa_r+0x65e>
 8006312:	4b7b      	ldr	r3, [pc, #492]	@ (8006500 <_dtoa_r+0x8d0>)
 8006314:	2200      	movs	r2, #0
 8006316:	f7fa f98f 	bl	8000638 <__aeabi_dmul>
 800631a:	2200      	movs	r2, #0
 800631c:	2300      	movs	r3, #0
 800631e:	4604      	mov	r4, r0
 8006320:	460d      	mov	r5, r1
 8006322:	f7fa fbf1 	bl	8000b08 <__aeabi_dcmpeq>
 8006326:	2800      	cmp	r0, #0
 8006328:	f43f aebb 	beq.w	80060a2 <_dtoa_r+0x472>
 800632c:	e6f0      	b.n	8006110 <_dtoa_r+0x4e0>
 800632e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006330:	2a00      	cmp	r2, #0
 8006332:	f000 80db 	beq.w	80064ec <_dtoa_r+0x8bc>
 8006336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006338:	2a01      	cmp	r2, #1
 800633a:	f300 80bf 	bgt.w	80064bc <_dtoa_r+0x88c>
 800633e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006340:	2a00      	cmp	r2, #0
 8006342:	f000 80b7 	beq.w	80064b4 <_dtoa_r+0x884>
 8006346:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800634a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800634c:	4646      	mov	r6, r8
 800634e:	9a08      	ldr	r2, [sp, #32]
 8006350:	2101      	movs	r1, #1
 8006352:	441a      	add	r2, r3
 8006354:	4658      	mov	r0, fp
 8006356:	4498      	add	r8, r3
 8006358:	9208      	str	r2, [sp, #32]
 800635a:	f000 fc21 	bl	8006ba0 <__i2b>
 800635e:	4605      	mov	r5, r0
 8006360:	b15e      	cbz	r6, 800637a <_dtoa_r+0x74a>
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd08      	ble.n	800637a <_dtoa_r+0x74a>
 8006368:	42b3      	cmp	r3, r6
 800636a:	9a08      	ldr	r2, [sp, #32]
 800636c:	bfa8      	it	ge
 800636e:	4633      	movge	r3, r6
 8006370:	eba8 0803 	sub.w	r8, r8, r3
 8006374:	1af6      	subs	r6, r6, r3
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	9308      	str	r3, [sp, #32]
 800637a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800637c:	b1f3      	cbz	r3, 80063bc <_dtoa_r+0x78c>
 800637e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80b7 	beq.w	80064f4 <_dtoa_r+0x8c4>
 8006386:	b18c      	cbz	r4, 80063ac <_dtoa_r+0x77c>
 8006388:	4629      	mov	r1, r5
 800638a:	4622      	mov	r2, r4
 800638c:	4658      	mov	r0, fp
 800638e:	f000 fcc7 	bl	8006d20 <__pow5mult>
 8006392:	464a      	mov	r2, r9
 8006394:	4601      	mov	r1, r0
 8006396:	4605      	mov	r5, r0
 8006398:	4658      	mov	r0, fp
 800639a:	f000 fc17 	bl	8006bcc <__multiply>
 800639e:	4649      	mov	r1, r9
 80063a0:	9004      	str	r0, [sp, #16]
 80063a2:	4658      	mov	r0, fp
 80063a4:	f000 fb48 	bl	8006a38 <_Bfree>
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	4699      	mov	r9, r3
 80063ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ae:	1b1a      	subs	r2, r3, r4
 80063b0:	d004      	beq.n	80063bc <_dtoa_r+0x78c>
 80063b2:	4649      	mov	r1, r9
 80063b4:	4658      	mov	r0, fp
 80063b6:	f000 fcb3 	bl	8006d20 <__pow5mult>
 80063ba:	4681      	mov	r9, r0
 80063bc:	2101      	movs	r1, #1
 80063be:	4658      	mov	r0, fp
 80063c0:	f000 fbee 	bl	8006ba0 <__i2b>
 80063c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063c6:	4604      	mov	r4, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 81cf 	beq.w	800676c <_dtoa_r+0xb3c>
 80063ce:	461a      	mov	r2, r3
 80063d0:	4601      	mov	r1, r0
 80063d2:	4658      	mov	r0, fp
 80063d4:	f000 fca4 	bl	8006d20 <__pow5mult>
 80063d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063da:	2b01      	cmp	r3, #1
 80063dc:	4604      	mov	r4, r0
 80063de:	f300 8095 	bgt.w	800650c <_dtoa_r+0x8dc>
 80063e2:	9b02      	ldr	r3, [sp, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 8087 	bne.w	80064f8 <_dtoa_r+0x8c8>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 8089 	bne.w	8006508 <_dtoa_r+0x8d8>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063fc:	0d1b      	lsrs	r3, r3, #20
 80063fe:	051b      	lsls	r3, r3, #20
 8006400:	b12b      	cbz	r3, 800640e <_dtoa_r+0x7de>
 8006402:	9b08      	ldr	r3, [sp, #32]
 8006404:	3301      	adds	r3, #1
 8006406:	9308      	str	r3, [sp, #32]
 8006408:	f108 0801 	add.w	r8, r8, #1
 800640c:	2301      	movs	r3, #1
 800640e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 81b0 	beq.w	8006778 <_dtoa_r+0xb48>
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800641e:	6918      	ldr	r0, [r3, #16]
 8006420:	f000 fb72 	bl	8006b08 <__hi0bits>
 8006424:	f1c0 0020 	rsb	r0, r0, #32
 8006428:	9b08      	ldr	r3, [sp, #32]
 800642a:	4418      	add	r0, r3
 800642c:	f010 001f 	ands.w	r0, r0, #31
 8006430:	d077      	beq.n	8006522 <_dtoa_r+0x8f2>
 8006432:	f1c0 0320 	rsb	r3, r0, #32
 8006436:	2b04      	cmp	r3, #4
 8006438:	dd6b      	ble.n	8006512 <_dtoa_r+0x8e2>
 800643a:	9b08      	ldr	r3, [sp, #32]
 800643c:	f1c0 001c 	rsb	r0, r0, #28
 8006440:	4403      	add	r3, r0
 8006442:	4480      	add	r8, r0
 8006444:	4406      	add	r6, r0
 8006446:	9308      	str	r3, [sp, #32]
 8006448:	f1b8 0f00 	cmp.w	r8, #0
 800644c:	dd05      	ble.n	800645a <_dtoa_r+0x82a>
 800644e:	4649      	mov	r1, r9
 8006450:	4642      	mov	r2, r8
 8006452:	4658      	mov	r0, fp
 8006454:	f000 fcbe 	bl	8006dd4 <__lshift>
 8006458:	4681      	mov	r9, r0
 800645a:	9b08      	ldr	r3, [sp, #32]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd05      	ble.n	800646c <_dtoa_r+0x83c>
 8006460:	4621      	mov	r1, r4
 8006462:	461a      	mov	r2, r3
 8006464:	4658      	mov	r0, fp
 8006466:	f000 fcb5 	bl	8006dd4 <__lshift>
 800646a:	4604      	mov	r4, r0
 800646c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800646e:	2b00      	cmp	r3, #0
 8006470:	d059      	beq.n	8006526 <_dtoa_r+0x8f6>
 8006472:	4621      	mov	r1, r4
 8006474:	4648      	mov	r0, r9
 8006476:	f000 fd19 	bl	8006eac <__mcmp>
 800647a:	2800      	cmp	r0, #0
 800647c:	da53      	bge.n	8006526 <_dtoa_r+0x8f6>
 800647e:	1e7b      	subs	r3, r7, #1
 8006480:	9304      	str	r3, [sp, #16]
 8006482:	4649      	mov	r1, r9
 8006484:	2300      	movs	r3, #0
 8006486:	220a      	movs	r2, #10
 8006488:	4658      	mov	r0, fp
 800648a:	f000 faf7 	bl	8006a7c <__multadd>
 800648e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006490:	4681      	mov	r9, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8172 	beq.w	800677c <_dtoa_r+0xb4c>
 8006498:	2300      	movs	r3, #0
 800649a:	4629      	mov	r1, r5
 800649c:	220a      	movs	r2, #10
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 faec 	bl	8006a7c <__multadd>
 80064a4:	9b00      	ldr	r3, [sp, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	4605      	mov	r5, r0
 80064aa:	dc67      	bgt.n	800657c <_dtoa_r+0x94c>
 80064ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	dc41      	bgt.n	8006536 <_dtoa_r+0x906>
 80064b2:	e063      	b.n	800657c <_dtoa_r+0x94c>
 80064b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064ba:	e746      	b.n	800634a <_dtoa_r+0x71a>
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	1e5c      	subs	r4, r3, #1
 80064c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	bfbf      	itttt	lt
 80064c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064cc:	1ae3      	sublt	r3, r4, r3
 80064ce:	bfb4      	ite	lt
 80064d0:	18d2      	addlt	r2, r2, r3
 80064d2:	1b1c      	subge	r4, r3, r4
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	bfbc      	itt	lt
 80064d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064da:	2400      	movlt	r4, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bfb5      	itete	lt
 80064e0:	eba8 0603 	sublt.w	r6, r8, r3
 80064e4:	9b07      	ldrge	r3, [sp, #28]
 80064e6:	2300      	movlt	r3, #0
 80064e8:	4646      	movge	r6, r8
 80064ea:	e730      	b.n	800634e <_dtoa_r+0x71e>
 80064ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064f0:	4646      	mov	r6, r8
 80064f2:	e735      	b.n	8006360 <_dtoa_r+0x730>
 80064f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064f6:	e75c      	b.n	80063b2 <_dtoa_r+0x782>
 80064f8:	2300      	movs	r3, #0
 80064fa:	e788      	b.n	800640e <_dtoa_r+0x7de>
 80064fc:	3fe00000 	.word	0x3fe00000
 8006500:	40240000 	.word	0x40240000
 8006504:	40140000 	.word	0x40140000
 8006508:	9b02      	ldr	r3, [sp, #8]
 800650a:	e780      	b.n	800640e <_dtoa_r+0x7de>
 800650c:	2300      	movs	r3, #0
 800650e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006510:	e782      	b.n	8006418 <_dtoa_r+0x7e8>
 8006512:	d099      	beq.n	8006448 <_dtoa_r+0x818>
 8006514:	9a08      	ldr	r2, [sp, #32]
 8006516:	331c      	adds	r3, #28
 8006518:	441a      	add	r2, r3
 800651a:	4498      	add	r8, r3
 800651c:	441e      	add	r6, r3
 800651e:	9208      	str	r2, [sp, #32]
 8006520:	e792      	b.n	8006448 <_dtoa_r+0x818>
 8006522:	4603      	mov	r3, r0
 8006524:	e7f6      	b.n	8006514 <_dtoa_r+0x8e4>
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	9704      	str	r7, [sp, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dc20      	bgt.n	8006570 <_dtoa_r+0x940>
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006532:	2b02      	cmp	r3, #2
 8006534:	dd1e      	ble.n	8006574 <_dtoa_r+0x944>
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f47f aec0 	bne.w	80062be <_dtoa_r+0x68e>
 800653e:	4621      	mov	r1, r4
 8006540:	2205      	movs	r2, #5
 8006542:	4658      	mov	r0, fp
 8006544:	f000 fa9a 	bl	8006a7c <__multadd>
 8006548:	4601      	mov	r1, r0
 800654a:	4604      	mov	r4, r0
 800654c:	4648      	mov	r0, r9
 800654e:	f000 fcad 	bl	8006eac <__mcmp>
 8006552:	2800      	cmp	r0, #0
 8006554:	f77f aeb3 	ble.w	80062be <_dtoa_r+0x68e>
 8006558:	4656      	mov	r6, sl
 800655a:	2331      	movs	r3, #49	@ 0x31
 800655c:	f806 3b01 	strb.w	r3, [r6], #1
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	3301      	adds	r3, #1
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	e6ae      	b.n	80062c6 <_dtoa_r+0x696>
 8006568:	9c07      	ldr	r4, [sp, #28]
 800656a:	9704      	str	r7, [sp, #16]
 800656c:	4625      	mov	r5, r4
 800656e:	e7f3      	b.n	8006558 <_dtoa_r+0x928>
 8006570:	9b07      	ldr	r3, [sp, #28]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8104 	beq.w	8006784 <_dtoa_r+0xb54>
 800657c:	2e00      	cmp	r6, #0
 800657e:	dd05      	ble.n	800658c <_dtoa_r+0x95c>
 8006580:	4629      	mov	r1, r5
 8006582:	4632      	mov	r2, r6
 8006584:	4658      	mov	r0, fp
 8006586:	f000 fc25 	bl	8006dd4 <__lshift>
 800658a:	4605      	mov	r5, r0
 800658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d05a      	beq.n	8006648 <_dtoa_r+0xa18>
 8006592:	6869      	ldr	r1, [r5, #4]
 8006594:	4658      	mov	r0, fp
 8006596:	f000 fa0f 	bl	80069b8 <_Balloc>
 800659a:	4606      	mov	r6, r0
 800659c:	b928      	cbnz	r0, 80065aa <_dtoa_r+0x97a>
 800659e:	4b84      	ldr	r3, [pc, #528]	@ (80067b0 <_dtoa_r+0xb80>)
 80065a0:	4602      	mov	r2, r0
 80065a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065a6:	f7ff bb5a 	b.w	8005c5e <_dtoa_r+0x2e>
 80065aa:	692a      	ldr	r2, [r5, #16]
 80065ac:	3202      	adds	r2, #2
 80065ae:	0092      	lsls	r2, r2, #2
 80065b0:	f105 010c 	add.w	r1, r5, #12
 80065b4:	300c      	adds	r0, #12
 80065b6:	f000 fe4f 	bl	8007258 <memcpy>
 80065ba:	2201      	movs	r2, #1
 80065bc:	4631      	mov	r1, r6
 80065be:	4658      	mov	r0, fp
 80065c0:	f000 fc08 	bl	8006dd4 <__lshift>
 80065c4:	f10a 0301 	add.w	r3, sl, #1
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	9b00      	ldr	r3, [sp, #0]
 80065cc:	4453      	add	r3, sl
 80065ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d0:	9b02      	ldr	r3, [sp, #8]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	462f      	mov	r7, r5
 80065d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065da:	4605      	mov	r5, r0
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	4621      	mov	r1, r4
 80065e0:	3b01      	subs	r3, #1
 80065e2:	4648      	mov	r0, r9
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	f7ff fa9b 	bl	8005b20 <quorem>
 80065ea:	4639      	mov	r1, r7
 80065ec:	9002      	str	r0, [sp, #8]
 80065ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065f2:	4648      	mov	r0, r9
 80065f4:	f000 fc5a 	bl	8006eac <__mcmp>
 80065f8:	462a      	mov	r2, r5
 80065fa:	9008      	str	r0, [sp, #32]
 80065fc:	4621      	mov	r1, r4
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 fc70 	bl	8006ee4 <__mdiff>
 8006604:	68c2      	ldr	r2, [r0, #12]
 8006606:	4606      	mov	r6, r0
 8006608:	bb02      	cbnz	r2, 800664c <_dtoa_r+0xa1c>
 800660a:	4601      	mov	r1, r0
 800660c:	4648      	mov	r0, r9
 800660e:	f000 fc4d 	bl	8006eac <__mcmp>
 8006612:	4602      	mov	r2, r0
 8006614:	4631      	mov	r1, r6
 8006616:	4658      	mov	r0, fp
 8006618:	920e      	str	r2, [sp, #56]	@ 0x38
 800661a:	f000 fa0d 	bl	8006a38 <_Bfree>
 800661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006622:	9e07      	ldr	r6, [sp, #28]
 8006624:	ea43 0102 	orr.w	r1, r3, r2
 8006628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800662a:	4319      	orrs	r1, r3
 800662c:	d110      	bne.n	8006650 <_dtoa_r+0xa20>
 800662e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006632:	d029      	beq.n	8006688 <_dtoa_r+0xa58>
 8006634:	9b08      	ldr	r3, [sp, #32]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dd02      	ble.n	8006640 <_dtoa_r+0xa10>
 800663a:	9b02      	ldr	r3, [sp, #8]
 800663c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006640:	9b00      	ldr	r3, [sp, #0]
 8006642:	f883 8000 	strb.w	r8, [r3]
 8006646:	e63f      	b.n	80062c8 <_dtoa_r+0x698>
 8006648:	4628      	mov	r0, r5
 800664a:	e7bb      	b.n	80065c4 <_dtoa_r+0x994>
 800664c:	2201      	movs	r2, #1
 800664e:	e7e1      	b.n	8006614 <_dtoa_r+0x9e4>
 8006650:	9b08      	ldr	r3, [sp, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	db04      	blt.n	8006660 <_dtoa_r+0xa30>
 8006656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006658:	430b      	orrs	r3, r1
 800665a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800665c:	430b      	orrs	r3, r1
 800665e:	d120      	bne.n	80066a2 <_dtoa_r+0xa72>
 8006660:	2a00      	cmp	r2, #0
 8006662:	dded      	ble.n	8006640 <_dtoa_r+0xa10>
 8006664:	4649      	mov	r1, r9
 8006666:	2201      	movs	r2, #1
 8006668:	4658      	mov	r0, fp
 800666a:	f000 fbb3 	bl	8006dd4 <__lshift>
 800666e:	4621      	mov	r1, r4
 8006670:	4681      	mov	r9, r0
 8006672:	f000 fc1b 	bl	8006eac <__mcmp>
 8006676:	2800      	cmp	r0, #0
 8006678:	dc03      	bgt.n	8006682 <_dtoa_r+0xa52>
 800667a:	d1e1      	bne.n	8006640 <_dtoa_r+0xa10>
 800667c:	f018 0f01 	tst.w	r8, #1
 8006680:	d0de      	beq.n	8006640 <_dtoa_r+0xa10>
 8006682:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006686:	d1d8      	bne.n	800663a <_dtoa_r+0xa0a>
 8006688:	9a00      	ldr	r2, [sp, #0]
 800668a:	2339      	movs	r3, #57	@ 0x39
 800668c:	7013      	strb	r3, [r2, #0]
 800668e:	4633      	mov	r3, r6
 8006690:	461e      	mov	r6, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006698:	2a39      	cmp	r2, #57	@ 0x39
 800669a:	d052      	beq.n	8006742 <_dtoa_r+0xb12>
 800669c:	3201      	adds	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e612      	b.n	80062c8 <_dtoa_r+0x698>
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	dd07      	ble.n	80066b6 <_dtoa_r+0xa86>
 80066a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066aa:	d0ed      	beq.n	8006688 <_dtoa_r+0xa58>
 80066ac:	9a00      	ldr	r2, [sp, #0]
 80066ae:	f108 0301 	add.w	r3, r8, #1
 80066b2:	7013      	strb	r3, [r2, #0]
 80066b4:	e608      	b.n	80062c8 <_dtoa_r+0x698>
 80066b6:	9b07      	ldr	r3, [sp, #28]
 80066b8:	9a07      	ldr	r2, [sp, #28]
 80066ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d028      	beq.n	8006716 <_dtoa_r+0xae6>
 80066c4:	4649      	mov	r1, r9
 80066c6:	2300      	movs	r3, #0
 80066c8:	220a      	movs	r2, #10
 80066ca:	4658      	mov	r0, fp
 80066cc:	f000 f9d6 	bl	8006a7c <__multadd>
 80066d0:	42af      	cmp	r7, r5
 80066d2:	4681      	mov	r9, r0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	f04f 020a 	mov.w	r2, #10
 80066dc:	4639      	mov	r1, r7
 80066de:	4658      	mov	r0, fp
 80066e0:	d107      	bne.n	80066f2 <_dtoa_r+0xac2>
 80066e2:	f000 f9cb 	bl	8006a7c <__multadd>
 80066e6:	4607      	mov	r7, r0
 80066e8:	4605      	mov	r5, r0
 80066ea:	9b07      	ldr	r3, [sp, #28]
 80066ec:	3301      	adds	r3, #1
 80066ee:	9307      	str	r3, [sp, #28]
 80066f0:	e774      	b.n	80065dc <_dtoa_r+0x9ac>
 80066f2:	f000 f9c3 	bl	8006a7c <__multadd>
 80066f6:	4629      	mov	r1, r5
 80066f8:	4607      	mov	r7, r0
 80066fa:	2300      	movs	r3, #0
 80066fc:	220a      	movs	r2, #10
 80066fe:	4658      	mov	r0, fp
 8006700:	f000 f9bc 	bl	8006a7c <__multadd>
 8006704:	4605      	mov	r5, r0
 8006706:	e7f0      	b.n	80066ea <_dtoa_r+0xaba>
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfcc      	ite	gt
 800670e:	461e      	movgt	r6, r3
 8006710:	2601      	movle	r6, #1
 8006712:	4456      	add	r6, sl
 8006714:	2700      	movs	r7, #0
 8006716:	4649      	mov	r1, r9
 8006718:	2201      	movs	r2, #1
 800671a:	4658      	mov	r0, fp
 800671c:	f000 fb5a 	bl	8006dd4 <__lshift>
 8006720:	4621      	mov	r1, r4
 8006722:	4681      	mov	r9, r0
 8006724:	f000 fbc2 	bl	8006eac <__mcmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	dcb0      	bgt.n	800668e <_dtoa_r+0xa5e>
 800672c:	d102      	bne.n	8006734 <_dtoa_r+0xb04>
 800672e:	f018 0f01 	tst.w	r8, #1
 8006732:	d1ac      	bne.n	800668e <_dtoa_r+0xa5e>
 8006734:	4633      	mov	r3, r6
 8006736:	461e      	mov	r6, r3
 8006738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800673c:	2a30      	cmp	r2, #48	@ 0x30
 800673e:	d0fa      	beq.n	8006736 <_dtoa_r+0xb06>
 8006740:	e5c2      	b.n	80062c8 <_dtoa_r+0x698>
 8006742:	459a      	cmp	sl, r3
 8006744:	d1a4      	bne.n	8006690 <_dtoa_r+0xa60>
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	3301      	adds	r3, #1
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	2331      	movs	r3, #49	@ 0x31
 800674e:	f88a 3000 	strb.w	r3, [sl]
 8006752:	e5b9      	b.n	80062c8 <_dtoa_r+0x698>
 8006754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006756:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067b4 <_dtoa_r+0xb84>
 800675a:	b11b      	cbz	r3, 8006764 <_dtoa_r+0xb34>
 800675c:	f10a 0308 	add.w	r3, sl, #8
 8006760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4650      	mov	r0, sl
 8006766:	b019      	add	sp, #100	@ 0x64
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676e:	2b01      	cmp	r3, #1
 8006770:	f77f ae37 	ble.w	80063e2 <_dtoa_r+0x7b2>
 8006774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006776:	930a      	str	r3, [sp, #40]	@ 0x28
 8006778:	2001      	movs	r0, #1
 800677a:	e655      	b.n	8006428 <_dtoa_r+0x7f8>
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f77f aed6 	ble.w	8006530 <_dtoa_r+0x900>
 8006784:	4656      	mov	r6, sl
 8006786:	4621      	mov	r1, r4
 8006788:	4648      	mov	r0, r9
 800678a:	f7ff f9c9 	bl	8005b20 <quorem>
 800678e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006792:	f806 8b01 	strb.w	r8, [r6], #1
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	eba6 020a 	sub.w	r2, r6, sl
 800679c:	4293      	cmp	r3, r2
 800679e:	ddb3      	ble.n	8006708 <_dtoa_r+0xad8>
 80067a0:	4649      	mov	r1, r9
 80067a2:	2300      	movs	r3, #0
 80067a4:	220a      	movs	r2, #10
 80067a6:	4658      	mov	r0, fp
 80067a8:	f000 f968 	bl	8006a7c <__multadd>
 80067ac:	4681      	mov	r9, r0
 80067ae:	e7ea      	b.n	8006786 <_dtoa_r+0xb56>
 80067b0:	0800835c 	.word	0x0800835c
 80067b4:	080082f7 	.word	0x080082f7

080067b8 <_free_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	2900      	cmp	r1, #0
 80067be:	d041      	beq.n	8006844 <_free_r+0x8c>
 80067c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c4:	1f0c      	subs	r4, r1, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	18e4      	addlt	r4, r4, r3
 80067cc:	f000 f8e8 	bl	80069a0 <__malloc_lock>
 80067d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006848 <_free_r+0x90>)
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x2c>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	4628      	mov	r0, r5
 80067dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067e0:	f000 b8e4 	b.w	80069ac <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x42>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	1821      	adds	r1, r4, r0
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1809      	addeq	r1, r1, r0
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x1e>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x4c>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x42>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1850      	adds	r0, r2, r1
 8006808:	42a0      	cmp	r0, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x6c>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	4401      	add	r1, r0
 8006810:	1850      	adds	r0, r2, r1
 8006812:	4283      	cmp	r3, r0
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x22>
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	4408      	add	r0, r1
 8006820:	6010      	str	r0, [r2, #0]
 8006822:	e7da      	b.n	80067da <_free_r+0x22>
 8006824:	d902      	bls.n	800682c <_free_r+0x74>
 8006826:	230c      	movs	r3, #12
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x22>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	1821      	adds	r1, r4, r0
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1809      	addeq	r1, r1, r0
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7ca      	b.n	80067da <_free_r+0x22>
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	bf00      	nop
 8006848:	20000750 	.word	0x20000750

0800684c <malloc>:
 800684c:	4b02      	ldr	r3, [pc, #8]	@ (8006858 <malloc+0xc>)
 800684e:	4601      	mov	r1, r0
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	f000 b825 	b.w	80068a0 <_malloc_r>
 8006856:	bf00      	nop
 8006858:	20000318 	.word	0x20000318

0800685c <sbrk_aligned>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4e0f      	ldr	r6, [pc, #60]	@ (800689c <sbrk_aligned+0x40>)
 8006860:	460c      	mov	r4, r1
 8006862:	6831      	ldr	r1, [r6, #0]
 8006864:	4605      	mov	r5, r0
 8006866:	b911      	cbnz	r1, 800686e <sbrk_aligned+0x12>
 8006868:	f000 fce6 	bl	8007238 <_sbrk_r>
 800686c:	6030      	str	r0, [r6, #0]
 800686e:	4621      	mov	r1, r4
 8006870:	4628      	mov	r0, r5
 8006872:	f000 fce1 	bl	8007238 <_sbrk_r>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	d103      	bne.n	8006882 <sbrk_aligned+0x26>
 800687a:	f04f 34ff 	mov.w	r4, #4294967295
 800687e:	4620      	mov	r0, r4
 8006880:	bd70      	pop	{r4, r5, r6, pc}
 8006882:	1cc4      	adds	r4, r0, #3
 8006884:	f024 0403 	bic.w	r4, r4, #3
 8006888:	42a0      	cmp	r0, r4
 800688a:	d0f8      	beq.n	800687e <sbrk_aligned+0x22>
 800688c:	1a21      	subs	r1, r4, r0
 800688e:	4628      	mov	r0, r5
 8006890:	f000 fcd2 	bl	8007238 <_sbrk_r>
 8006894:	3001      	adds	r0, #1
 8006896:	d1f2      	bne.n	800687e <sbrk_aligned+0x22>
 8006898:	e7ef      	b.n	800687a <sbrk_aligned+0x1e>
 800689a:	bf00      	nop
 800689c:	2000074c 	.word	0x2000074c

080068a0 <_malloc_r>:
 80068a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a4:	1ccd      	adds	r5, r1, #3
 80068a6:	f025 0503 	bic.w	r5, r5, #3
 80068aa:	3508      	adds	r5, #8
 80068ac:	2d0c      	cmp	r5, #12
 80068ae:	bf38      	it	cc
 80068b0:	250c      	movcc	r5, #12
 80068b2:	2d00      	cmp	r5, #0
 80068b4:	4606      	mov	r6, r0
 80068b6:	db01      	blt.n	80068bc <_malloc_r+0x1c>
 80068b8:	42a9      	cmp	r1, r5
 80068ba:	d904      	bls.n	80068c6 <_malloc_r+0x26>
 80068bc:	230c      	movs	r3, #12
 80068be:	6033      	str	r3, [r6, #0]
 80068c0:	2000      	movs	r0, #0
 80068c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800699c <_malloc_r+0xfc>
 80068ca:	f000 f869 	bl	80069a0 <__malloc_lock>
 80068ce:	f8d8 3000 	ldr.w	r3, [r8]
 80068d2:	461c      	mov	r4, r3
 80068d4:	bb44      	cbnz	r4, 8006928 <_malloc_r+0x88>
 80068d6:	4629      	mov	r1, r5
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff ffbf 	bl	800685c <sbrk_aligned>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	4604      	mov	r4, r0
 80068e2:	d158      	bne.n	8006996 <_malloc_r+0xf6>
 80068e4:	f8d8 4000 	ldr.w	r4, [r8]
 80068e8:	4627      	mov	r7, r4
 80068ea:	2f00      	cmp	r7, #0
 80068ec:	d143      	bne.n	8006976 <_malloc_r+0xd6>
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	d04b      	beq.n	800698a <_malloc_r+0xea>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	4639      	mov	r1, r7
 80068f6:	4630      	mov	r0, r6
 80068f8:	eb04 0903 	add.w	r9, r4, r3
 80068fc:	f000 fc9c 	bl	8007238 <_sbrk_r>
 8006900:	4581      	cmp	r9, r0
 8006902:	d142      	bne.n	800698a <_malloc_r+0xea>
 8006904:	6821      	ldr	r1, [r4, #0]
 8006906:	1a6d      	subs	r5, r5, r1
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ffa6 	bl	800685c <sbrk_aligned>
 8006910:	3001      	adds	r0, #1
 8006912:	d03a      	beq.n	800698a <_malloc_r+0xea>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	442b      	add	r3, r5
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	f8d8 3000 	ldr.w	r3, [r8]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	bb62      	cbnz	r2, 800697c <_malloc_r+0xdc>
 8006922:	f8c8 7000 	str.w	r7, [r8]
 8006926:	e00f      	b.n	8006948 <_malloc_r+0xa8>
 8006928:	6822      	ldr	r2, [r4, #0]
 800692a:	1b52      	subs	r2, r2, r5
 800692c:	d420      	bmi.n	8006970 <_malloc_r+0xd0>
 800692e:	2a0b      	cmp	r2, #11
 8006930:	d917      	bls.n	8006962 <_malloc_r+0xc2>
 8006932:	1961      	adds	r1, r4, r5
 8006934:	42a3      	cmp	r3, r4
 8006936:	6025      	str	r5, [r4, #0]
 8006938:	bf18      	it	ne
 800693a:	6059      	strne	r1, [r3, #4]
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	bf08      	it	eq
 8006940:	f8c8 1000 	streq.w	r1, [r8]
 8006944:	5162      	str	r2, [r4, r5]
 8006946:	604b      	str	r3, [r1, #4]
 8006948:	4630      	mov	r0, r6
 800694a:	f000 f82f 	bl	80069ac <__malloc_unlock>
 800694e:	f104 000b 	add.w	r0, r4, #11
 8006952:	1d23      	adds	r3, r4, #4
 8006954:	f020 0007 	bic.w	r0, r0, #7
 8006958:	1ac2      	subs	r2, r0, r3
 800695a:	bf1c      	itt	ne
 800695c:	1a1b      	subne	r3, r3, r0
 800695e:	50a3      	strne	r3, [r4, r2]
 8006960:	e7af      	b.n	80068c2 <_malloc_r+0x22>
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	42a3      	cmp	r3, r4
 8006966:	bf0c      	ite	eq
 8006968:	f8c8 2000 	streq.w	r2, [r8]
 800696c:	605a      	strne	r2, [r3, #4]
 800696e:	e7eb      	b.n	8006948 <_malloc_r+0xa8>
 8006970:	4623      	mov	r3, r4
 8006972:	6864      	ldr	r4, [r4, #4]
 8006974:	e7ae      	b.n	80068d4 <_malloc_r+0x34>
 8006976:	463c      	mov	r4, r7
 8006978:	687f      	ldr	r7, [r7, #4]
 800697a:	e7b6      	b.n	80068ea <_malloc_r+0x4a>
 800697c:	461a      	mov	r2, r3
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	42a3      	cmp	r3, r4
 8006982:	d1fb      	bne.n	800697c <_malloc_r+0xdc>
 8006984:	2300      	movs	r3, #0
 8006986:	6053      	str	r3, [r2, #4]
 8006988:	e7de      	b.n	8006948 <_malloc_r+0xa8>
 800698a:	230c      	movs	r3, #12
 800698c:	6033      	str	r3, [r6, #0]
 800698e:	4630      	mov	r0, r6
 8006990:	f000 f80c 	bl	80069ac <__malloc_unlock>
 8006994:	e794      	b.n	80068c0 <_malloc_r+0x20>
 8006996:	6005      	str	r5, [r0, #0]
 8006998:	e7d6      	b.n	8006948 <_malloc_r+0xa8>
 800699a:	bf00      	nop
 800699c:	20000750 	.word	0x20000750

080069a0 <__malloc_lock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	@ (80069a8 <__malloc_lock+0x8>)
 80069a2:	f7ff b89c 	b.w	8005ade <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	20000748 	.word	0x20000748

080069ac <__malloc_unlock>:
 80069ac:	4801      	ldr	r0, [pc, #4]	@ (80069b4 <__malloc_unlock+0x8>)
 80069ae:	f7ff b897 	b.w	8005ae0 <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	20000748 	.word	0x20000748

080069b8 <_Balloc>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	69c6      	ldr	r6, [r0, #28]
 80069bc:	4604      	mov	r4, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	b976      	cbnz	r6, 80069e0 <_Balloc+0x28>
 80069c2:	2010      	movs	r0, #16
 80069c4:	f7ff ff42 	bl	800684c <malloc>
 80069c8:	4602      	mov	r2, r0
 80069ca:	61e0      	str	r0, [r4, #28]
 80069cc:	b920      	cbnz	r0, 80069d8 <_Balloc+0x20>
 80069ce:	4b18      	ldr	r3, [pc, #96]	@ (8006a30 <_Balloc+0x78>)
 80069d0:	4818      	ldr	r0, [pc, #96]	@ (8006a34 <_Balloc+0x7c>)
 80069d2:	216b      	movs	r1, #107	@ 0x6b
 80069d4:	f7ff f886 	bl	8005ae4 <__assert_func>
 80069d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069dc:	6006      	str	r6, [r0, #0]
 80069de:	60c6      	str	r6, [r0, #12]
 80069e0:	69e6      	ldr	r6, [r4, #28]
 80069e2:	68f3      	ldr	r3, [r6, #12]
 80069e4:	b183      	cbz	r3, 8006a08 <_Balloc+0x50>
 80069e6:	69e3      	ldr	r3, [r4, #28]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ee:	b9b8      	cbnz	r0, 8006a20 <_Balloc+0x68>
 80069f0:	2101      	movs	r1, #1
 80069f2:	fa01 f605 	lsl.w	r6, r1, r5
 80069f6:	1d72      	adds	r2, r6, #5
 80069f8:	0092      	lsls	r2, r2, #2
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fc41 	bl	8007282 <_calloc_r>
 8006a00:	b160      	cbz	r0, 8006a1c <_Balloc+0x64>
 8006a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a06:	e00e      	b.n	8006a26 <_Balloc+0x6e>
 8006a08:	2221      	movs	r2, #33	@ 0x21
 8006a0a:	2104      	movs	r1, #4
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fc38 	bl	8007282 <_calloc_r>
 8006a12:	69e3      	ldr	r3, [r4, #28]
 8006a14:	60f0      	str	r0, [r6, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e4      	bne.n	80069e6 <_Balloc+0x2e>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	6802      	ldr	r2, [r0, #0]
 8006a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a26:	2300      	movs	r3, #0
 8006a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a2c:	e7f7      	b.n	8006a1e <_Balloc+0x66>
 8006a2e:	bf00      	nop
 8006a30:	08008218 	.word	0x08008218
 8006a34:	0800836d 	.word	0x0800836d

08006a38 <_Bfree>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	69c6      	ldr	r6, [r0, #28]
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	b976      	cbnz	r6, 8006a60 <_Bfree+0x28>
 8006a42:	2010      	movs	r0, #16
 8006a44:	f7ff ff02 	bl	800684c <malloc>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	61e8      	str	r0, [r5, #28]
 8006a4c:	b920      	cbnz	r0, 8006a58 <_Bfree+0x20>
 8006a4e:	4b09      	ldr	r3, [pc, #36]	@ (8006a74 <_Bfree+0x3c>)
 8006a50:	4809      	ldr	r0, [pc, #36]	@ (8006a78 <_Bfree+0x40>)
 8006a52:	218f      	movs	r1, #143	@ 0x8f
 8006a54:	f7ff f846 	bl	8005ae4 <__assert_func>
 8006a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a5c:	6006      	str	r6, [r0, #0]
 8006a5e:	60c6      	str	r6, [r0, #12]
 8006a60:	b13c      	cbz	r4, 8006a72 <_Bfree+0x3a>
 8006a62:	69eb      	ldr	r3, [r5, #28]
 8006a64:	6862      	ldr	r2, [r4, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a6c:	6021      	str	r1, [r4, #0]
 8006a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	08008218 	.word	0x08008218
 8006a78:	0800836d 	.word	0x0800836d

08006a7c <__multadd>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	690d      	ldr	r5, [r1, #16]
 8006a82:	4607      	mov	r7, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	461e      	mov	r6, r3
 8006a88:	f101 0c14 	add.w	ip, r1, #20
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a92:	b299      	uxth	r1, r3
 8006a94:	fb02 6101 	mla	r1, r2, r1, r6
 8006a98:	0c1e      	lsrs	r6, r3, #16
 8006a9a:	0c0b      	lsrs	r3, r1, #16
 8006a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8006aa0:	b289      	uxth	r1, r1
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aa8:	4285      	cmp	r5, r0
 8006aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8006aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ab2:	dcec      	bgt.n	8006a8e <__multadd+0x12>
 8006ab4:	b30e      	cbz	r6, 8006afa <__multadd+0x7e>
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	dc19      	bgt.n	8006af0 <__multadd+0x74>
 8006abc:	6861      	ldr	r1, [r4, #4]
 8006abe:	4638      	mov	r0, r7
 8006ac0:	3101      	adds	r1, #1
 8006ac2:	f7ff ff79 	bl	80069b8 <_Balloc>
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	b928      	cbnz	r0, 8006ad6 <__multadd+0x5a>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <__multadd+0x84>)
 8006ace:	480d      	ldr	r0, [pc, #52]	@ (8006b04 <__multadd+0x88>)
 8006ad0:	21ba      	movs	r1, #186	@ 0xba
 8006ad2:	f7ff f807 	bl	8005ae4 <__assert_func>
 8006ad6:	6922      	ldr	r2, [r4, #16]
 8006ad8:	3202      	adds	r2, #2
 8006ada:	f104 010c 	add.w	r1, r4, #12
 8006ade:	0092      	lsls	r2, r2, #2
 8006ae0:	300c      	adds	r0, #12
 8006ae2:	f000 fbb9 	bl	8007258 <memcpy>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff ffa5 	bl	8006a38 <_Bfree>
 8006aee:	4644      	mov	r4, r8
 8006af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006af4:	3501      	adds	r5, #1
 8006af6:	615e      	str	r6, [r3, #20]
 8006af8:	6125      	str	r5, [r4, #16]
 8006afa:	4620      	mov	r0, r4
 8006afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b00:	0800835c 	.word	0x0800835c
 8006b04:	0800836d 	.word	0x0800836d

08006b08 <__hi0bits>:
 8006b08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	bf36      	itet	cc
 8006b10:	0403      	lslcc	r3, r0, #16
 8006b12:	2000      	movcs	r0, #0
 8006b14:	2010      	movcc	r0, #16
 8006b16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b1a:	bf3c      	itt	cc
 8006b1c:	021b      	lslcc	r3, r3, #8
 8006b1e:	3008      	addcc	r0, #8
 8006b20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b24:	bf3c      	itt	cc
 8006b26:	011b      	lslcc	r3, r3, #4
 8006b28:	3004      	addcc	r0, #4
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2e:	bf3c      	itt	cc
 8006b30:	009b      	lslcc	r3, r3, #2
 8006b32:	3002      	addcc	r0, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	db05      	blt.n	8006b44 <__hi0bits+0x3c>
 8006b38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b3c:	f100 0001 	add.w	r0, r0, #1
 8006b40:	bf08      	it	eq
 8006b42:	2020      	moveq	r0, #32
 8006b44:	4770      	bx	lr

08006b46 <__lo0bits>:
 8006b46:	6803      	ldr	r3, [r0, #0]
 8006b48:	4602      	mov	r2, r0
 8006b4a:	f013 0007 	ands.w	r0, r3, #7
 8006b4e:	d00b      	beq.n	8006b68 <__lo0bits+0x22>
 8006b50:	07d9      	lsls	r1, r3, #31
 8006b52:	d421      	bmi.n	8006b98 <__lo0bits+0x52>
 8006b54:	0798      	lsls	r0, r3, #30
 8006b56:	bf49      	itett	mi
 8006b58:	085b      	lsrmi	r3, r3, #1
 8006b5a:	089b      	lsrpl	r3, r3, #2
 8006b5c:	2001      	movmi	r0, #1
 8006b5e:	6013      	strmi	r3, [r2, #0]
 8006b60:	bf5c      	itt	pl
 8006b62:	6013      	strpl	r3, [r2, #0]
 8006b64:	2002      	movpl	r0, #2
 8006b66:	4770      	bx	lr
 8006b68:	b299      	uxth	r1, r3
 8006b6a:	b909      	cbnz	r1, 8006b70 <__lo0bits+0x2a>
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	2010      	movs	r0, #16
 8006b70:	b2d9      	uxtb	r1, r3
 8006b72:	b909      	cbnz	r1, 8006b78 <__lo0bits+0x32>
 8006b74:	3008      	adds	r0, #8
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	0719      	lsls	r1, r3, #28
 8006b7a:	bf04      	itt	eq
 8006b7c:	091b      	lsreq	r3, r3, #4
 8006b7e:	3004      	addeq	r0, #4
 8006b80:	0799      	lsls	r1, r3, #30
 8006b82:	bf04      	itt	eq
 8006b84:	089b      	lsreq	r3, r3, #2
 8006b86:	3002      	addeq	r0, #2
 8006b88:	07d9      	lsls	r1, r3, #31
 8006b8a:	d403      	bmi.n	8006b94 <__lo0bits+0x4e>
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	f100 0001 	add.w	r0, r0, #1
 8006b92:	d003      	beq.n	8006b9c <__lo0bits+0x56>
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	4770      	bx	lr
 8006b98:	2000      	movs	r0, #0
 8006b9a:	4770      	bx	lr
 8006b9c:	2020      	movs	r0, #32
 8006b9e:	4770      	bx	lr

08006ba0 <__i2b>:
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	f7ff ff07 	bl	80069b8 <_Balloc>
 8006baa:	4602      	mov	r2, r0
 8006bac:	b928      	cbnz	r0, 8006bba <__i2b+0x1a>
 8006bae:	4b05      	ldr	r3, [pc, #20]	@ (8006bc4 <__i2b+0x24>)
 8006bb0:	4805      	ldr	r0, [pc, #20]	@ (8006bc8 <__i2b+0x28>)
 8006bb2:	f240 1145 	movw	r1, #325	@ 0x145
 8006bb6:	f7fe ff95 	bl	8005ae4 <__assert_func>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	6144      	str	r4, [r0, #20]
 8006bbe:	6103      	str	r3, [r0, #16]
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	bf00      	nop
 8006bc4:	0800835c 	.word	0x0800835c
 8006bc8:	0800836d 	.word	0x0800836d

08006bcc <__multiply>:
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	690a      	ldr	r2, [r1, #16]
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bfa8      	it	ge
 8006bda:	4623      	movge	r3, r4
 8006bdc:	460f      	mov	r7, r1
 8006bde:	bfa4      	itt	ge
 8006be0:	460c      	movge	r4, r1
 8006be2:	461f      	movge	r7, r3
 8006be4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006be8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	6861      	ldr	r1, [r4, #4]
 8006bf0:	eb0a 0609 	add.w	r6, sl, r9
 8006bf4:	42b3      	cmp	r3, r6
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	bfb8      	it	lt
 8006bfa:	3101      	addlt	r1, #1
 8006bfc:	f7ff fedc 	bl	80069b8 <_Balloc>
 8006c00:	b930      	cbnz	r0, 8006c10 <__multiply+0x44>
 8006c02:	4602      	mov	r2, r0
 8006c04:	4b44      	ldr	r3, [pc, #272]	@ (8006d18 <__multiply+0x14c>)
 8006c06:	4845      	ldr	r0, [pc, #276]	@ (8006d1c <__multiply+0x150>)
 8006c08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c0c:	f7fe ff6a 	bl	8005ae4 <__assert_func>
 8006c10:	f100 0514 	add.w	r5, r0, #20
 8006c14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c18:	462b      	mov	r3, r5
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	d321      	bcc.n	8006c64 <__multiply+0x98>
 8006c20:	f107 0114 	add.w	r1, r7, #20
 8006c24:	f104 0214 	add.w	r2, r4, #20
 8006c28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	1b13      	subs	r3, r2, r4
 8006c34:	3b15      	subs	r3, #21
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	f104 0715 	add.w	r7, r4, #21
 8006c40:	42ba      	cmp	r2, r7
 8006c42:	bf38      	it	cc
 8006c44:	2304      	movcc	r3, #4
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	9b02      	ldr	r3, [sp, #8]
 8006c4a:	9103      	str	r1, [sp, #12]
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	d80c      	bhi.n	8006c6a <__multiply+0x9e>
 8006c50:	2e00      	cmp	r6, #0
 8006c52:	dd03      	ble.n	8006c5c <__multiply+0x90>
 8006c54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d05b      	beq.n	8006d14 <__multiply+0x148>
 8006c5c:	6106      	str	r6, [r0, #16]
 8006c5e:	b005      	add	sp, #20
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	f843 2b04 	str.w	r2, [r3], #4
 8006c68:	e7d8      	b.n	8006c1c <__multiply+0x50>
 8006c6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c6e:	f1ba 0f00 	cmp.w	sl, #0
 8006c72:	d024      	beq.n	8006cbe <__multiply+0xf2>
 8006c74:	f104 0e14 	add.w	lr, r4, #20
 8006c78:	46a9      	mov	r9, r5
 8006c7a:	f04f 0c00 	mov.w	ip, #0
 8006c7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c82:	f8d9 3000 	ldr.w	r3, [r9]
 8006c86:	fa1f fb87 	uxth.w	fp, r7
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c94:	f8d9 7000 	ldr.w	r7, [r9]
 8006c98:	4463      	add	r3, ip
 8006c9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006ca2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cac:	4572      	cmp	r2, lr
 8006cae:	f849 3b04 	str.w	r3, [r9], #4
 8006cb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cb6:	d8e2      	bhi.n	8006c7e <__multiply+0xb2>
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	f845 c003 	str.w	ip, [r5, r3]
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cc4:	3104      	adds	r1, #4
 8006cc6:	f1b9 0f00 	cmp.w	r9, #0
 8006cca:	d021      	beq.n	8006d10 <__multiply+0x144>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	f104 0c14 	add.w	ip, r4, #20
 8006cd2:	46ae      	mov	lr, r5
 8006cd4:	f04f 0a00 	mov.w	sl, #0
 8006cd8:	f8bc b000 	ldrh.w	fp, [ip]
 8006cdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ce0:	fb09 770b 	mla	r7, r9, fp, r7
 8006ce4:	4457      	add	r7, sl
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cec:	f84e 3b04 	str.w	r3, [lr], #4
 8006cf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cf8:	f8be 3000 	ldrh.w	r3, [lr]
 8006cfc:	fb09 330a 	mla	r3, r9, sl, r3
 8006d00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d04:	4562      	cmp	r2, ip
 8006d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d0a:	d8e5      	bhi.n	8006cd8 <__multiply+0x10c>
 8006d0c:	9f01      	ldr	r7, [sp, #4]
 8006d0e:	51eb      	str	r3, [r5, r7]
 8006d10:	3504      	adds	r5, #4
 8006d12:	e799      	b.n	8006c48 <__multiply+0x7c>
 8006d14:	3e01      	subs	r6, #1
 8006d16:	e79b      	b.n	8006c50 <__multiply+0x84>
 8006d18:	0800835c 	.word	0x0800835c
 8006d1c:	0800836d 	.word	0x0800836d

08006d20 <__pow5mult>:
 8006d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d24:	4615      	mov	r5, r2
 8006d26:	f012 0203 	ands.w	r2, r2, #3
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	460e      	mov	r6, r1
 8006d2e:	d007      	beq.n	8006d40 <__pow5mult+0x20>
 8006d30:	4c25      	ldr	r4, [pc, #148]	@ (8006dc8 <__pow5mult+0xa8>)
 8006d32:	3a01      	subs	r2, #1
 8006d34:	2300      	movs	r3, #0
 8006d36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d3a:	f7ff fe9f 	bl	8006a7c <__multadd>
 8006d3e:	4606      	mov	r6, r0
 8006d40:	10ad      	asrs	r5, r5, #2
 8006d42:	d03d      	beq.n	8006dc0 <__pow5mult+0xa0>
 8006d44:	69fc      	ldr	r4, [r7, #28]
 8006d46:	b97c      	cbnz	r4, 8006d68 <__pow5mult+0x48>
 8006d48:	2010      	movs	r0, #16
 8006d4a:	f7ff fd7f 	bl	800684c <malloc>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	61f8      	str	r0, [r7, #28]
 8006d52:	b928      	cbnz	r0, 8006d60 <__pow5mult+0x40>
 8006d54:	4b1d      	ldr	r3, [pc, #116]	@ (8006dcc <__pow5mult+0xac>)
 8006d56:	481e      	ldr	r0, [pc, #120]	@ (8006dd0 <__pow5mult+0xb0>)
 8006d58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d5c:	f7fe fec2 	bl	8005ae4 <__assert_func>
 8006d60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d64:	6004      	str	r4, [r0, #0]
 8006d66:	60c4      	str	r4, [r0, #12]
 8006d68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d70:	b94c      	cbnz	r4, 8006d86 <__pow5mult+0x66>
 8006d72:	f240 2171 	movw	r1, #625	@ 0x271
 8006d76:	4638      	mov	r0, r7
 8006d78:	f7ff ff12 	bl	8006ba0 <__i2b>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d82:	4604      	mov	r4, r0
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	07eb      	lsls	r3, r5, #31
 8006d8c:	d50a      	bpl.n	8006da4 <__pow5mult+0x84>
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4622      	mov	r2, r4
 8006d92:	4638      	mov	r0, r7
 8006d94:	f7ff ff1a 	bl	8006bcc <__multiply>
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f7ff fe4b 	bl	8006a38 <_Bfree>
 8006da2:	4646      	mov	r6, r8
 8006da4:	106d      	asrs	r5, r5, #1
 8006da6:	d00b      	beq.n	8006dc0 <__pow5mult+0xa0>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	b938      	cbnz	r0, 8006dbc <__pow5mult+0x9c>
 8006dac:	4622      	mov	r2, r4
 8006dae:	4621      	mov	r1, r4
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ff0b 	bl	8006bcc <__multiply>
 8006db6:	6020      	str	r0, [r4, #0]
 8006db8:	f8c0 9000 	str.w	r9, [r0]
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	e7e4      	b.n	8006d8a <__pow5mult+0x6a>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc6:	bf00      	nop
 8006dc8:	080083c8 	.word	0x080083c8
 8006dcc:	08008218 	.word	0x08008218
 8006dd0:	0800836d 	.word	0x0800836d

08006dd4 <__lshift>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	460c      	mov	r4, r1
 8006dda:	6849      	ldr	r1, [r1, #4]
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	4607      	mov	r7, r0
 8006de6:	4691      	mov	r9, r2
 8006de8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dec:	f108 0601 	add.w	r6, r8, #1
 8006df0:	42b3      	cmp	r3, r6
 8006df2:	db0b      	blt.n	8006e0c <__lshift+0x38>
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff fddf 	bl	80069b8 <_Balloc>
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	b948      	cbnz	r0, 8006e12 <__lshift+0x3e>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b28      	ldr	r3, [pc, #160]	@ (8006ea4 <__lshift+0xd0>)
 8006e02:	4829      	ldr	r0, [pc, #164]	@ (8006ea8 <__lshift+0xd4>)
 8006e04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e08:	f7fe fe6c 	bl	8005ae4 <__assert_func>
 8006e0c:	3101      	adds	r1, #1
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	e7ee      	b.n	8006df0 <__lshift+0x1c>
 8006e12:	2300      	movs	r3, #0
 8006e14:	f100 0114 	add.w	r1, r0, #20
 8006e18:	f100 0210 	add.w	r2, r0, #16
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	4553      	cmp	r3, sl
 8006e20:	db33      	blt.n	8006e8a <__lshift+0xb6>
 8006e22:	6920      	ldr	r0, [r4, #16]
 8006e24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e28:	f104 0314 	add.w	r3, r4, #20
 8006e2c:	f019 091f 	ands.w	r9, r9, #31
 8006e30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e38:	d02b      	beq.n	8006e92 <__lshift+0xbe>
 8006e3a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e3e:	468a      	mov	sl, r1
 8006e40:	2200      	movs	r2, #0
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	fa00 f009 	lsl.w	r0, r0, r9
 8006e48:	4310      	orrs	r0, r2
 8006e4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e52:	459c      	cmp	ip, r3
 8006e54:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e58:	d8f3      	bhi.n	8006e42 <__lshift+0x6e>
 8006e5a:	ebac 0304 	sub.w	r3, ip, r4
 8006e5e:	3b15      	subs	r3, #21
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	3304      	adds	r3, #4
 8006e66:	f104 0015 	add.w	r0, r4, #21
 8006e6a:	4584      	cmp	ip, r0
 8006e6c:	bf38      	it	cc
 8006e6e:	2304      	movcc	r3, #4
 8006e70:	50ca      	str	r2, [r1, r3]
 8006e72:	b10a      	cbz	r2, 8006e78 <__lshift+0xa4>
 8006e74:	f108 0602 	add.w	r6, r8, #2
 8006e78:	3e01      	subs	r6, #1
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	612e      	str	r6, [r5, #16]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	f7ff fdda 	bl	8006a38 <_Bfree>
 8006e84:	4628      	mov	r0, r5
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e8e:	3301      	adds	r3, #1
 8006e90:	e7c5      	b.n	8006e1e <__lshift+0x4a>
 8006e92:	3904      	subs	r1, #4
 8006e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e98:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e9c:	459c      	cmp	ip, r3
 8006e9e:	d8f9      	bhi.n	8006e94 <__lshift+0xc0>
 8006ea0:	e7ea      	b.n	8006e78 <__lshift+0xa4>
 8006ea2:	bf00      	nop
 8006ea4:	0800835c 	.word	0x0800835c
 8006ea8:	0800836d 	.word	0x0800836d

08006eac <__mcmp>:
 8006eac:	690a      	ldr	r2, [r1, #16]
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6900      	ldr	r0, [r0, #16]
 8006eb2:	1a80      	subs	r0, r0, r2
 8006eb4:	b530      	push	{r4, r5, lr}
 8006eb6:	d10e      	bne.n	8006ed6 <__mcmp+0x2a>
 8006eb8:	3314      	adds	r3, #20
 8006eba:	3114      	adds	r1, #20
 8006ebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ecc:	4295      	cmp	r5, r2
 8006ece:	d003      	beq.n	8006ed8 <__mcmp+0x2c>
 8006ed0:	d205      	bcs.n	8006ede <__mcmp+0x32>
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	bd30      	pop	{r4, r5, pc}
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d3f3      	bcc.n	8006ec4 <__mcmp+0x18>
 8006edc:	e7fb      	b.n	8006ed6 <__mcmp+0x2a>
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7f9      	b.n	8006ed6 <__mcmp+0x2a>
	...

08006ee4 <__mdiff>:
 8006ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	4689      	mov	r9, r1
 8006eea:	4606      	mov	r6, r0
 8006eec:	4611      	mov	r1, r2
 8006eee:	4648      	mov	r0, r9
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	f7ff ffdb 	bl	8006eac <__mcmp>
 8006ef6:	1e05      	subs	r5, r0, #0
 8006ef8:	d112      	bne.n	8006f20 <__mdiff+0x3c>
 8006efa:	4629      	mov	r1, r5
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7ff fd5b 	bl	80069b8 <_Balloc>
 8006f02:	4602      	mov	r2, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <__mdiff+0x2e>
 8006f06:	4b3f      	ldr	r3, [pc, #252]	@ (8007004 <__mdiff+0x120>)
 8006f08:	f240 2137 	movw	r1, #567	@ 0x237
 8006f0c:	483e      	ldr	r0, [pc, #248]	@ (8007008 <__mdiff+0x124>)
 8006f0e:	f7fe fde9 	bl	8005ae4 <__assert_func>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f18:	4610      	mov	r0, r2
 8006f1a:	b003      	add	sp, #12
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	bfbc      	itt	lt
 8006f22:	464b      	movlt	r3, r9
 8006f24:	46a1      	movlt	r9, r4
 8006f26:	4630      	mov	r0, r6
 8006f28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f2c:	bfba      	itte	lt
 8006f2e:	461c      	movlt	r4, r3
 8006f30:	2501      	movlt	r5, #1
 8006f32:	2500      	movge	r5, #0
 8006f34:	f7ff fd40 	bl	80069b8 <_Balloc>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	b918      	cbnz	r0, 8006f44 <__mdiff+0x60>
 8006f3c:	4b31      	ldr	r3, [pc, #196]	@ (8007004 <__mdiff+0x120>)
 8006f3e:	f240 2145 	movw	r1, #581	@ 0x245
 8006f42:	e7e3      	b.n	8006f0c <__mdiff+0x28>
 8006f44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f48:	6926      	ldr	r6, [r4, #16]
 8006f4a:	60c5      	str	r5, [r0, #12]
 8006f4c:	f109 0310 	add.w	r3, r9, #16
 8006f50:	f109 0514 	add.w	r5, r9, #20
 8006f54:	f104 0e14 	add.w	lr, r4, #20
 8006f58:	f100 0b14 	add.w	fp, r0, #20
 8006f5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	46d9      	mov	r9, fp
 8006f68:	f04f 0c00 	mov.w	ip, #0
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	fa1f f38a 	uxth.w	r3, sl
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	b283      	uxth	r3, r0
 8006f80:	1acb      	subs	r3, r1, r3
 8006f82:	0c00      	lsrs	r0, r0, #16
 8006f84:	4463      	add	r3, ip
 8006f86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f94:	4576      	cmp	r6, lr
 8006f96:	f849 3b04 	str.w	r3, [r9], #4
 8006f9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f9e:	d8e5      	bhi.n	8006f6c <__mdiff+0x88>
 8006fa0:	1b33      	subs	r3, r6, r4
 8006fa2:	3b15      	subs	r3, #21
 8006fa4:	f023 0303 	bic.w	r3, r3, #3
 8006fa8:	3415      	adds	r4, #21
 8006faa:	3304      	adds	r3, #4
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	bf38      	it	cc
 8006fb0:	2304      	movcc	r3, #4
 8006fb2:	441d      	add	r5, r3
 8006fb4:	445b      	add	r3, fp
 8006fb6:	461e      	mov	r6, r3
 8006fb8:	462c      	mov	r4, r5
 8006fba:	4544      	cmp	r4, r8
 8006fbc:	d30e      	bcc.n	8006fdc <__mdiff+0xf8>
 8006fbe:	f108 0103 	add.w	r1, r8, #3
 8006fc2:	1b49      	subs	r1, r1, r5
 8006fc4:	f021 0103 	bic.w	r1, r1, #3
 8006fc8:	3d03      	subs	r5, #3
 8006fca:	45a8      	cmp	r8, r5
 8006fcc:	bf38      	it	cc
 8006fce:	2100      	movcc	r1, #0
 8006fd0:	440b      	add	r3, r1
 8006fd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fd6:	b191      	cbz	r1, 8006ffe <__mdiff+0x11a>
 8006fd8:	6117      	str	r7, [r2, #16]
 8006fda:	e79d      	b.n	8006f18 <__mdiff+0x34>
 8006fdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fe0:	46e6      	mov	lr, ip
 8006fe2:	0c08      	lsrs	r0, r1, #16
 8006fe4:	fa1c fc81 	uxtah	ip, ip, r1
 8006fe8:	4471      	add	r1, lr
 8006fea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006fee:	b289      	uxth	r1, r1
 8006ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ff4:	f846 1b04 	str.w	r1, [r6], #4
 8006ff8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ffc:	e7dd      	b.n	8006fba <__mdiff+0xd6>
 8006ffe:	3f01      	subs	r7, #1
 8007000:	e7e7      	b.n	8006fd2 <__mdiff+0xee>
 8007002:	bf00      	nop
 8007004:	0800835c 	.word	0x0800835c
 8007008:	0800836d 	.word	0x0800836d

0800700c <__d2b>:
 800700c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007010:	460f      	mov	r7, r1
 8007012:	2101      	movs	r1, #1
 8007014:	ec59 8b10 	vmov	r8, r9, d0
 8007018:	4616      	mov	r6, r2
 800701a:	f7ff fccd 	bl	80069b8 <_Balloc>
 800701e:	4604      	mov	r4, r0
 8007020:	b930      	cbnz	r0, 8007030 <__d2b+0x24>
 8007022:	4602      	mov	r2, r0
 8007024:	4b23      	ldr	r3, [pc, #140]	@ (80070b4 <__d2b+0xa8>)
 8007026:	4824      	ldr	r0, [pc, #144]	@ (80070b8 <__d2b+0xac>)
 8007028:	f240 310f 	movw	r1, #783	@ 0x30f
 800702c:	f7fe fd5a 	bl	8005ae4 <__assert_func>
 8007030:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007034:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007038:	b10d      	cbz	r5, 800703e <__d2b+0x32>
 800703a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	f1b8 0300 	subs.w	r3, r8, #0
 8007044:	d023      	beq.n	800708e <__d2b+0x82>
 8007046:	4668      	mov	r0, sp
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	f7ff fd7c 	bl	8006b46 <__lo0bits>
 800704e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007052:	b1d0      	cbz	r0, 800708a <__d2b+0x7e>
 8007054:	f1c0 0320 	rsb	r3, r0, #32
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	430b      	orrs	r3, r1
 800705e:	40c2      	lsrs	r2, r0
 8007060:	6163      	str	r3, [r4, #20]
 8007062:	9201      	str	r2, [sp, #4]
 8007064:	9b01      	ldr	r3, [sp, #4]
 8007066:	61a3      	str	r3, [r4, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bf0c      	ite	eq
 800706c:	2201      	moveq	r2, #1
 800706e:	2202      	movne	r2, #2
 8007070:	6122      	str	r2, [r4, #16]
 8007072:	b1a5      	cbz	r5, 800709e <__d2b+0x92>
 8007074:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007078:	4405      	add	r5, r0
 800707a:	603d      	str	r5, [r7, #0]
 800707c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007080:	6030      	str	r0, [r6, #0]
 8007082:	4620      	mov	r0, r4
 8007084:	b003      	add	sp, #12
 8007086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800708a:	6161      	str	r1, [r4, #20]
 800708c:	e7ea      	b.n	8007064 <__d2b+0x58>
 800708e:	a801      	add	r0, sp, #4
 8007090:	f7ff fd59 	bl	8006b46 <__lo0bits>
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	6163      	str	r3, [r4, #20]
 8007098:	3020      	adds	r0, #32
 800709a:	2201      	movs	r2, #1
 800709c:	e7e8      	b.n	8007070 <__d2b+0x64>
 800709e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070a6:	6038      	str	r0, [r7, #0]
 80070a8:	6918      	ldr	r0, [r3, #16]
 80070aa:	f7ff fd2d 	bl	8006b08 <__hi0bits>
 80070ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070b2:	e7e5      	b.n	8007080 <__d2b+0x74>
 80070b4:	0800835c 	.word	0x0800835c
 80070b8:	0800836d 	.word	0x0800836d

080070bc <__sflush_r>:
 80070bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	0716      	lsls	r6, r2, #28
 80070c6:	4605      	mov	r5, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	d454      	bmi.n	8007176 <__sflush_r+0xba>
 80070cc:	684b      	ldr	r3, [r1, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dc02      	bgt.n	80070d8 <__sflush_r+0x1c>
 80070d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dd48      	ble.n	800716a <__sflush_r+0xae>
 80070d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070da:	2e00      	cmp	r6, #0
 80070dc:	d045      	beq.n	800716a <__sflush_r+0xae>
 80070de:	2300      	movs	r3, #0
 80070e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070e4:	682f      	ldr	r7, [r5, #0]
 80070e6:	6a21      	ldr	r1, [r4, #32]
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	d030      	beq.n	800714e <__sflush_r+0x92>
 80070ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	0759      	lsls	r1, r3, #29
 80070f2:	d505      	bpl.n	8007100 <__sflush_r+0x44>
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	1ad2      	subs	r2, r2, r3
 80070f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070fa:	b10b      	cbz	r3, 8007100 <__sflush_r+0x44>
 80070fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	2300      	movs	r3, #0
 8007102:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007104:	6a21      	ldr	r1, [r4, #32]
 8007106:	4628      	mov	r0, r5
 8007108:	47b0      	blx	r6
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	d106      	bne.n	800711e <__sflush_r+0x62>
 8007110:	6829      	ldr	r1, [r5, #0]
 8007112:	291d      	cmp	r1, #29
 8007114:	d82b      	bhi.n	800716e <__sflush_r+0xb2>
 8007116:	4a2a      	ldr	r2, [pc, #168]	@ (80071c0 <__sflush_r+0x104>)
 8007118:	410a      	asrs	r2, r1
 800711a:	07d6      	lsls	r6, r2, #31
 800711c:	d427      	bmi.n	800716e <__sflush_r+0xb2>
 800711e:	2200      	movs	r2, #0
 8007120:	6062      	str	r2, [r4, #4]
 8007122:	04d9      	lsls	r1, r3, #19
 8007124:	6922      	ldr	r2, [r4, #16]
 8007126:	6022      	str	r2, [r4, #0]
 8007128:	d504      	bpl.n	8007134 <__sflush_r+0x78>
 800712a:	1c42      	adds	r2, r0, #1
 800712c:	d101      	bne.n	8007132 <__sflush_r+0x76>
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	b903      	cbnz	r3, 8007134 <__sflush_r+0x78>
 8007132:	6560      	str	r0, [r4, #84]	@ 0x54
 8007134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007136:	602f      	str	r7, [r5, #0]
 8007138:	b1b9      	cbz	r1, 800716a <__sflush_r+0xae>
 800713a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800713e:	4299      	cmp	r1, r3
 8007140:	d002      	beq.n	8007148 <__sflush_r+0x8c>
 8007142:	4628      	mov	r0, r5
 8007144:	f7ff fb38 	bl	80067b8 <_free_r>
 8007148:	2300      	movs	r3, #0
 800714a:	6363      	str	r3, [r4, #52]	@ 0x34
 800714c:	e00d      	b.n	800716a <__sflush_r+0xae>
 800714e:	2301      	movs	r3, #1
 8007150:	4628      	mov	r0, r5
 8007152:	47b0      	blx	r6
 8007154:	4602      	mov	r2, r0
 8007156:	1c50      	adds	r0, r2, #1
 8007158:	d1c9      	bne.n	80070ee <__sflush_r+0x32>
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0c6      	beq.n	80070ee <__sflush_r+0x32>
 8007160:	2b1d      	cmp	r3, #29
 8007162:	d001      	beq.n	8007168 <__sflush_r+0xac>
 8007164:	2b16      	cmp	r3, #22
 8007166:	d11e      	bne.n	80071a6 <__sflush_r+0xea>
 8007168:	602f      	str	r7, [r5, #0]
 800716a:	2000      	movs	r0, #0
 800716c:	e022      	b.n	80071b4 <__sflush_r+0xf8>
 800716e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007172:	b21b      	sxth	r3, r3
 8007174:	e01b      	b.n	80071ae <__sflush_r+0xf2>
 8007176:	690f      	ldr	r7, [r1, #16]
 8007178:	2f00      	cmp	r7, #0
 800717a:	d0f6      	beq.n	800716a <__sflush_r+0xae>
 800717c:	0793      	lsls	r3, r2, #30
 800717e:	680e      	ldr	r6, [r1, #0]
 8007180:	bf08      	it	eq
 8007182:	694b      	ldreq	r3, [r1, #20]
 8007184:	600f      	str	r7, [r1, #0]
 8007186:	bf18      	it	ne
 8007188:	2300      	movne	r3, #0
 800718a:	eba6 0807 	sub.w	r8, r6, r7
 800718e:	608b      	str	r3, [r1, #8]
 8007190:	f1b8 0f00 	cmp.w	r8, #0
 8007194:	dde9      	ble.n	800716a <__sflush_r+0xae>
 8007196:	6a21      	ldr	r1, [r4, #32]
 8007198:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800719a:	4643      	mov	r3, r8
 800719c:	463a      	mov	r2, r7
 800719e:	4628      	mov	r0, r5
 80071a0:	47b0      	blx	r6
 80071a2:	2800      	cmp	r0, #0
 80071a4:	dc08      	bgt.n	80071b8 <__sflush_r+0xfc>
 80071a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b8:	4407      	add	r7, r0
 80071ba:	eba8 0800 	sub.w	r8, r8, r0
 80071be:	e7e7      	b.n	8007190 <__sflush_r+0xd4>
 80071c0:	dfbffffe 	.word	0xdfbffffe

080071c4 <_fflush_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	690b      	ldr	r3, [r1, #16]
 80071c8:	4605      	mov	r5, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	b913      	cbnz	r3, 80071d4 <_fflush_r+0x10>
 80071ce:	2500      	movs	r5, #0
 80071d0:	4628      	mov	r0, r5
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	b118      	cbz	r0, 80071de <_fflush_r+0x1a>
 80071d6:	6a03      	ldr	r3, [r0, #32]
 80071d8:	b90b      	cbnz	r3, 80071de <_fflush_r+0x1a>
 80071da:	f7fe fb89 	bl	80058f0 <__sinit>
 80071de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f3      	beq.n	80071ce <_fflush_r+0xa>
 80071e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071e8:	07d0      	lsls	r0, r2, #31
 80071ea:	d404      	bmi.n	80071f6 <_fflush_r+0x32>
 80071ec:	0599      	lsls	r1, r3, #22
 80071ee:	d402      	bmi.n	80071f6 <_fflush_r+0x32>
 80071f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071f2:	f7fe fc74 	bl	8005ade <__retarget_lock_acquire_recursive>
 80071f6:	4628      	mov	r0, r5
 80071f8:	4621      	mov	r1, r4
 80071fa:	f7ff ff5f 	bl	80070bc <__sflush_r>
 80071fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007200:	07da      	lsls	r2, r3, #31
 8007202:	4605      	mov	r5, r0
 8007204:	d4e4      	bmi.n	80071d0 <_fflush_r+0xc>
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	059b      	lsls	r3, r3, #22
 800720a:	d4e1      	bmi.n	80071d0 <_fflush_r+0xc>
 800720c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800720e:	f7fe fc67 	bl	8005ae0 <__retarget_lock_release_recursive>
 8007212:	e7dd      	b.n	80071d0 <_fflush_r+0xc>

08007214 <fiprintf>:
 8007214:	b40e      	push	{r1, r2, r3}
 8007216:	b503      	push	{r0, r1, lr}
 8007218:	4601      	mov	r1, r0
 800721a:	ab03      	add	r3, sp, #12
 800721c:	4805      	ldr	r0, [pc, #20]	@ (8007234 <fiprintf+0x20>)
 800721e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007222:	6800      	ldr	r0, [r0, #0]
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f000 f889 	bl	800733c <_vfiprintf_r>
 800722a:	b002      	add	sp, #8
 800722c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007230:	b003      	add	sp, #12
 8007232:	4770      	bx	lr
 8007234:	20000318 	.word	0x20000318

08007238 <_sbrk_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d06      	ldr	r5, [pc, #24]	@ (8007254 <_sbrk_r+0x1c>)
 800723c:	2300      	movs	r3, #0
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7fa fe46 	bl	8001ed4 <_sbrk>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_sbrk_r+0x1a>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_sbrk_r+0x1a>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	20000744 	.word	0x20000744

08007258 <memcpy>:
 8007258:	440a      	add	r2, r1
 800725a:	4291      	cmp	r1, r2
 800725c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007260:	d100      	bne.n	8007264 <memcpy+0xc>
 8007262:	4770      	bx	lr
 8007264:	b510      	push	{r4, lr}
 8007266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800726a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800726e:	4291      	cmp	r1, r2
 8007270:	d1f9      	bne.n	8007266 <memcpy+0xe>
 8007272:	bd10      	pop	{r4, pc}

08007274 <abort>:
 8007274:	b508      	push	{r3, lr}
 8007276:	2006      	movs	r0, #6
 8007278:	f000 fa34 	bl	80076e4 <raise>
 800727c:	2001      	movs	r0, #1
 800727e:	f7fa fdb0 	bl	8001de2 <_exit>

08007282 <_calloc_r>:
 8007282:	b570      	push	{r4, r5, r6, lr}
 8007284:	fba1 5402 	umull	r5, r4, r1, r2
 8007288:	b93c      	cbnz	r4, 800729a <_calloc_r+0x18>
 800728a:	4629      	mov	r1, r5
 800728c:	f7ff fb08 	bl	80068a0 <_malloc_r>
 8007290:	4606      	mov	r6, r0
 8007292:	b928      	cbnz	r0, 80072a0 <_calloc_r+0x1e>
 8007294:	2600      	movs	r6, #0
 8007296:	4630      	mov	r0, r6
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	220c      	movs	r2, #12
 800729c:	6002      	str	r2, [r0, #0]
 800729e:	e7f9      	b.n	8007294 <_calloc_r+0x12>
 80072a0:	462a      	mov	r2, r5
 80072a2:	4621      	mov	r1, r4
 80072a4:	f7fe fb9d 	bl	80059e2 <memset>
 80072a8:	e7f5      	b.n	8007296 <_calloc_r+0x14>

080072aa <__ascii_mbtowc>:
 80072aa:	b082      	sub	sp, #8
 80072ac:	b901      	cbnz	r1, 80072b0 <__ascii_mbtowc+0x6>
 80072ae:	a901      	add	r1, sp, #4
 80072b0:	b142      	cbz	r2, 80072c4 <__ascii_mbtowc+0x1a>
 80072b2:	b14b      	cbz	r3, 80072c8 <__ascii_mbtowc+0x1e>
 80072b4:	7813      	ldrb	r3, [r2, #0]
 80072b6:	600b      	str	r3, [r1, #0]
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	1e10      	subs	r0, r2, #0
 80072bc:	bf18      	it	ne
 80072be:	2001      	movne	r0, #1
 80072c0:	b002      	add	sp, #8
 80072c2:	4770      	bx	lr
 80072c4:	4610      	mov	r0, r2
 80072c6:	e7fb      	b.n	80072c0 <__ascii_mbtowc+0x16>
 80072c8:	f06f 0001 	mvn.w	r0, #1
 80072cc:	e7f8      	b.n	80072c0 <__ascii_mbtowc+0x16>

080072ce <__ascii_wctomb>:
 80072ce:	4603      	mov	r3, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	b141      	cbz	r1, 80072e6 <__ascii_wctomb+0x18>
 80072d4:	2aff      	cmp	r2, #255	@ 0xff
 80072d6:	d904      	bls.n	80072e2 <__ascii_wctomb+0x14>
 80072d8:	228a      	movs	r2, #138	@ 0x8a
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	4770      	bx	lr
 80072e2:	700a      	strb	r2, [r1, #0]
 80072e4:	2001      	movs	r0, #1
 80072e6:	4770      	bx	lr

080072e8 <__sfputc_r>:
 80072e8:	6893      	ldr	r3, [r2, #8]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	b410      	push	{r4}
 80072f0:	6093      	str	r3, [r2, #8]
 80072f2:	da08      	bge.n	8007306 <__sfputc_r+0x1e>
 80072f4:	6994      	ldr	r4, [r2, #24]
 80072f6:	42a3      	cmp	r3, r4
 80072f8:	db01      	blt.n	80072fe <__sfputc_r+0x16>
 80072fa:	290a      	cmp	r1, #10
 80072fc:	d103      	bne.n	8007306 <__sfputc_r+0x1e>
 80072fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007302:	f000 b933 	b.w	800756c <__swbuf_r>
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	1c58      	adds	r0, r3, #1
 800730a:	6010      	str	r0, [r2, #0]
 800730c:	7019      	strb	r1, [r3, #0]
 800730e:	4608      	mov	r0, r1
 8007310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007314:	4770      	bx	lr

08007316 <__sfputs_r>:
 8007316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007318:	4606      	mov	r6, r0
 800731a:	460f      	mov	r7, r1
 800731c:	4614      	mov	r4, r2
 800731e:	18d5      	adds	r5, r2, r3
 8007320:	42ac      	cmp	r4, r5
 8007322:	d101      	bne.n	8007328 <__sfputs_r+0x12>
 8007324:	2000      	movs	r0, #0
 8007326:	e007      	b.n	8007338 <__sfputs_r+0x22>
 8007328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732c:	463a      	mov	r2, r7
 800732e:	4630      	mov	r0, r6
 8007330:	f7ff ffda 	bl	80072e8 <__sfputc_r>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d1f3      	bne.n	8007320 <__sfputs_r+0xa>
 8007338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800733c <_vfiprintf_r>:
 800733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007340:	460d      	mov	r5, r1
 8007342:	b09d      	sub	sp, #116	@ 0x74
 8007344:	4614      	mov	r4, r2
 8007346:	4698      	mov	r8, r3
 8007348:	4606      	mov	r6, r0
 800734a:	b118      	cbz	r0, 8007354 <_vfiprintf_r+0x18>
 800734c:	6a03      	ldr	r3, [r0, #32]
 800734e:	b90b      	cbnz	r3, 8007354 <_vfiprintf_r+0x18>
 8007350:	f7fe face 	bl	80058f0 <__sinit>
 8007354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007356:	07d9      	lsls	r1, r3, #31
 8007358:	d405      	bmi.n	8007366 <_vfiprintf_r+0x2a>
 800735a:	89ab      	ldrh	r3, [r5, #12]
 800735c:	059a      	lsls	r2, r3, #22
 800735e:	d402      	bmi.n	8007366 <_vfiprintf_r+0x2a>
 8007360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007362:	f7fe fbbc 	bl	8005ade <__retarget_lock_acquire_recursive>
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	071b      	lsls	r3, r3, #28
 800736a:	d501      	bpl.n	8007370 <_vfiprintf_r+0x34>
 800736c:	692b      	ldr	r3, [r5, #16]
 800736e:	b99b      	cbnz	r3, 8007398 <_vfiprintf_r+0x5c>
 8007370:	4629      	mov	r1, r5
 8007372:	4630      	mov	r0, r6
 8007374:	f000 f938 	bl	80075e8 <__swsetup_r>
 8007378:	b170      	cbz	r0, 8007398 <_vfiprintf_r+0x5c>
 800737a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800737c:	07dc      	lsls	r4, r3, #31
 800737e:	d504      	bpl.n	800738a <_vfiprintf_r+0x4e>
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	b01d      	add	sp, #116	@ 0x74
 8007386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738a:	89ab      	ldrh	r3, [r5, #12]
 800738c:	0598      	lsls	r0, r3, #22
 800738e:	d4f7      	bmi.n	8007380 <_vfiprintf_r+0x44>
 8007390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007392:	f7fe fba5 	bl	8005ae0 <__retarget_lock_release_recursive>
 8007396:	e7f3      	b.n	8007380 <_vfiprintf_r+0x44>
 8007398:	2300      	movs	r3, #0
 800739a:	9309      	str	r3, [sp, #36]	@ 0x24
 800739c:	2320      	movs	r3, #32
 800739e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a6:	2330      	movs	r3, #48	@ 0x30
 80073a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007558 <_vfiprintf_r+0x21c>
 80073ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073b0:	f04f 0901 	mov.w	r9, #1
 80073b4:	4623      	mov	r3, r4
 80073b6:	469a      	mov	sl, r3
 80073b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073bc:	b10a      	cbz	r2, 80073c2 <_vfiprintf_r+0x86>
 80073be:	2a25      	cmp	r2, #37	@ 0x25
 80073c0:	d1f9      	bne.n	80073b6 <_vfiprintf_r+0x7a>
 80073c2:	ebba 0b04 	subs.w	fp, sl, r4
 80073c6:	d00b      	beq.n	80073e0 <_vfiprintf_r+0xa4>
 80073c8:	465b      	mov	r3, fp
 80073ca:	4622      	mov	r2, r4
 80073cc:	4629      	mov	r1, r5
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7ff ffa1 	bl	8007316 <__sfputs_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	f000 80a7 	beq.w	8007528 <_vfiprintf_r+0x1ec>
 80073da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073dc:	445a      	add	r2, fp
 80073de:	9209      	str	r2, [sp, #36]	@ 0x24
 80073e0:	f89a 3000 	ldrb.w	r3, [sl]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 809f 	beq.w	8007528 <_vfiprintf_r+0x1ec>
 80073ea:	2300      	movs	r3, #0
 80073ec:	f04f 32ff 	mov.w	r2, #4294967295
 80073f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f4:	f10a 0a01 	add.w	sl, sl, #1
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	9307      	str	r3, [sp, #28]
 80073fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007400:	931a      	str	r3, [sp, #104]	@ 0x68
 8007402:	4654      	mov	r4, sl
 8007404:	2205      	movs	r2, #5
 8007406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740a:	4853      	ldr	r0, [pc, #332]	@ (8007558 <_vfiprintf_r+0x21c>)
 800740c:	f7f8 ff00 	bl	8000210 <memchr>
 8007410:	9a04      	ldr	r2, [sp, #16]
 8007412:	b9d8      	cbnz	r0, 800744c <_vfiprintf_r+0x110>
 8007414:	06d1      	lsls	r1, r2, #27
 8007416:	bf44      	itt	mi
 8007418:	2320      	movmi	r3, #32
 800741a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800741e:	0713      	lsls	r3, r2, #28
 8007420:	bf44      	itt	mi
 8007422:	232b      	movmi	r3, #43	@ 0x2b
 8007424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007428:	f89a 3000 	ldrb.w	r3, [sl]
 800742c:	2b2a      	cmp	r3, #42	@ 0x2a
 800742e:	d015      	beq.n	800745c <_vfiprintf_r+0x120>
 8007430:	9a07      	ldr	r2, [sp, #28]
 8007432:	4654      	mov	r4, sl
 8007434:	2000      	movs	r0, #0
 8007436:	f04f 0c0a 	mov.w	ip, #10
 800743a:	4621      	mov	r1, r4
 800743c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007440:	3b30      	subs	r3, #48	@ 0x30
 8007442:	2b09      	cmp	r3, #9
 8007444:	d94b      	bls.n	80074de <_vfiprintf_r+0x1a2>
 8007446:	b1b0      	cbz	r0, 8007476 <_vfiprintf_r+0x13a>
 8007448:	9207      	str	r2, [sp, #28]
 800744a:	e014      	b.n	8007476 <_vfiprintf_r+0x13a>
 800744c:	eba0 0308 	sub.w	r3, r0, r8
 8007450:	fa09 f303 	lsl.w	r3, r9, r3
 8007454:	4313      	orrs	r3, r2
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	46a2      	mov	sl, r4
 800745a:	e7d2      	b.n	8007402 <_vfiprintf_r+0xc6>
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	1d19      	adds	r1, r3, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	9103      	str	r1, [sp, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	bfbb      	ittet	lt
 8007468:	425b      	neglt	r3, r3
 800746a:	f042 0202 	orrlt.w	r2, r2, #2
 800746e:	9307      	strge	r3, [sp, #28]
 8007470:	9307      	strlt	r3, [sp, #28]
 8007472:	bfb8      	it	lt
 8007474:	9204      	strlt	r2, [sp, #16]
 8007476:	7823      	ldrb	r3, [r4, #0]
 8007478:	2b2e      	cmp	r3, #46	@ 0x2e
 800747a:	d10a      	bne.n	8007492 <_vfiprintf_r+0x156>
 800747c:	7863      	ldrb	r3, [r4, #1]
 800747e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007480:	d132      	bne.n	80074e8 <_vfiprintf_r+0x1ac>
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	1d1a      	adds	r2, r3, #4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	9203      	str	r2, [sp, #12]
 800748a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800748e:	3402      	adds	r4, #2
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007568 <_vfiprintf_r+0x22c>
 8007496:	7821      	ldrb	r1, [r4, #0]
 8007498:	2203      	movs	r2, #3
 800749a:	4650      	mov	r0, sl
 800749c:	f7f8 feb8 	bl	8000210 <memchr>
 80074a0:	b138      	cbz	r0, 80074b2 <_vfiprintf_r+0x176>
 80074a2:	9b04      	ldr	r3, [sp, #16]
 80074a4:	eba0 000a 	sub.w	r0, r0, sl
 80074a8:	2240      	movs	r2, #64	@ 0x40
 80074aa:	4082      	lsls	r2, r0
 80074ac:	4313      	orrs	r3, r2
 80074ae:	3401      	adds	r4, #1
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b6:	4829      	ldr	r0, [pc, #164]	@ (800755c <_vfiprintf_r+0x220>)
 80074b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074bc:	2206      	movs	r2, #6
 80074be:	f7f8 fea7 	bl	8000210 <memchr>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d03f      	beq.n	8007546 <_vfiprintf_r+0x20a>
 80074c6:	4b26      	ldr	r3, [pc, #152]	@ (8007560 <_vfiprintf_r+0x224>)
 80074c8:	bb1b      	cbnz	r3, 8007512 <_vfiprintf_r+0x1d6>
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	3307      	adds	r3, #7
 80074ce:	f023 0307 	bic.w	r3, r3, #7
 80074d2:	3308      	adds	r3, #8
 80074d4:	9303      	str	r3, [sp, #12]
 80074d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d8:	443b      	add	r3, r7
 80074da:	9309      	str	r3, [sp, #36]	@ 0x24
 80074dc:	e76a      	b.n	80073b4 <_vfiprintf_r+0x78>
 80074de:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e2:	460c      	mov	r4, r1
 80074e4:	2001      	movs	r0, #1
 80074e6:	e7a8      	b.n	800743a <_vfiprintf_r+0xfe>
 80074e8:	2300      	movs	r3, #0
 80074ea:	3401      	adds	r4, #1
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	4619      	mov	r1, r3
 80074f0:	f04f 0c0a 	mov.w	ip, #10
 80074f4:	4620      	mov	r0, r4
 80074f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074fa:	3a30      	subs	r2, #48	@ 0x30
 80074fc:	2a09      	cmp	r2, #9
 80074fe:	d903      	bls.n	8007508 <_vfiprintf_r+0x1cc>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0c6      	beq.n	8007492 <_vfiprintf_r+0x156>
 8007504:	9105      	str	r1, [sp, #20]
 8007506:	e7c4      	b.n	8007492 <_vfiprintf_r+0x156>
 8007508:	fb0c 2101 	mla	r1, ip, r1, r2
 800750c:	4604      	mov	r4, r0
 800750e:	2301      	movs	r3, #1
 8007510:	e7f0      	b.n	80074f4 <_vfiprintf_r+0x1b8>
 8007512:	ab03      	add	r3, sp, #12
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	462a      	mov	r2, r5
 8007518:	4b12      	ldr	r3, [pc, #72]	@ (8007564 <_vfiprintf_r+0x228>)
 800751a:	a904      	add	r1, sp, #16
 800751c:	4630      	mov	r0, r6
 800751e:	f7fd fda3 	bl	8005068 <_printf_float>
 8007522:	4607      	mov	r7, r0
 8007524:	1c78      	adds	r0, r7, #1
 8007526:	d1d6      	bne.n	80074d6 <_vfiprintf_r+0x19a>
 8007528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800752a:	07d9      	lsls	r1, r3, #31
 800752c:	d405      	bmi.n	800753a <_vfiprintf_r+0x1fe>
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	059a      	lsls	r2, r3, #22
 8007532:	d402      	bmi.n	800753a <_vfiprintf_r+0x1fe>
 8007534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007536:	f7fe fad3 	bl	8005ae0 <__retarget_lock_release_recursive>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	065b      	lsls	r3, r3, #25
 800753e:	f53f af1f 	bmi.w	8007380 <_vfiprintf_r+0x44>
 8007542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007544:	e71e      	b.n	8007384 <_vfiprintf_r+0x48>
 8007546:	ab03      	add	r3, sp, #12
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	462a      	mov	r2, r5
 800754c:	4b05      	ldr	r3, [pc, #20]	@ (8007564 <_vfiprintf_r+0x228>)
 800754e:	a904      	add	r1, sp, #16
 8007550:	4630      	mov	r0, r6
 8007552:	f7fe f821 	bl	8005598 <_printf_i>
 8007556:	e7e4      	b.n	8007522 <_vfiprintf_r+0x1e6>
 8007558:	080085d3 	.word	0x080085d3
 800755c:	080085dd 	.word	0x080085dd
 8007560:	08005069 	.word	0x08005069
 8007564:	08007317 	.word	0x08007317
 8007568:	080085d9 	.word	0x080085d9

0800756c <__swbuf_r>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	460e      	mov	r6, r1
 8007570:	4614      	mov	r4, r2
 8007572:	4605      	mov	r5, r0
 8007574:	b118      	cbz	r0, 800757e <__swbuf_r+0x12>
 8007576:	6a03      	ldr	r3, [r0, #32]
 8007578:	b90b      	cbnz	r3, 800757e <__swbuf_r+0x12>
 800757a:	f7fe f9b9 	bl	80058f0 <__sinit>
 800757e:	69a3      	ldr	r3, [r4, #24]
 8007580:	60a3      	str	r3, [r4, #8]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	071a      	lsls	r2, r3, #28
 8007586:	d501      	bpl.n	800758c <__swbuf_r+0x20>
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	b943      	cbnz	r3, 800759e <__swbuf_r+0x32>
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f82a 	bl	80075e8 <__swsetup_r>
 8007594:	b118      	cbz	r0, 800759e <__swbuf_r+0x32>
 8007596:	f04f 37ff 	mov.w	r7, #4294967295
 800759a:	4638      	mov	r0, r7
 800759c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	6922      	ldr	r2, [r4, #16]
 80075a2:	1a98      	subs	r0, r3, r2
 80075a4:	6963      	ldr	r3, [r4, #20]
 80075a6:	b2f6      	uxtb	r6, r6
 80075a8:	4283      	cmp	r3, r0
 80075aa:	4637      	mov	r7, r6
 80075ac:	dc05      	bgt.n	80075ba <__swbuf_r+0x4e>
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	f7ff fe07 	bl	80071c4 <_fflush_r>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d1ed      	bne.n	8007596 <__swbuf_r+0x2a>
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	3b01      	subs	r3, #1
 80075be:	60a3      	str	r3, [r4, #8]
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	6022      	str	r2, [r4, #0]
 80075c6:	701e      	strb	r6, [r3, #0]
 80075c8:	6962      	ldr	r2, [r4, #20]
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d004      	beq.n	80075da <__swbuf_r+0x6e>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	07db      	lsls	r3, r3, #31
 80075d4:	d5e1      	bpl.n	800759a <__swbuf_r+0x2e>
 80075d6:	2e0a      	cmp	r6, #10
 80075d8:	d1df      	bne.n	800759a <__swbuf_r+0x2e>
 80075da:	4621      	mov	r1, r4
 80075dc:	4628      	mov	r0, r5
 80075de:	f7ff fdf1 	bl	80071c4 <_fflush_r>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d0d9      	beq.n	800759a <__swbuf_r+0x2e>
 80075e6:	e7d6      	b.n	8007596 <__swbuf_r+0x2a>

080075e8 <__swsetup_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4b29      	ldr	r3, [pc, #164]	@ (8007690 <__swsetup_r+0xa8>)
 80075ec:	4605      	mov	r5, r0
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	460c      	mov	r4, r1
 80075f2:	b118      	cbz	r0, 80075fc <__swsetup_r+0x14>
 80075f4:	6a03      	ldr	r3, [r0, #32]
 80075f6:	b90b      	cbnz	r3, 80075fc <__swsetup_r+0x14>
 80075f8:	f7fe f97a 	bl	80058f0 <__sinit>
 80075fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007600:	0719      	lsls	r1, r3, #28
 8007602:	d422      	bmi.n	800764a <__swsetup_r+0x62>
 8007604:	06da      	lsls	r2, r3, #27
 8007606:	d407      	bmi.n	8007618 <__swsetup_r+0x30>
 8007608:	2209      	movs	r2, #9
 800760a:	602a      	str	r2, [r5, #0]
 800760c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	f04f 30ff 	mov.w	r0, #4294967295
 8007616:	e033      	b.n	8007680 <__swsetup_r+0x98>
 8007618:	0758      	lsls	r0, r3, #29
 800761a:	d512      	bpl.n	8007642 <__swsetup_r+0x5a>
 800761c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800761e:	b141      	cbz	r1, 8007632 <__swsetup_r+0x4a>
 8007620:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007624:	4299      	cmp	r1, r3
 8007626:	d002      	beq.n	800762e <__swsetup_r+0x46>
 8007628:	4628      	mov	r0, r5
 800762a:	f7ff f8c5 	bl	80067b8 <_free_r>
 800762e:	2300      	movs	r3, #0
 8007630:	6363      	str	r3, [r4, #52]	@ 0x34
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	2300      	movs	r3, #0
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	6923      	ldr	r3, [r4, #16]
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f043 0308 	orr.w	r3, r3, #8
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	b94b      	cbnz	r3, 8007662 <__swsetup_r+0x7a>
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007658:	d003      	beq.n	8007662 <__swsetup_r+0x7a>
 800765a:	4621      	mov	r1, r4
 800765c:	4628      	mov	r0, r5
 800765e:	f000 f883 	bl	8007768 <__smakebuf_r>
 8007662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007666:	f013 0201 	ands.w	r2, r3, #1
 800766a:	d00a      	beq.n	8007682 <__swsetup_r+0x9a>
 800766c:	2200      	movs	r2, #0
 800766e:	60a2      	str	r2, [r4, #8]
 8007670:	6962      	ldr	r2, [r4, #20]
 8007672:	4252      	negs	r2, r2
 8007674:	61a2      	str	r2, [r4, #24]
 8007676:	6922      	ldr	r2, [r4, #16]
 8007678:	b942      	cbnz	r2, 800768c <__swsetup_r+0xa4>
 800767a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800767e:	d1c5      	bne.n	800760c <__swsetup_r+0x24>
 8007680:	bd38      	pop	{r3, r4, r5, pc}
 8007682:	0799      	lsls	r1, r3, #30
 8007684:	bf58      	it	pl
 8007686:	6962      	ldrpl	r2, [r4, #20]
 8007688:	60a2      	str	r2, [r4, #8]
 800768a:	e7f4      	b.n	8007676 <__swsetup_r+0x8e>
 800768c:	2000      	movs	r0, #0
 800768e:	e7f7      	b.n	8007680 <__swsetup_r+0x98>
 8007690:	20000318 	.word	0x20000318

08007694 <_raise_r>:
 8007694:	291f      	cmp	r1, #31
 8007696:	b538      	push	{r3, r4, r5, lr}
 8007698:	4605      	mov	r5, r0
 800769a:	460c      	mov	r4, r1
 800769c:	d904      	bls.n	80076a8 <_raise_r+0x14>
 800769e:	2316      	movs	r3, #22
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076aa:	b112      	cbz	r2, 80076b2 <_raise_r+0x1e>
 80076ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076b0:	b94b      	cbnz	r3, 80076c6 <_raise_r+0x32>
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 f830 	bl	8007718 <_getpid_r>
 80076b8:	4622      	mov	r2, r4
 80076ba:	4601      	mov	r1, r0
 80076bc:	4628      	mov	r0, r5
 80076be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c2:	f000 b817 	b.w	80076f4 <_kill_r>
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00a      	beq.n	80076e0 <_raise_r+0x4c>
 80076ca:	1c59      	adds	r1, r3, #1
 80076cc:	d103      	bne.n	80076d6 <_raise_r+0x42>
 80076ce:	2316      	movs	r3, #22
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	2001      	movs	r0, #1
 80076d4:	e7e7      	b.n	80076a6 <_raise_r+0x12>
 80076d6:	2100      	movs	r1, #0
 80076d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076dc:	4620      	mov	r0, r4
 80076de:	4798      	blx	r3
 80076e0:	2000      	movs	r0, #0
 80076e2:	e7e0      	b.n	80076a6 <_raise_r+0x12>

080076e4 <raise>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	@ (80076f0 <raise+0xc>)
 80076e6:	4601      	mov	r1, r0
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f7ff bfd3 	b.w	8007694 <_raise_r>
 80076ee:	bf00      	nop
 80076f0:	20000318 	.word	0x20000318

080076f4 <_kill_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d07      	ldr	r5, [pc, #28]	@ (8007714 <_kill_r+0x20>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	f7fa fb5e 	bl	8001dc2 <_kill>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d102      	bne.n	8007710 <_kill_r+0x1c>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	b103      	cbz	r3, 8007710 <_kill_r+0x1c>
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	bd38      	pop	{r3, r4, r5, pc}
 8007712:	bf00      	nop
 8007714:	20000744 	.word	0x20000744

08007718 <_getpid_r>:
 8007718:	f7fa bb4b 	b.w	8001db2 <_getpid>

0800771c <__swhatbuf_r>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	460c      	mov	r4, r1
 8007720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007724:	2900      	cmp	r1, #0
 8007726:	b096      	sub	sp, #88	@ 0x58
 8007728:	4615      	mov	r5, r2
 800772a:	461e      	mov	r6, r3
 800772c:	da0d      	bge.n	800774a <__swhatbuf_r+0x2e>
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007734:	f04f 0100 	mov.w	r1, #0
 8007738:	bf14      	ite	ne
 800773a:	2340      	movne	r3, #64	@ 0x40
 800773c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007740:	2000      	movs	r0, #0
 8007742:	6031      	str	r1, [r6, #0]
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	b016      	add	sp, #88	@ 0x58
 8007748:	bd70      	pop	{r4, r5, r6, pc}
 800774a:	466a      	mov	r2, sp
 800774c:	f000 f848 	bl	80077e0 <_fstat_r>
 8007750:	2800      	cmp	r0, #0
 8007752:	dbec      	blt.n	800772e <__swhatbuf_r+0x12>
 8007754:	9901      	ldr	r1, [sp, #4]
 8007756:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800775a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800775e:	4259      	negs	r1, r3
 8007760:	4159      	adcs	r1, r3
 8007762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007766:	e7eb      	b.n	8007740 <__swhatbuf_r+0x24>

08007768 <__smakebuf_r>:
 8007768:	898b      	ldrh	r3, [r1, #12]
 800776a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776c:	079d      	lsls	r5, r3, #30
 800776e:	4606      	mov	r6, r0
 8007770:	460c      	mov	r4, r1
 8007772:	d507      	bpl.n	8007784 <__smakebuf_r+0x1c>
 8007774:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	2301      	movs	r3, #1
 800777e:	6163      	str	r3, [r4, #20]
 8007780:	b003      	add	sp, #12
 8007782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007784:	ab01      	add	r3, sp, #4
 8007786:	466a      	mov	r2, sp
 8007788:	f7ff ffc8 	bl	800771c <__swhatbuf_r>
 800778c:	9f00      	ldr	r7, [sp, #0]
 800778e:	4605      	mov	r5, r0
 8007790:	4639      	mov	r1, r7
 8007792:	4630      	mov	r0, r6
 8007794:	f7ff f884 	bl	80068a0 <_malloc_r>
 8007798:	b948      	cbnz	r0, 80077ae <__smakebuf_r+0x46>
 800779a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779e:	059a      	lsls	r2, r3, #22
 80077a0:	d4ee      	bmi.n	8007780 <__smakebuf_r+0x18>
 80077a2:	f023 0303 	bic.w	r3, r3, #3
 80077a6:	f043 0302 	orr.w	r3, r3, #2
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	e7e2      	b.n	8007774 <__smakebuf_r+0xc>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	6020      	str	r0, [r4, #0]
 80077b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077be:	b15b      	cbz	r3, 80077d8 <__smakebuf_r+0x70>
 80077c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c4:	4630      	mov	r0, r6
 80077c6:	f000 f81d 	bl	8007804 <_isatty_r>
 80077ca:	b128      	cbz	r0, 80077d8 <__smakebuf_r+0x70>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f023 0303 	bic.w	r3, r3, #3
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	431d      	orrs	r5, r3
 80077dc:	81a5      	strh	r5, [r4, #12]
 80077de:	e7cf      	b.n	8007780 <__smakebuf_r+0x18>

080077e0 <_fstat_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d07      	ldr	r5, [pc, #28]	@ (8007800 <_fstat_r+0x20>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	4611      	mov	r1, r2
 80077ec:	602b      	str	r3, [r5, #0]
 80077ee:	f7fa fb48 	bl	8001e82 <_fstat>
 80077f2:	1c43      	adds	r3, r0, #1
 80077f4:	d102      	bne.n	80077fc <_fstat_r+0x1c>
 80077f6:	682b      	ldr	r3, [r5, #0]
 80077f8:	b103      	cbz	r3, 80077fc <_fstat_r+0x1c>
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	bd38      	pop	{r3, r4, r5, pc}
 80077fe:	bf00      	nop
 8007800:	20000744 	.word	0x20000744

08007804 <_isatty_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d06      	ldr	r5, [pc, #24]	@ (8007820 <_isatty_r+0x1c>)
 8007808:	2300      	movs	r3, #0
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	602b      	str	r3, [r5, #0]
 8007810:	f7fa fb47 	bl	8001ea2 <_isatty>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_isatty_r+0x1a>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_isatty_r+0x1a>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	20000744 	.word	0x20000744

08007824 <_init>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr

08007830 <_fini>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	bf00      	nop
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr
