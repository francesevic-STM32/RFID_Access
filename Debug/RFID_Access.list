
RFID_Access.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007654  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d44  08007828  08007828  00008828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800856c  0800856c  0000a4c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800856c  0800856c  0000956c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008574  08008574  0000a4c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008574  08008574  00009574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008578  08008578  00009578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004c4  20000000  0800857c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200004c4  08008a40  0000a4c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08008a40  0000a744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a4c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6c4  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002004  00000000  00000000  00018bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001abc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000231b9  00000000  00000000  0001bc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012d15  00000000  00000000  0003edb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d49e5  00000000  00000000  00051ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001264b3  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000ca3  00000000  00000000  001264f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000553c  00000000  00000000  0012719c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0012c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004c4 	.word	0x200004c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800780c 	.word	0x0800780c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004c8 	.word	0x200004c8
 800020c:	0800780c 	.word	0x0800780c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();  // Inicijalizacija HAL biblioteke
 8000edc:	f001 f860 	bl	8001fa0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();  // Konfiguracija sistemskog takta
 8000ee0:	f000 f81a 	bl	8000f18 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();  // Inicijalizacija GPIO pinova
 8000ee4:	f000 f952 	bl	800118c <MX_GPIO_Init>
	MX_SPI1_Init();  // Inicijalizacija SPI-a
 8000ee8:	f000 f8a4 	bl	8001034 <MX_SPI1_Init>
	MX_I2C1_Init();  // Inicijalizacija I2C-a
 8000eec:	f000 f874 	bl	8000fd8 <MX_I2C1_Init>
	MX_TIM2_Init();  // Inicijalizacija timera 2
 8000ef0:	f000 f8d6 	bl	80010a0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	DWT_Init();		// Inicijalizacija microSeconds funkcije (izbjegavam util.h)
 8000ef4:	f000 fdda 	bl	8001aac <DWT_Init>
	MFRC522_Init();  // Inicijalizacija RFID modula
 8000ef8:	f000 fb98 	bl	800162c <MFRC522_Init>
	I2C_LCD_Init();  // Inicijalizacija LCD ekrana
 8000efc:	f000 fd3c 	bl	8001978 <I2C_LCD_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Pokretanje PWM-a za piezo zvučnik
 8000f00:	2104      	movs	r1, #4
 8000f02:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <main+0x3c>)
 8000f04:	f003 f96c 	bl	80041e0 <HAL_TIM_PWM_Start>
	I2C_WELCOME();  // Prikaz poruke dobrodošlice
 8000f08:	f000 fa70 	bl	80013ec <I2C_WELCOME>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		RFID_Process();
 8000f0c:	f000 f9a6 	bl	800125c <RFID_Process>
 8000f10:	e7fc      	b.n	8000f0c <main+0x34>
 8000f12:	bf00      	nop
 8000f14:	2000058c 	.word	0x2000058c

08000f18 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	@ 0x50
 8000f1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2234      	movs	r2, #52	@ 0x34
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 fd4f 	bl	80059ca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <SystemClock_Config+0xb8>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	4a22      	ldr	r2, [pc, #136]	@ (8000fd0 <SystemClock_Config+0xb8>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <SystemClock_Config+0xb8>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <SystemClock_Config+0xbc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <SystemClock_Config+0xbc>)
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <SystemClock_Config+0xbc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fa7f 	bl	8003490 <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x84>
		Error_Handler();
 8000f98:	f000 fda2 	bl	8001ae0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 ffba 	bl	8002f30 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xae>
		Error_Handler();
 8000fc2:	f000 fd8d 	bl	8001ae0 <Error_Handler>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3750      	adds	r7, #80	@ 0x50
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	@ (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f001 faed 	bl	80025f4 <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001020:	f000 fd5e 	bl	8001ae0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200004e0 	.word	0x200004e0
 800102c:	40005400 	.word	0x40005400
 8001030:	000186a0 	.word	0x000186a0

08001034 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;					//naziv SPI instance
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_SPI1_Init+0x64>)
 800103a:	4a18      	ldr	r2, [pc, #96]	@ (800109c <MX_SPI1_Init+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;				//STM radi kao master
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001040:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001044:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;	//dvosmjerna komunikacija
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;		//veličina podatka je 8 bita
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;		//SCK je u 0 kad miruje
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;			//podaci se uzorkuju na prvom bridu
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;					//software kontrolira chip select
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001064:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2; //Brzina komunikacij
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;			//prvi bit je MSB
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_SPI1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001080:	220a      	movs	r2, #10
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001086:	f002 fca1 	bl	80039cc <HAL_SPI_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001090:	f000 fd26 	bl	8001ae0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000534 	.word	0x20000534
 800109c:	40013000 	.word	0x40013000

080010a0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	@ 0x38
 80010a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1;
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010da:	2201      	movs	r2, #1
 80010dc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 7999;
 80010e4:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010e6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010ea:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80010f8:	4823      	ldr	r0, [pc, #140]	@ (8001188 <MX_TIM2_Init+0xe8>)
 80010fa:	f002 ff75 	bl	8003fe8 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x68>
		Error_Handler();
 8001104:	f000 fcec 	bl	8001ae0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800110e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001112:	4619      	mov	r1, r3
 8001114:	481c      	ldr	r0, [pc, #112]	@ (8001188 <MX_TIM2_Init+0xe8>)
 8001116:	f003 fa5d 	bl	80045d4 <HAL_TIM_ConfigClockSource>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x84>
		Error_Handler();
 8001120:	f000 fcde 	bl	8001ae0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001124:	4818      	ldr	r0, [pc, #96]	@ (8001188 <MX_TIM2_Init+0xe8>)
 8001126:	f003 f802 	bl	800412e <HAL_TIM_PWM_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0x94>
		Error_Handler();
 8001130:	f000 fcd6 	bl	8001ae0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	4619      	mov	r1, r3
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_TIM2_Init+0xe8>)
 8001144:	f003 fe2a 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800114e:	f000 fcc7 	bl	8001ae0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001152:	2360      	movs	r3, #96	@ 0x60
 8001154:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	@ (8001188 <MX_TIM2_Init+0xe8>)
 800116a:	f003 f971 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001174:	f000 fcb4 	bl	8001ae0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <MX_TIM2_Init+0xe8>)
 800117a:	f000 fd8f 	bl	8001c9c <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3738      	adds	r7, #56	@ 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000058c 	.word	0x2000058c

0800118c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a29      	ldr	r2, [pc, #164]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a22      	ldr	r2, [pc, #136]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <MX_GPIO_Init+0xc4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_8, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80011e0:	481c      	ldr	r0, [pc, #112]	@ (8001254 <MX_GPIO_Init+0xc8>)
 80011e2:	f001 f9ed 	bl	80025c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	481b      	ldr	r0, [pc, #108]	@ (8001258 <MX_GPIO_Init+0xcc>)
 80011ec:	f001 f9e8 	bl	80025c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011f0:	2310      	movs	r3, #16
 80011f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4813      	ldr	r0, [pc, #76]	@ (8001254 <MX_GPIO_Init+0xc8>)
 8001208:	f001 f846 	bl	8002298 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	@ (8001258 <MX_GPIO_Init+0xcc>)
 8001224:	f001 f838 	bl	8002298 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001232:	2302      	movs	r3, #2
 8001234:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4619      	mov	r1, r3
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_GPIO_Init+0xc8>)
 8001242:	f001 f829 	bl	8002298 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400

0800125c <RFID_Process>:

/* USER CODE BEGIN 4 */
void RFID_Process(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	// Attempt to detect a card
	status = MFRC522_Request(0x26, str); // Provjera prisutnosti kartice
 8001260:	491f      	ldr	r1, [pc, #124]	@ (80012e0 <RFID_Process+0x84>)
 8001262:	2026      	movs	r0, #38	@ 0x26
 8001264:	f000 fab2 	bl	80017cc <MFRC522_Request>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <RFID_Process+0x88>)
 800126e:	701a      	strb	r2, [r3, #0]
	if (status == 0) {
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <RFID_Process+0x88>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d131      	bne.n	80012dc <RFID_Process+0x80>
		status = MFRC522_Anticoll(str);  // Antikolidacija - dobivanje UID-a
 8001278:	4819      	ldr	r0, [pc, #100]	@ (80012e0 <RFID_Process+0x84>)
 800127a:	f000 facc 	bl	8001816 <MFRC522_Anticoll>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <RFID_Process+0x88>)
 8001284:	701a      	strb	r2, [r3, #0]
		if (status == 0) {
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <RFID_Process+0x88>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d126      	bne.n	80012dc <RFID_Process+0x80>
			memcpy(sNum, str, 5); // Kopiranje UID-a u sNum
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <RFID_Process+0x8c>)
 8001290:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <RFID_Process+0x84>)
 8001292:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001296:	6018      	str	r0, [r3, #0]
 8001298:	3304      	adds	r3, #4
 800129a:	7019      	strb	r1, [r3, #0]
			HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	@ 0x64
 800129e:	f000 fef1 	bl	8002084 <HAL_Delay>
			if ((str[0] == ALLOWED_UID_0) && (str[1] == ALLOWED_UID_1)
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <RFID_Process+0x84>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b4b      	cmp	r3, #75	@ 0x4b
 80012a8:	d114      	bne.n	80012d4 <RFID_Process+0x78>
 80012aa:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <RFID_Process+0x84>)
 80012ac:	785b      	ldrb	r3, [r3, #1]
 80012ae:	2ba1      	cmp	r3, #161	@ 0xa1
 80012b0:	d110      	bne.n	80012d4 <RFID_Process+0x78>
					&& (str[2] == ALLOWED_UID_2) && (str[3] == ALLOWED_UID_3)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <RFID_Process+0x84>)
 80012b4:	789b      	ldrb	r3, [r3, #2]
 80012b6:	2ba9      	cmp	r3, #169	@ 0xa9
 80012b8:	d10c      	bne.n	80012d4 <RFID_Process+0x78>
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <RFID_Process+0x84>)
 80012bc:	78db      	ldrb	r3, [r3, #3]
 80012be:	2bc3      	cmp	r3, #195	@ 0xc3
 80012c0:	d108      	bne.n	80012d4 <RFID_Process+0x78>
					&& (str[4] == ALLOWED_UID_4)) {
 80012c2:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <RFID_Process+0x84>)
 80012c4:	791b      	ldrb	r3, [r3, #4]
 80012c6:	2b80      	cmp	r3, #128	@ 0x80
 80012c8:	d104      	bne.n	80012d4 <RFID_Process+0x78>
				//I2C_CARD((uint8_t*) str);  // Prikaz broja kartice na LCD-u
				I2C_GRANTED();  // Dozvoljen pristup
 80012ca:	f000 f849 	bl	8001360 <I2C_GRANTED>
				I2C_WELCOME();
 80012ce:	f000 f88d 	bl	80013ec <I2C_WELCOME>
				I2C_DENIED();  // Odbijen pristup
				I2C_WELCOME();
			}
		}
	}
};
 80012d2:	e003      	b.n	80012dc <RFID_Process+0x80>
				I2C_DENIED();  // Odbijen pristup
 80012d4:	f000 f80a 	bl	80012ec <I2C_DENIED>
				I2C_WELCOME();
 80012d8:	f000 f888 	bl	80013ec <I2C_WELCOME>
};
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200005d8 	.word	0x200005d8
 80012e4:	200005d4 	.word	0x200005d4
 80012e8:	200005e8 	.word	0x200005e8

080012ec <I2C_DENIED>:
void I2C_DENIED(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	// Generate a random index
	int random_index = rand() % denied_messages_count;
 80012f2:	f003 fdcf 	bl	8004e94 <rand>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <I2C_DENIED+0x6c>)
 80012fa:	7812      	ldrb	r2, [r2, #0]
 80012fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001300:	fb01 f202 	mul.w	r2, r1, r2
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	607b      	str	r3, [r7, #4]
	// Display the message
	I2C_LCD_Clear();
 8001308:	f000 fb5d 	bl	80019c6 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(0, 0);
 800130c:	2100      	movs	r1, #0
 800130e:	2000      	movs	r0, #0
 8001310:	f000 fb64 	bl	80019dc <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) denied_messages[random_index][0]); // First line
 8001314:	4a11      	ldr	r2, [pc, #68]	@ (800135c <I2C_DENIED+0x70>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fb89 	bl	8001a34 <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(0, 1);
 8001322:	2101      	movs	r1, #1
 8001324:	2000      	movs	r0, #0
 8001326:	f000 fb59 	bl	80019dc <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) denied_messages[random_index][1]); // Second line
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <I2C_DENIED+0x70>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fb7d 	bl	8001a34 <I2C_LCD_WriteString>
	// Generiranje zvučnog signala
	GenerateTone(800, 300);
 800133a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800133e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001342:	f000 f883 	bl	800144c <GenerateTone>

	// Mala pauza da korisnik vidi poruku
	HAL_Delay(2500);
 8001346:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800134a:	f000 fe9b 	bl	8002084 <HAL_Delay>

}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	08008184 	.word	0x08008184
 800135c:	20000000 	.word	0x20000000

08001360 <I2C_GRANTED>:

void I2C_GRANTED(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	// Generate a random index
	int random_index = rand() % granted_messages_count;
 8001366:	f003 fd95 	bl	8004e94 <rand>
 800136a:	4603      	mov	r3, r0
 800136c:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <I2C_GRANTED+0x80>)
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	fb93 f1f2 	sdiv	r1, r3, r2
 8001374:	fb01 f202 	mul.w	r2, r1, r2
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	607b      	str	r3, [r7, #4]
	// Display the message
	I2C_LCD_Clear();
 800137c:	f000 fb23 	bl	80019c6 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(0, 0);
 8001380:	2100      	movs	r1, #0
 8001382:	2000      	movs	r0, #0
 8001384:	f000 fb2a 	bl	80019dc <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) granted_messages[random_index][0]); // First line
 8001388:	4a16      	ldr	r2, [pc, #88]	@ (80013e4 <I2C_GRANTED+0x84>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fb4f 	bl	8001a34 <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(0, 1);
 8001396:	2101      	movs	r1, #1
 8001398:	2000      	movs	r0, #0
 800139a:	f000 fb1f 	bl	80019dc <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) granted_messages[random_index][1]); // Second line
 800139e:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <I2C_GRANTED+0x84>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fb43 	bl	8001a34 <I2C_LCD_WriteString>
	// Aktivacija releja
	HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <I2C_GRANTED+0x88>)
 80013b6:	f001 f903 	bl	80025c0 <HAL_GPIO_WritePin>

	// Zvuk odobrenja
	GenerateTone(2000, 100);
 80013ba:	2164      	movs	r1, #100	@ 0x64
 80013bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013c0:	f000 f844 	bl	800144c <GenerateTone>

	// Drži relej uključen 5 sekundi
	HAL_Delay(2500);
 80013c4:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80013c8:	f000 fe5c 	bl	8002084 <HAL_Delay>

	// Isključivanje releja
	HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <I2C_GRANTED+0x88>)
 80013d4:	f001 f8f4 	bl	80025c0 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	08008185 	.word	0x08008185
 80013e4:	20000130 	.word	0x20000130
 80013e8:	40020000 	.word	0x40020000

080013ec <I2C_WELCOME>:

void I2C_WELCOME(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	// Lista šaljivih poruka za skeniranje kartice (prvi red | drugi red)
	// Generate a random index
	int random_index = rand() % welcome_messages_count;
 80013f2:	f003 fd4f 	bl	8004e94 <rand>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <I2C_WELCOME+0x58>)
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001400:	fb01 f202 	mul.w	r2, r1, r2
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	607b      	str	r3, [r7, #4]
	// Display the message
	I2C_LCD_Clear();
 8001408:	f000 fadd 	bl	80019c6 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(0, 0);
 800140c:	2100      	movs	r1, #0
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fae4 	bl	80019dc <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) welcome_messages[random_index][0]); // First line
 8001414:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <I2C_WELCOME+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fb09 	bl	8001a34 <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(0, 1);
 8001422:	2101      	movs	r1, #1
 8001424:	2000      	movs	r0, #0
 8001426:	f000 fad9 	bl	80019dc <I2C_LCD_SetCursor>
	I2C_LCD_WriteString((char*) welcome_messages[random_index][1]); // Second line
 800142a:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <I2C_WELCOME+0x5c>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fafd 	bl	8001a34 <I2C_LCD_WriteString>
};
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08008186 	.word	0x08008186
 8001448:	200002a0 	.word	0x200002a0

0800144c <GenerateTone>:
	}
	I2C_LCD_WriteString(buffer); // Prikaz drugog dijela UID-a na LCD-u
	HAL_Delay(3000);  // Zadržavanje prikaza na ekranu 3 sekunde
}

void GenerateTone(int tone, int duration_ms) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	Reset_TIM2();
 8001456:	f000 f827 	bl	80014a8 <Reset_TIM2>
    uint32_t arr = (TIM_CLOCK / tone) - 1; // Izračun ARR za željenu frekvenciju
 800145a:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <GenerateTone+0x54>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, arr); // Postavljanje perioda PWM-a
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <GenerateTone+0x58>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800146e:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <GenerateTone+0x58>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, arr / 2); // 50% duty cycle
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <GenerateTone+0x58>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	0852      	lsrs	r2, r2, #1
 800147c:	639a      	str	r2, [r3, #56]	@ 0x38

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Pokretanje PWM-a
 800147e:	2104      	movs	r1, #4
 8001480:	4808      	ldr	r0, [pc, #32]	@ (80014a4 <GenerateTone+0x58>)
 8001482:	f002 fead 	bl	80041e0 <HAL_TIM_PWM_Start>
    HAL_Delay(duration_ms); // Trajanje tona
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fdfb 	bl	8002084 <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); // Isključivanje PWM-a
 800148e:	2104      	movs	r1, #4
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <GenerateTone+0x58>)
 8001492:	f002 ff6d 	bl	8004370 <HAL_TIM_PWM_Stop>
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	00f42400 	.word	0x00f42400
 80014a4:	2000058c 	.word	0x2000058c

080014a8 <Reset_TIM2>:

void Reset_TIM2(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	// Zaustavi PWM na kanalu 2 kako bi se osiguralo da se timer može sigurno resetirati
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80014ac:	2104      	movs	r1, #4
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <Reset_TIM2+0x1c>)
 80014b0:	f002 ff5e 	bl	8004370 <HAL_TIM_PWM_Stop>
	// Deinicijaliziraj osnovni timer kako bi se oslobodili resursi i omogućila nova inicijalizacija
	HAL_TIM_Base_DeInit(&htim2);
 80014b4:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <Reset_TIM2+0x1c>)
 80014b6:	f002 fde6 	bl	8004086 <HAL_TIM_Base_DeInit>
	// Ponovno inicijaliziraj timer TIM2 s prethodno definiranim postavkama
	MX_TIM2_Init();
 80014ba:	f7ff fdf1 	bl	80010a0 <MX_TIM2_Init>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000058c 	.word	0x2000058c

080014c8 <RC522_SPI_Transfer>:

/* RC522 functions BEGIN------------------------------------------------------------------*/
uint8_t RC522_SPI_Transfer(uint8_t data) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE, &data, &rx_data, 1, 100);
 80014d2:	f107 020f 	add.w	r2, r7, #15
 80014d6:	1df9      	adds	r1, r7, #7
 80014d8:	2364      	movs	r3, #100	@ 0x64
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <RC522_SPI_Transfer+0x28>)
 80014e0:	f002 fafd 	bl	8003ade <HAL_SPI_TransmitReceive>
	//HSPI_instance je gdje štalje, &data - što šalje, &rx_data - gdje prima, 1-bajt, 100ms timeout
	return rx_data;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000534 	.word	0x20000534

080014f4 <Write_MFRC522>:

void Write_MFRC522(uint8_t addr, uint8_t val) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	4613      	mov	r3, r2
 8001502:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_RESET); //aktivira RC522
 8001504:	2200      	movs	r2, #0
 8001506:	2110      	movs	r1, #16
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <Write_MFRC522+0x48>)
 800150a:	f001 f859 	bl	80025c0 <HAL_GPIO_WritePin>
	RC522_SPI_Transfer((addr << 1) & 0x7E); //adresa je ovisna o registru,   prvi bajt
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffd4 	bl	80014c8 <RC522_SPI_Transfer>
	//Adresu shiftamo u lijevo za jedan bit, a operator & dodaje bajt 01111110
	//da osigura da su svi bitovi ispravno postavljeni
	//kod pisanja moramo osigurati da je najviši bit 0
	RC522_SPI_Transfer(val);	//drugi bajt je vrijednost za slanje
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ffd0 	bl	80014c8 <RC522_SPI_Transfer>
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);  //deaktivira RC522
 8001528:	2201      	movs	r2, #1
 800152a:	2110      	movs	r1, #16
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <Write_MFRC522+0x48>)
 800152e:	f001 f847 	bl	80025c0 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40020000 	.word	0x40020000

08001540 <Read_MFRC522>:

uint8_t Read_MFRC522(uint8_t addr) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	//generička funkcija za čitanje vrijednosti registara
	//Za pisanje u registar: najniži bit adrese je 0.
	//Za čitanje iz registra: najniži bit adrese mora biti 1.
	uint8_t val; //definiramo varijablu za return vrijednost
	//select modula
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2110      	movs	r1, #16
 800154e:	480f      	ldr	r0, [pc, #60]	@ (800158c <Read_MFRC522+0x4c>)
 8001550:	f001 f836 	bl	80025c0 <HAL_GPIO_WritePin>
	//shiftamo adresu u lijevo za jedan bit, osiguravamo 6 srednjih bitova
	//operatorom OR stavljamo bit 1 na najviše mjesto jer označava čitanje
	RC522_SPI_Transfer(((addr << 1) & 0x7E) | 0x80);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	b25b      	sxtb	r3, r3
 800155a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800155e:	b25b      	sxtb	r3, r3
 8001560:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001564:	b25b      	sxtb	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ffad 	bl	80014c8 <RC522_SPI_Transfer>
	//šaljemo dummy byte da bi RC522 mogao vratitit vrijednost iz registra
	val = RC522_SPI_Transfer(0x00);
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff ffaa 	bl	80014c8 <RC522_SPI_Transfer>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
	//unselect modula
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2110      	movs	r1, #16
 800157c:	4803      	ldr	r0, [pc, #12]	@ (800158c <Read_MFRC522+0x4c>)
 800157e:	f001 f81f 	bl	80025c0 <HAL_GPIO_WritePin>
	return val;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40020000 	.word	0x40020000

08001590 <SetBitMask>:

void SetBitMask(uint8_t reg, uint8_t mask) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	460a      	mov	r2, r1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4613      	mov	r3, r2
 800159e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = Read_MFRC522(reg);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ffcc 	bl	8001540 <Read_MFRC522>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff9b 	bl	80014f4 <Write_MFRC522>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <ClearBitMask>:

void ClearBitMask(uint8_t reg, uint8_t mask) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	460a      	mov	r2, r1
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	4613      	mov	r3, r2
 80015d4:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = Read_MFRC522(reg);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ffb1 	bl	8001540 <Read_MFRC522>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));
 80015e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4013      	ands	r3, r2
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff7b 	bl	80014f4 <Write_MFRC522>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <AntennaOn>:

void AntennaOn(void) {
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
	Read_MFRC522(0x14);
 800160a:	2014      	movs	r0, #20
 800160c:	f7ff ff98 	bl	8001540 <Read_MFRC522>
	SetBitMask(0x14, 0x03);
 8001610:	2103      	movs	r1, #3
 8001612:	2014      	movs	r0, #20
 8001614:	f7ff ffbc 	bl	8001590 <SetBitMask>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	Write_MFRC522(0x01, 0x0F);
 8001620:	210f      	movs	r1, #15
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff ff66 	bl	80014f4 <Write_MFRC522>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <MFRC522_Init>:

void MFRC522_Init(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2110      	movs	r1, #16
 8001634:	4812      	ldr	r0, [pc, #72]	@ (8001680 <MFRC522_Init+0x54>)
 8001636:	f000 ffc3 	bl	80025c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT, MFRC522_RST_PIN, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2101      	movs	r1, #1
 800163e:	4811      	ldr	r0, [pc, #68]	@ (8001684 <MFRC522_Init+0x58>)
 8001640:	f000 ffbe 	bl	80025c0 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001644:	f7ff ffea 	bl	800161c <MFRC522_Reset>
	Write_MFRC522(0x2A, 0x8D);
 8001648:	218d      	movs	r1, #141	@ 0x8d
 800164a:	202a      	movs	r0, #42	@ 0x2a
 800164c:	f7ff ff52 	bl	80014f4 <Write_MFRC522>
	Write_MFRC522(0x2B, 0x3E);
 8001650:	213e      	movs	r1, #62	@ 0x3e
 8001652:	202b      	movs	r0, #43	@ 0x2b
 8001654:	f7ff ff4e 	bl	80014f4 <Write_MFRC522>
	Write_MFRC522(0x2D, 30);
 8001658:	211e      	movs	r1, #30
 800165a:	202d      	movs	r0, #45	@ 0x2d
 800165c:	f7ff ff4a 	bl	80014f4 <Write_MFRC522>
	Write_MFRC522(0x2C, 0);
 8001660:	2100      	movs	r1, #0
 8001662:	202c      	movs	r0, #44	@ 0x2c
 8001664:	f7ff ff46 	bl	80014f4 <Write_MFRC522>
	Write_MFRC522(0x15, 0x40);
 8001668:	2140      	movs	r1, #64	@ 0x40
 800166a:	2015      	movs	r0, #21
 800166c:	f7ff ff42 	bl	80014f4 <Write_MFRC522>
	Write_MFRC522(0x11, 0x3D);
 8001670:	213d      	movs	r1, #61	@ 0x3d
 8001672:	2011      	movs	r0, #17
 8001674:	f7ff ff3e 	bl	80014f4 <Write_MFRC522>
	AntennaOn();
 8001678:	f7ff ffc5 	bl	8001606 <AntennaOn>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400

08001688 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
		uint8_t *backData, uint16_t *backLen) {
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4603      	mov	r3, r0
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	4613      	mov	r3, r2
 8001698:	73bb      	strb	r3, [r7, #14]
	uint8_t status = 2;
 800169a:	2302      	movs	r3, #2
 800169c:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn, waitIRq, n;
	int i;
	if (command == 0x0E) {
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b0e      	cmp	r3, #14
 80016a2:	d104      	bne.n	80016ae <MFRC522_ToCard+0x26>
		irqEn = 0x12;
 80016a4:	2312      	movs	r3, #18
 80016a6:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 80016a8:	2310      	movs	r3, #16
 80016aa:	777b      	strb	r3, [r7, #29]
 80016ac:	e003      	b.n	80016b6 <MFRC522_ToCard+0x2e>
	} else {
		irqEn = 0x77;
 80016ae:	2377      	movs	r3, #119	@ 0x77
 80016b0:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 80016b2:	2330      	movs	r3, #48	@ 0x30
 80016b4:	777b      	strb	r3, [r7, #29]
	}
	Write_MFRC522(0x02, irqEn | 0x80);
 80016b6:	7fbb      	ldrb	r3, [r7, #30]
 80016b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff ff17 	bl	80014f4 <Write_MFRC522>
	ClearBitMask(0x04, 0x80);
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	2004      	movs	r0, #4
 80016ca:	f7ff ff7c 	bl	80015c6 <ClearBitMask>
	SetBitMask(0x0A, 0x80);
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	200a      	movs	r0, #10
 80016d2:	f7ff ff5d 	bl	8001590 <SetBitMask>
	Write_MFRC522(0x01, 0x00);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff ff0b 	bl	80014f4 <Write_MFRC522>
	for (i = 0; i < sendLen; i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	e00a      	b.n	80016fa <MFRC522_ToCard+0x72>
		Write_MFRC522(0x09, sendData[i]);
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	4413      	add	r3, r2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	2009      	movs	r0, #9
 80016f0:	f7ff ff00 	bl	80014f4 <Write_MFRC522>
	for (i = 0; i < sendLen; i++)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	3301      	adds	r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbf0      	blt.n	80016e4 <MFRC522_ToCard+0x5c>
	Write_MFRC522(0x01, command);
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	4619      	mov	r1, r3
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fef4 	bl	80014f4 <Write_MFRC522>
	if (command == 0x0C)
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2b0c      	cmp	r3, #12
 8001710:	d103      	bne.n	800171a <MFRC522_ToCard+0x92>
		SetBitMask(0x0D, 0x80);
 8001712:	2180      	movs	r1, #128	@ 0x80
 8001714:	200d      	movs	r0, #13
 8001716:	f7ff ff3b 	bl	8001590 <SetBitMask>
	i = 2000;
 800171a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800171e:	61bb      	str	r3, [r7, #24]
	do {
		n = Read_MFRC522(0x04);
 8001720:	2004      	movs	r0, #4
 8001722:	f7ff ff0d 	bl	8001540 <Read_MFRC522>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]
		i--;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	3b01      	subs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00a      	beq.n	800174c <MFRC522_ToCard+0xc4>
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <MFRC522_ToCard+0xc4>
 8001740:	7dfa      	ldrb	r2, [r7, #23]
 8001742:	7f7b      	ldrb	r3, [r7, #29]
 8001744:	4013      	ands	r3, r2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0e9      	beq.n	8001720 <MFRC522_ToCard+0x98>
	ClearBitMask(0x0D, 0x80);
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	200d      	movs	r0, #13
 8001750:	f7ff ff39 	bl	80015c6 <ClearBitMask>
	if (i != 0) {
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d033      	beq.n	80017c2 <MFRC522_ToCard+0x13a>
		if (!(Read_MFRC522(0x06) & 0x1B)) {
 800175a:	2006      	movs	r0, #6
 800175c:	f7ff fef0 	bl	8001540 <Read_MFRC522>
 8001760:	4603      	mov	r3, r0
 8001762:	f003 031b 	and.w	r3, r3, #27
 8001766:	2b00      	cmp	r3, #0
 8001768:	d12b      	bne.n	80017c2 <MFRC522_ToCard+0x13a>
			status = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01)
 800176e:	7dfa      	ldrb	r2, [r7, #23]
 8001770:	7fbb      	ldrb	r3, [r7, #30]
 8001772:	4013      	ands	r3, r2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MFRC522_ToCard+0xfa>
				status = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	77fb      	strb	r3, [r7, #31]
			if (command == 0x0C) {
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d11c      	bne.n	80017c2 <MFRC522_ToCard+0x13a>
				n = Read_MFRC522(0x0A);
 8001788:	200a      	movs	r0, #10
 800178a:	f7ff fed9 	bl	8001540 <Read_MFRC522>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
				*backLen = n * 8;
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	b29b      	uxth	r3, r3
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	b29a      	uxth	r2, r3
 800179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179c:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < n; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	e00a      	b.n	80017ba <MFRC522_ToCard+0x132>
					backData[i] = Read_MFRC522(0x09);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	18d4      	adds	r4, r2, r3
 80017aa:	2009      	movs	r0, #9
 80017ac:	f7ff fec8 	bl	8001540 <Read_MFRC522>
 80017b0:	4603      	mov	r3, r0
 80017b2:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	3301      	adds	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbf0      	blt.n	80017a4 <MFRC522_ToCard+0x11c>
			}
		}
	}
	return status;
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3724      	adds	r7, #36	@ 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}

080017cc <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;  // Promijenjeno sa int na uint16_t

	Write_MFRC522(0x0D, 0x07);
 80017d8:	2107      	movs	r1, #7
 80017da:	200d      	movs	r0, #13
 80017dc:	f7ff fe8a 	bl	80014f4 <Write_MFRC522>
	TagType[0] = reqMode;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(0x0C, TagType, 1, TagType, &backBits);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	200c      	movs	r0, #12
 80017f4:	f7ff ff48 	bl	8001688 <MFRC522_ToCard>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
	// if true, else
	return (status == 0 && backBits == 0x10) ? 0 : 2;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d104      	bne.n	800180c <MFRC522_Request+0x40>
 8001802:	89bb      	ldrh	r3, [r7, #12]
 8001804:	2b10      	cmp	r3, #16
 8001806:	d101      	bne.n	800180c <MFRC522_Request+0x40>
 8001808:	2300      	movs	r3, #0
 800180a:	e000      	b.n	800180e <MFRC522_Request+0x42>
 800180c:	2302      	movs	r3, #2
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t *serNum) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af02      	add	r7, sp, #8
 800181c:	6078      	str	r0, [r7, #4]
	uint8_t status, i, serNumCheck = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;
	Write_MFRC522(0x0D, 0x00);
 8001822:	2100      	movs	r1, #0
 8001824:	200d      	movs	r0, #13
 8001826:	f7ff fe65 	bl	80014f4 <Write_MFRC522>
	serNum[0] = 0x93;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2293      	movs	r2, #147	@ 0x93
 800182e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3301      	adds	r3, #1
 8001834:	2220      	movs	r2, #32
 8001836:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(0x0C, serNum, 2, serNum, &unLen);
 8001838:	f107 030a 	add.w	r3, r7, #10
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2202      	movs	r2, #2
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	200c      	movs	r0, #12
 8001846:	f7ff ff1f 	bl	8001688 <MFRC522_ToCard>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
	if (status == 0) {
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d118      	bne.n	8001886 <MFRC522_Anticoll+0x70>
		for (i = 0; i < 4; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	73bb      	strb	r3, [r7, #14]
 8001858:	e009      	b.n	800186e <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800185a:	7bbb      	ldrb	r3, [r7, #14]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	7b7b      	ldrb	r3, [r7, #13]
 8001864:	4053      	eors	r3, r2
 8001866:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++)
 8001868:	7bbb      	ldrb	r3, [r7, #14]
 800186a:	3301      	adds	r3, #1
 800186c:	73bb      	strb	r3, [r7, #14]
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d9f2      	bls.n	800185a <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i])
 8001874:	7bbb      	ldrb	r3, [r7, #14]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	7b7a      	ldrb	r2, [r7, #13]
 800187e:	429a      	cmp	r2, r3
 8001880:	d001      	beq.n	8001886 <MFRC522_Anticoll+0x70>
			status = 2;
 8001882:	2302      	movs	r3, #2
 8001884:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <I2C_LCD_ExpanderWrite>:
I2C_LCD_InfoParam_t;


/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/
//ZAPISIVANJE PODATKA U I2C EKSPANDERSKI MODUL
static void I2C_LCD_ExpanderWrite(uint8_t DATA) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af02      	add	r7, sp, #8
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	uint8_t TxData = DATA | 0x08;
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1,(0x27 << 1),
 80018a4:	f107 020f 	add.w	r2, r7, #15
 80018a8:	2364      	movs	r3, #100	@ 0x64
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2301      	movs	r3, #1
 80018ae:	214e      	movs	r1, #78	@ 0x4e
 80018b0:	4803      	ldr	r0, [pc, #12]	@ (80018c0 <I2C_LCD_ExpanderWrite+0x30>)
 80018b2:	f000 ffe3 	bl	800287c <HAL_I2C_Master_Transmit>
			&TxData, sizeof(TxData), 100);
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200004e0 	.word	0x200004e0

080018c4 <I2C_LCD_EnPulse>:

//PULSIRANJE LCD EKRANA
static void I2C_LCD_EnPulse(uint8_t DATA) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	//
	I2C_LCD_ExpanderWrite(DATA | 0b00000100); // EnABLE high
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ffda 	bl	8001890 <I2C_LCD_ExpanderWrite>
	Delay_us(2);
 80018dc:	2002      	movs	r0, #2
 80018de:	f000 f8bf 	bl	8001a60 <Delay_us>

	I2C_LCD_ExpanderWrite(DATA & ~0b00000100); // ENable low
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ffd0 	bl	8001890 <I2C_LCD_ExpanderWrite>
	Delay_us(50);
 80018f0:	2032      	movs	r0, #50	@ 0x32
 80018f2:	f000 f8b5 	bl	8001a60 <Delay_us>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <I2C_LCD_Send>:

//funkcija za slanje putem I2C
static void I2C_LCD_Send(uint8_t Val, uint8_t Mode) {
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	460a      	mov	r2, r1
 8001908:	71fb      	strb	r3, [r7, #7]
 800190a:	4613      	mov	r3, r2
 800190c:	71bb      	strb	r3, [r7, #6]
	//vrijednost koju je primio putem val varijable šalje putem 4 bita koje dijelimo
	//maskiramo 4 MSB bita i spremamo u varijablu HighNib
	uint8_t HighNib = Val & 0xF0;
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f023 030f 	bic.w	r3, r3, #15
 8001914:	73fb      	strb	r3, [r7, #15]
	//shiftamo vrijednost 4 LSB bita u gornje bitove 4567
	uint8_t LowNib = (Val << 4) & 0xF0;
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	73bb      	strb	r3, [r7, #14]
	// mode može biti 0x00 ili 0x01 ovisno šaljemo li komandu ili podatak
	// Mode 0x00 je komanda, mode 0x01 je podatak
	I2C_LCD_ExpanderWrite(HighNib | Mode);
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	4313      	orrs	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ffb3 	bl	8001890 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(HighNib | Mode);
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	4313      	orrs	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ffc6 	bl	80018c4 <I2C_LCD_EnPulse>
	I2C_LCD_ExpanderWrite(LowNib | Mode);
 8001938:	7bba      	ldrb	r2, [r7, #14]
 800193a:	79bb      	ldrb	r3, [r7, #6]
 800193c:	4313      	orrs	r3, r2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ffa5 	bl	8001890 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(LowNib | Mode);
 8001946:	7bba      	ldrb	r2, [r7, #14]
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	4313      	orrs	r3, r2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ffb8 	bl	80018c4 <I2C_LCD_EnPulse>
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t CMD) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_Send(CMD, 0);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ffc7 	bl	80018fe <I2C_LCD_Send>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <I2C_LCD_Init>:

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init() {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 800197c:	2032      	movs	r0, #50	@ 0x32
 800197e:	f000 fb81 	bl	8002084 <HAL_Delay>
	I2C_LCD_Cmd(0x30); //probudi LCD, ali on možda još nije stabilan
 8001982:	2030      	movs	r0, #48	@ 0x30
 8001984:	f7ff ffea 	bl	800195c <I2C_LCD_Cmd>
	HAL_Delay(5);
 8001988:	2005      	movs	r0, #5
 800198a:	f000 fb7b 	bl	8002084 <HAL_Delay>
	I2C_LCD_Cmd(0x30);//osigurava da LCD shvati da radimo u 8-bitnom modu
 800198e:	2030      	movs	r0, #48	@ 0x30
 8001990:	f7ff ffe4 	bl	800195c <I2C_LCD_Cmd>
	HAL_Delay(5);
 8001994:	2005      	movs	r0, #5
 8001996:	f000 fb75 	bl	8002084 <HAL_Delay>
	I2C_LCD_Cmd(0x30);//potvrđuje i zaključava 8-bitni način rada
 800199a:	2030      	movs	r0, #48	@ 0x30
 800199c:	f7ff ffde 	bl	800195c <I2C_LCD_Cmd>
	Delay_us(150);
 80019a0:	2096      	movs	r0, #150	@ 0x96
 80019a2:	f000 f85d 	bl	8001a60 <Delay_us>
	I2C_LCD_Cmd(0x02);//postavlja 4-bitni način rada
 80019a6:	2002      	movs	r0, #2
 80019a8:	f7ff ffd8 	bl	800195c <I2C_LCD_Cmd>

	//(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
	I2C_LCD_Cmd(0x28);
 80019ac:	2028      	movs	r0, #40	@ 0x28
 80019ae:	f7ff ffd5 	bl	800195c <I2C_LCD_Cmd>
	//I2C_LCD_Cmd(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
	I2C_LCD_Cmd(0x0C);
 80019b2:	200c      	movs	r0, #12
 80019b4:	f7ff ffd2 	bl	800195c <I2C_LCD_Cmd>

	//I2C_LCD_Cmd(LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
	I2C_LCD_Cmd(0x06);
 80019b8:	2006      	movs	r0, #6
 80019ba:	f7ff ffcf 	bl	800195c <I2C_LCD_Cmd>
	I2C_LCD_Clear();
 80019be:	f000 f802 	bl	80019c6 <I2C_LCD_Clear>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <I2C_LCD_Clear>:

void I2C_LCD_Clear() {
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0

	I2C_LCD_Send(0x01, 0);
 80019ca:	2100      	movs	r1, #0
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff ff96 	bl	80018fe <I2C_LCD_Send>
	HAL_Delay(2);
 80019d2:	2002      	movs	r0, #2
 80019d4:	f000 fb56 	bl	8002084 <HAL_Delay>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2C_LCD_SetCursor>:

void I2C_LCD_SetCursor(uint8_t Col, uint8_t Row) {
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71bb      	strb	r3, [r7, #6]
	int Row_Offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80019ec:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <I2C_LCD_SetCursor+0x54>)
 80019ee:	f107 0408 	add.w	r4, r7, #8
 80019f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (Row > 2) {
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <I2C_LCD_SetCursor+0x26>
			Row = 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	71bb      	strb	r3, [r7, #6]
		}
		I2C_LCD_Send(0x80 | (Col + Row_Offsets[Row]), 0);
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3318      	adds	r3, #24
 8001a08:	443b      	add	r3, r7
 8001a0a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4413      	add	r3, r2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff6b 	bl	80018fe <I2C_LCD_Send>
}
 8001a28:	bf00      	nop
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	08008174 	.word	0x08008174

08001a34 <I2C_LCD_WriteString>:

void I2C_LCD_WriteString(char *Str) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	//petlja se izvršava dok ne dođe do terminatora
	while (*Str) {
 8001a3c:	e007      	b.n	8001a4e <I2C_LCD_WriteString+0x1a>
		//šaljem znak po znak LCDU i pomijeram pointer na novi znak
		I2C_LCD_Send(*Str++,1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff58 	bl	80018fe <I2C_LCD_Send>
	while (*Str) {
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f3      	bne.n	8001a3e <I2C_LCD_WriteString+0xa>
	}
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <Delay_us>:

/* LCD functions END-------------------------------------------------------*/

/* MicroSeconds functions END--------------------------------------------------*/
void Delay_us(uint32_t us) {
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	uint32_t start = DWT->CYCCNT;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <Delay_us+0x40>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000000) * us; // Pretvara µs u CPU cikluse
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <Delay_us+0x44>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <Delay_us+0x48>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9a      	lsrs	r2, r3, #18
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	60bb      	str	r3, [r7, #8]
	while ((DWT->CYCCNT - start) < ticks)
 8001a82:	bf00      	nop
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <Delay_us+0x40>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d8f8      	bhi.n	8001a84 <Delay_us+0x24>
		;
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e0001000 	.word	0xe0001000
 8001aa4:	200002f0 	.word	0x200002f0
 8001aa8:	431bde83 	.word	0x431bde83

08001aac <DWT_Init>:

void DWT_Init(void) {
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Omogući DWT
 8001ab0:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <DWT_Init+0x2c>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a08      	ldr	r2, [pc, #32]	@ (8001ad8 <DWT_Init+0x2c>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aba:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;  // Reset counter
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <DWT_Init+0x30>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Omogući counter
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <DWT_Init+0x30>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <DWT_Init+0x30>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000edf0 	.word	0xe000edf0
 8001adc:	e0001000 	.word	0xe0001000

08001ae0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <Error_Handler+0x8>

08001aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a0f      	ldr	r2, [pc, #60]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a19      	ldr	r2, [pc, #100]	@ (8001bc0 <HAL_I2C_MspInit+0x84>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d12c      	bne.n	8001bb8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <HAL_I2C_MspInit+0x8c>)
 8001b98:	f000 fb7e 	bl	8002298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	4a07      	ldr	r2, [pc, #28]	@ (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001ba6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	@ 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020400 	.word	0x40020400

08001bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	@ 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <HAL_SPI_MspInit+0x84>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12b      	bne.n	8001c46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <HAL_SPI_MspInit+0x88>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <HAL_SPI_MspInit+0x88>)
 8001bf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <HAL_SPI_MspInit+0x88>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_SPI_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a10      	ldr	r2, [pc, #64]	@ (8001c54 <HAL_SPI_MspInit+0x88>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_SPI_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c26:	23e0      	movs	r3, #224	@ 0xe0
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c36:	2305      	movs	r3, #5
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <HAL_SPI_MspInit+0x8c>)
 8001c42:	f000 fb29 	bl	8002298 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	@ 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40013000 	.word	0x40013000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000

08001c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c6c:	d10d      	bne.n	8001c8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_TIM_Base_MspInit+0x3c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	@ (8001c98 <HAL_TIM_Base_MspInit+0x3c>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_TIM_Base_MspInit+0x3c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cbc:	d11d      	bne.n	8001cfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <HAL_TIM_MspPostInit+0x68>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d04 <HAL_TIM_MspPostInit+0x68>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_TIM_MspPostInit+0x68>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4804      	ldr	r0, [pc, #16]	@ (8001d08 <HAL_TIM_MspPostInit+0x6c>)
 8001cf6:	f000 facf 	bl	8002298 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000

08001d0c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1c:	d105      	bne.n	8001d2a <HAL_TIM_Base_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <NMI_Handler+0x4>

08001d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <MemManage_Handler+0x4>

08001d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 f957 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  return 1;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_kill>:

int _kill(int pid, int sig)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db4:	f003 fe5c 	bl	8005a70 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2216      	movs	r2, #22
 8001dbc:	601a      	str	r2, [r3, #0]
  return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_exit>:

void _exit (int status)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffe7 	bl	8001daa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <_exit+0x12>

08001de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e00a      	b.n	8001e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df2:	f3af 8000 	nop.w
 8001df6:	4601      	mov	r1, r0
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	b2ca      	uxtb	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbf0      	blt.n	8001df2 <_read+0x12>
  }

  return len;
 8001e10:	687b      	ldr	r3, [r7, #4]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e009      	b.n	8001e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf1      	blt.n	8001e2c <_write+0x12>
  }
  return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_close>:

int _close(int file)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_isatty>:

int _isatty(int file)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec4:	4a14      	ldr	r2, [pc, #80]	@ (8001f18 <_sbrk+0x5c>)
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <_sbrk+0x60>)
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <_sbrk+0x64>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <_sbrk+0x68>)
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d207      	bcs.n	8001efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eec:	f003 fdc0 	bl	8005a70 <__errno>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e009      	b.n	8001f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <_sbrk+0x64>)
 8001f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20020000 	.word	0x20020000
 8001f1c:	00000400 	.word	0x00000400
 8001f20:	200005f0 	.word	0x200005f0
 8001f24:	20000748 	.word	0x20000748

08001f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <SystemInit+0x20>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <SystemInit+0x20>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f50:	f7ff ffea 	bl	8001f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f003 fd7f 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7fe ffab 	bl	8000ed8 <main>
  bx  lr    
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	200004c4 	.word	0x200004c4
  ldr r2, =_sidata
 8001f90:	0800857c 	.word	0x0800857c
  ldr r2, =_sbss
 8001f94:	200004c4 	.word	0x200004c4
  ldr r4, =_ebss
 8001f98:	20000744 	.word	0x20000744

08001f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <HAL_Init+0x40>)
 8001faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_Init+0x40>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	@ (8001fe0 <HAL_Init+0x40>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 f931 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	200f      	movs	r0, #15
 8001fd0:	f000 f808 	bl	8001fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff fd8a 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023c00 	.word	0x40023c00

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_InitTick+0x54>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_InitTick+0x58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f93b 	bl	800227e <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e00e      	b.n	8002030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d80a      	bhi.n	800202e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002018:	2200      	movs	r2, #0
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f000 f911 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002024:	4a06      	ldr	r2, [pc, #24]	@ (8002040 <HAL_InitTick+0x5c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200002f0 	.word	0x200002f0
 800203c:	200002f8 	.word	0x200002f8
 8002040:	200002f4 	.word	0x200002f4

08002044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_IncTick+0x20>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_IncTick+0x24>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <HAL_IncTick+0x24>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200002f8 	.word	0x200002f8
 8002068:	200005f4 	.word	0x200005f4

0800206c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return uwTick;
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <HAL_GetTick+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200005f4 	.word	0x200005f4

08002084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800208c:	f7ff ffee 	bl	800206c <HAL_GetTick>
 8002090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d005      	beq.n	80020aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_Delay+0x44>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020aa:	bf00      	nop
 80020ac:	f7ff ffde 	bl	800206c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d8f7      	bhi.n	80020ac <HAL_Delay+0x28>
  {
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200002f8 	.word	0x200002f8

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	@ (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff47 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff5c 	bl	8002114 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ffb0 	bl	80021ec <SysTick_Config>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	@ 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e165      	b.n	8002580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8154 	bne.w	800257a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d005      	beq.n	80022ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d130      	bne.n	800234c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b03      	cmp	r3, #3
 8002356:	d017      	beq.n	8002388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80ae 	beq.w	800257a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b5d      	ldr	r3, [pc, #372]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	4a5c      	ldr	r2, [pc, #368]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242c:	6453      	str	r3, [r2, #68]	@ 0x44
 800242e:	4b5a      	ldr	r3, [pc, #360]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243a:	4a58      	ldr	r2, [pc, #352]	@ (800259c <HAL_GPIO_Init+0x304>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4f      	ldr	r2, [pc, #316]	@ (80025a0 <HAL_GPIO_Init+0x308>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x21a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4e      	ldr	r2, [pc, #312]	@ (80025a4 <HAL_GPIO_Init+0x30c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x216>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4d      	ldr	r2, [pc, #308]	@ (80025a8 <HAL_GPIO_Init+0x310>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x212>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4c      	ldr	r2, [pc, #304]	@ (80025ac <HAL_GPIO_Init+0x314>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x20e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4b      	ldr	r2, [pc, #300]	@ (80025b0 <HAL_GPIO_Init+0x318>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x20a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4a      	ldr	r2, [pc, #296]	@ (80025b4 <HAL_GPIO_Init+0x31c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x206>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a49      	ldr	r2, [pc, #292]	@ (80025b8 <HAL_GPIO_Init+0x320>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x202>
 8002496:	2306      	movs	r3, #6
 8002498:	e00c      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 800249a:	2307      	movs	r3, #7
 800249c:	e00a      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 800249e:	2305      	movs	r3, #5
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <HAL_GPIO_Init+0x324>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a31      	ldr	r2, [pc, #196]	@ (80025bc <HAL_GPIO_Init+0x324>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <HAL_GPIO_Init+0x324>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a26      	ldr	r2, [pc, #152]	@ (80025bc <HAL_GPIO_Init+0x324>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002526:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <HAL_GPIO_Init+0x324>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254a:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <HAL_GPIO_Init+0x324>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <HAL_GPIO_Init+0x324>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002574:	4a11      	ldr	r2, [pc, #68]	@ (80025bc <HAL_GPIO_Init+0x324>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f ae96 	bls.w	80022b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	@ 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40021400 	.word	0x40021400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e12b      	b.n	800285e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fa8e 	bl	8001b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	@ 0x24
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002658:	f000 fd5c 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 800265c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a81      	ldr	r2, [pc, #516]	@ (8002868 <HAL_I2C_Init+0x274>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d807      	bhi.n	8002678 <HAL_I2C_Init+0x84>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a80      	ldr	r2, [pc, #512]	@ (800286c <HAL_I2C_Init+0x278>)
 800266c:	4293      	cmp	r3, r2
 800266e:	bf94      	ite	ls
 8002670:	2301      	movls	r3, #1
 8002672:	2300      	movhi	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e006      	b.n	8002686 <HAL_I2C_Init+0x92>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a7d      	ldr	r2, [pc, #500]	@ (8002870 <HAL_I2C_Init+0x27c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	bf94      	ite	ls
 8002680:	2301      	movls	r3, #1
 8002682:	2300      	movhi	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0e7      	b.n	800285e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a78      	ldr	r2, [pc, #480]	@ (8002874 <HAL_I2C_Init+0x280>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0c9b      	lsrs	r3, r3, #18
 8002698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002868 <HAL_I2C_Init+0x274>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d802      	bhi.n	80026c8 <HAL_I2C_Init+0xd4>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3301      	adds	r3, #1
 80026c6:	e009      	b.n	80026dc <HAL_I2C_Init+0xe8>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	4a69      	ldr	r2, [pc, #420]	@ (8002878 <HAL_I2C_Init+0x284>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	3301      	adds	r3, #1
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	495c      	ldr	r1, [pc, #368]	@ (8002868 <HAL_I2C_Init+0x274>)
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d819      	bhi.n	8002730 <HAL_I2C_Init+0x13c>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1e59      	subs	r1, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fbb1 f3f3 	udiv	r3, r1, r3
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002710:	400b      	ands	r3, r1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_I2C_Init+0x138>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e59      	subs	r1, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fbb1 f3f3 	udiv	r3, r1, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272a:	e051      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 800272c:	2304      	movs	r3, #4
 800272e:	e04f      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <HAL_I2C_Init+0x168>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e58      	subs	r0, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e012      	b.n	8002782 <HAL_I2C_Init+0x18e>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e58      	subs	r0, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	0099      	lsls	r1, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Init+0x196>
 8002786:	2301      	movs	r3, #1
 8002788:	e022      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10e      	bne.n	80027b0 <HAL_I2C_Init+0x1bc>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e58      	subs	r0, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	440b      	add	r3, r1
 80027a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a4:	3301      	adds	r3, #1
 80027a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ae:	e00f      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	0099      	lsls	r1, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	6809      	ldr	r1, [r1, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6911      	ldr	r1, [r2, #16]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68d2      	ldr	r2, [r2, #12]
 800280a:	4311      	orrs	r1, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	000186a0 	.word	0x000186a0
 800286c:	001e847f 	.word	0x001e847f
 8002870:	003d08ff 	.word	0x003d08ff
 8002874:	431bde83 	.word	0x431bde83
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	461a      	mov	r2, r3
 8002888:	460b      	mov	r3, r1
 800288a:	817b      	strh	r3, [r7, #10]
 800288c:	4613      	mov	r3, r2
 800288e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff fbec 	bl	800206c <HAL_GetTick>
 8002894:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b20      	cmp	r3, #32
 80028a0:	f040 80e0 	bne.w	8002a64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2319      	movs	r3, #25
 80028aa:	2201      	movs	r2, #1
 80028ac:	4970      	ldr	r1, [pc, #448]	@ (8002a70 <HAL_I2C_Master_Transmit+0x1f4>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f964 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0d3      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_I2C_Master_Transmit+0x50>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0cc      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d007      	beq.n	80028f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002900:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2221      	movs	r2, #33	@ 0x21
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2210      	movs	r2, #16
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	893a      	ldrh	r2, [r7, #8]
 8002922:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a50      	ldr	r2, [pc, #320]	@ (8002a74 <HAL_I2C_Master_Transmit+0x1f8>)
 8002932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002934:	8979      	ldrh	r1, [r7, #10]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6a3a      	ldr	r2, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f89c 	bl	8002a78 <I2C_MasterRequestWrite>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e08d      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002960:	e066      	b.n	8002a30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	6a39      	ldr	r1, [r7, #32]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fa22 	bl	8002db0 <I2C_WaitOnTXEFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	2b04      	cmp	r3, #4
 8002978:	d107      	bne.n	800298a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002988:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d11b      	bne.n	8002a04 <HAL_I2C_Master_Transmit+0x188>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d017      	beq.n	8002a04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	6a39      	ldr	r1, [r7, #32]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fa19 	bl	8002e40 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d107      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e01a      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d194      	bne.n	8002962 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	00100002 	.word	0x00100002
 8002a74:	ffff0000 	.word	0xffff0000

08002a78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	460b      	mov	r3, r1
 8002a86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d006      	beq.n	8002aa2 <I2C_MasterRequestWrite+0x2a>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d003      	beq.n	8002aa2 <I2C_MasterRequestWrite+0x2a>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aa0:	d108      	bne.n	8002ab4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e00b      	b.n	8002acc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	d107      	bne.n	8002acc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f84f 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002af2:	d103      	bne.n	8002afc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e035      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b08:	d108      	bne.n	8002b1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b18:	611a      	str	r2, [r3, #16]
 8002b1a:	e01b      	b.n	8002b54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b1c:	897b      	ldrh	r3, [r7, #10]
 8002b1e:	11db      	asrs	r3, r3, #7
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0306 	and.w	r3, r3, #6
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f063 030f 	orn	r3, r3, #15
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	490e      	ldr	r1, [pc, #56]	@ (8002b74 <I2C_MasterRequestWrite+0xfc>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f898 	bl	8002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e010      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4907      	ldr	r1, [pc, #28]	@ (8002b78 <I2C_MasterRequestWrite+0x100>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f888 	bl	8002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	00010008 	.word	0x00010008
 8002b78:	00010002 	.word	0x00010002

08002b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8c:	e048      	b.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d044      	beq.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7ff fa69 	bl	800206c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d139      	bne.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0c1b      	lsrs	r3, r3, #16
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10d      	bne.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	e00c      	b.n	8002bec <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d116      	bne.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e023      	b.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	0c1b      	lsrs	r3, r3, #16
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10d      	bne.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	43da      	mvns	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4013      	ands	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	e00c      	b.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d093      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c7e:	e071      	b.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8e:	d123      	bne.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f043 0204 	orr.w	r2, r3, #4
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e067      	b.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d041      	beq.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7ff f9c4 	bl	800206c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d136      	bne.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10c      	bne.n	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf14      	ite	ne
 8002d12:	2301      	movne	r3, #1
 8002d14:	2300      	moveq	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e00b      	b.n	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	43da      	mvns	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4013      	ands	r3, r2
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e021      	b.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d10c      	bne.n	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	43da      	mvns	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e00b      	b.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4013      	ands	r3, r2
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bf14      	ite	ne
 8002d9a:	2301      	movne	r3, #1
 8002d9c:	2300      	moveq	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f47f af6d 	bne.w	8002c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f886 	bl	8002ed0 <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d028      	beq.n	8002e28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7ff f949 	bl	800206c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11d      	bne.n	8002e28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df6:	2b80      	cmp	r3, #128	@ 0x80
 8002df8:	d016      	beq.n	8002e28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e32:	2b80      	cmp	r3, #128	@ 0x80
 8002e34:	d1c3      	bne.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e4c:	e034      	b.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f83e 	bl	8002ed0 <I2C_IsAcknowledgeFailed>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e034      	b.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d028      	beq.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7ff f901 	bl	800206c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11d      	bne.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d016      	beq.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e007      	b.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d1c3      	bne.n	8002e4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee6:	d11b      	bne.n	8002f20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ef0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0cc      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b68      	ldr	r3, [pc, #416]	@ (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d90c      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b65      	ldr	r3, [pc, #404]	@ (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	@ (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a58      	ldr	r2, [pc, #352]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d044      	beq.n	8003050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d119      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	4b3f      	ldr	r3, [pc, #252]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e06f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e067      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300e:	4b37      	ldr	r3, [pc, #220]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4934      	ldr	r1, [pc, #208]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003020:	f7ff f824 	bl	800206c <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	e00a      	b.n	800303e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7ff f820 	bl	800206c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e04f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b2b      	ldr	r3, [pc, #172]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 020c 	and.w	r2, r3, #12
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1eb      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b25      	ldr	r3, [pc, #148]	@ (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d20c      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b22      	ldr	r3, [pc, #136]	@ (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a2:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f841 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe ff84 	bl	8001fe4 <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023c00 	.word	0x40023c00
 80030ec:	40023800 	.word	0x40023800
 80030f0:	08008188 	.word	0x08008188
 80030f4:	200002f0 	.word	0x200002f0
 80030f8:	200002f4 	.word	0x200002f4

080030fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b03      	ldr	r3, [pc, #12]	@ (8003110 <HAL_RCC_GetHCLKFreq+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200002f0 	.word	0x200002f0

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003118:	f7ff fff0 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0a9b      	lsrs	r3, r3, #10
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	@ (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08008198 	.word	0x08008198

0800313c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003140:	b0a6      	sub	sp, #152	@ 0x98
 8003142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003162:	4bc8      	ldr	r3, [pc, #800]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b0c      	cmp	r3, #12
 800316c:	f200 817e 	bhi.w	800346c <HAL_RCC_GetSysClockFreq+0x330>
 8003170:	a201      	add	r2, pc, #4	@ (adr r2, 8003178 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	080031ad 	.word	0x080031ad
 800317c:	0800346d 	.word	0x0800346d
 8003180:	0800346d 	.word	0x0800346d
 8003184:	0800346d 	.word	0x0800346d
 8003188:	080031b5 	.word	0x080031b5
 800318c:	0800346d 	.word	0x0800346d
 8003190:	0800346d 	.word	0x0800346d
 8003194:	0800346d 	.word	0x0800346d
 8003198:	080031bd 	.word	0x080031bd
 800319c:	0800346d 	.word	0x0800346d
 80031a0:	0800346d 	.word	0x0800346d
 80031a4:	0800346d 	.word	0x0800346d
 80031a8:	08003327 	.word	0x08003327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031ac:	4bb6      	ldr	r3, [pc, #728]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x34c>)
 80031ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80031b2:	e15f      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b4:	4bb5      	ldr	r3, [pc, #724]	@ (800348c <HAL_RCC_GetSysClockFreq+0x350>)
 80031b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80031ba:	e15b      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031bc:	4bb1      	ldr	r3, [pc, #708]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031c8:	4bae      	ldr	r3, [pc, #696]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d031      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d4:	4bab      	ldr	r3, [pc, #684]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	2200      	movs	r2, #0
 80031dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80031e8:	2300      	movs	r3, #0
 80031ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80031ec:	4ba7      	ldr	r3, [pc, #668]	@ (800348c <HAL_RCC_GetSysClockFreq+0x350>)
 80031ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80031f2:	462a      	mov	r2, r5
 80031f4:	fb03 f202 	mul.w	r2, r3, r2
 80031f8:	2300      	movs	r3, #0
 80031fa:	4621      	mov	r1, r4
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	4aa2      	ldr	r2, [pc, #648]	@ (800348c <HAL_RCC_GetSysClockFreq+0x350>)
 8003204:	4621      	mov	r1, r4
 8003206:	fba1 1202 	umull	r1, r2, r1, r2
 800320a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800320c:	460a      	mov	r2, r1
 800320e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003210:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003212:	4413      	add	r3, r2
 8003214:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800321a:	2200      	movs	r2, #0
 800321c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800321e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003220:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003224:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003228:	f7fd fcde 	bl	8000be8 <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003236:	e064      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003238:	4b92      	ldr	r3, [pc, #584]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	2200      	movs	r2, #0
 8003240:	653b      	str	r3, [r7, #80]	@ 0x50
 8003242:	657a      	str	r2, [r7, #84]	@ 0x54
 8003244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800324c:	2300      	movs	r3, #0
 800324e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003250:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003254:	4622      	mov	r2, r4
 8003256:	462b      	mov	r3, r5
 8003258:	f04f 0000 	mov.w	r0, #0
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	0159      	lsls	r1, r3, #5
 8003262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003266:	0150      	lsls	r0, r2, #5
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4621      	mov	r1, r4
 800326e:	1a51      	subs	r1, r2, r1
 8003270:	6139      	str	r1, [r7, #16]
 8003272:	4629      	mov	r1, r5
 8003274:	eb63 0301 	sbc.w	r3, r3, r1
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003286:	4659      	mov	r1, fp
 8003288:	018b      	lsls	r3, r1, #6
 800328a:	4651      	mov	r1, sl
 800328c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003290:	4651      	mov	r1, sl
 8003292:	018a      	lsls	r2, r1, #6
 8003294:	4651      	mov	r1, sl
 8003296:	ebb2 0801 	subs.w	r8, r2, r1
 800329a:	4659      	mov	r1, fp
 800329c:	eb63 0901 	sbc.w	r9, r3, r1
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b4:	4690      	mov	r8, r2
 80032b6:	4699      	mov	r9, r3
 80032b8:	4623      	mov	r3, r4
 80032ba:	eb18 0303 	adds.w	r3, r8, r3
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	462b      	mov	r3, r5
 80032c2:	eb49 0303 	adc.w	r3, r9, r3
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032d4:	4629      	mov	r1, r5
 80032d6:	028b      	lsls	r3, r1, #10
 80032d8:	4621      	mov	r1, r4
 80032da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032de:	4621      	mov	r1, r4
 80032e0:	028a      	lsls	r2, r1, #10
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ea:	2200      	movs	r2, #0
 80032ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80032f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032f4:	f7fd fc78 	bl	8000be8 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4613      	mov	r3, r2
 80032fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003302:	4b60      	ldr	r3, [pc, #384]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	3301      	adds	r3, #1
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003314:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003318:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003324:	e0a6      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003326:	4b57      	ldr	r3, [pc, #348]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800332e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003332:	4b54      	ldr	r3, [pc, #336]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d02a      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333e:	4b51      	ldr	r3, [pc, #324]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	2200      	movs	r2, #0
 8003346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003348:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800334a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003350:	2100      	movs	r1, #0
 8003352:	4b4e      	ldr	r3, [pc, #312]	@ (800348c <HAL_RCC_GetSysClockFreq+0x350>)
 8003354:	fb03 f201 	mul.w	r2, r3, r1
 8003358:	2300      	movs	r3, #0
 800335a:	fb00 f303 	mul.w	r3, r0, r3
 800335e:	4413      	add	r3, r2
 8003360:	4a4a      	ldr	r2, [pc, #296]	@ (800348c <HAL_RCC_GetSysClockFreq+0x350>)
 8003362:	fba0 1202 	umull	r1, r2, r0, r2
 8003366:	677a      	str	r2, [r7, #116]	@ 0x74
 8003368:	460a      	mov	r2, r1
 800336a:	673a      	str	r2, [r7, #112]	@ 0x70
 800336c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800336e:	4413      	add	r3, r2
 8003370:	677b      	str	r3, [r7, #116]	@ 0x74
 8003372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003376:	2200      	movs	r2, #0
 8003378:	633b      	str	r3, [r7, #48]	@ 0x30
 800337a:	637a      	str	r2, [r7, #52]	@ 0x34
 800337c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003380:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003384:	f7fd fc30 	bl	8000be8 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003392:	e05b      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003394:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	2200      	movs	r2, #0
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	2300      	movs	r3, #0
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033b0:	4642      	mov	r2, r8
 80033b2:	464b      	mov	r3, r9
 80033b4:	f04f 0000 	mov.w	r0, #0
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	0159      	lsls	r1, r3, #5
 80033be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c2:	0150      	lsls	r0, r2, #5
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4641      	mov	r1, r8
 80033ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80033ce:	4649      	mov	r1, r9
 80033d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033e8:	ebb2 040a 	subs.w	r4, r2, sl
 80033ec:	eb63 050b 	sbc.w	r5, r3, fp
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	00eb      	lsls	r3, r5, #3
 80033fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033fe:	00e2      	lsls	r2, r4, #3
 8003400:	4614      	mov	r4, r2
 8003402:	461d      	mov	r5, r3
 8003404:	4643      	mov	r3, r8
 8003406:	18e3      	adds	r3, r4, r3
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	464b      	mov	r3, r9
 800340c:	eb45 0303 	adc.w	r3, r5, r3
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800341e:	4629      	mov	r1, r5
 8003420:	028b      	lsls	r3, r1, #10
 8003422:	4621      	mov	r1, r4
 8003424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003428:	4621      	mov	r1, r4
 800342a:	028a      	lsls	r2, r1, #10
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003434:	2200      	movs	r2, #0
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	61fa      	str	r2, [r7, #28]
 800343a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800343e:	f7fd fbd3 	bl	8000be8 <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4613      	mov	r3, r2
 8003448:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800344c:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x348>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0f1b      	lsrs	r3, r3, #28
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800345a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800345e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800346a:	e003      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x34c>)
 800346e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003474:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003478:	4618      	mov	r0, r3
 800347a:	3798      	adds	r7, #152	@ 0x98
 800347c:	46bd      	mov	sp, r7
 800347e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400
 800348c:	017d7840 	.word	0x017d7840

08003490 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e28d      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8083 	beq.w	80035b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034b0:	4b94      	ldr	r3, [pc, #592]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d019      	beq.n	80034f0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034bc:	4b91      	ldr	r3, [pc, #580]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030c 	and.w	r3, r3, #12
        || \
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034d4:	d00c      	beq.n	80034f0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d112      	bne.n	8003508 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e2:	4b88      	ldr	r3, [pc, #544]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ee:	d10b      	bne.n	8003508 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	4b84      	ldr	r3, [pc, #528]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d05b      	beq.n	80035b4 <HAL_RCC_OscConfig+0x124>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d157      	bne.n	80035b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e25a      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003510:	d106      	bne.n	8003520 <HAL_RCC_OscConfig+0x90>
 8003512:	4b7c      	ldr	r3, [pc, #496]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7b      	ldr	r2, [pc, #492]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e01d      	b.n	800355c <HAL_RCC_OscConfig+0xcc>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0xb4>
 800352a:	4b76      	ldr	r3, [pc, #472]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a75      	ldr	r2, [pc, #468]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b73      	ldr	r3, [pc, #460]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a72      	ldr	r2, [pc, #456]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e00b      	b.n	800355c <HAL_RCC_OscConfig+0xcc>
 8003544:	4b6f      	ldr	r3, [pc, #444]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a6e      	ldr	r2, [pc, #440]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 800354a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b6c      	ldr	r3, [pc, #432]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6b      	ldr	r2, [pc, #428]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800355a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d013      	beq.n	800358c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fd82 	bl	800206c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356c:	f7fe fd7e 	bl	800206c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	@ 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e21f      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	4b61      	ldr	r3, [pc, #388]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0xdc>
 800358a:	e014      	b.n	80035b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe fd6e 	bl	800206c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fe fd6a 	bl	800206c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e20b      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	4b57      	ldr	r3, [pc, #348]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x104>
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d06f      	beq.n	80036a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035c2:	4b50      	ldr	r3, [pc, #320]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d017      	beq.n	80035fe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
        || \
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d105      	bne.n	80035e6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035da:	4b4a      	ldr	r3, [pc, #296]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e6:	4b47      	ldr	r3, [pc, #284]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d11c      	bne.n	800362c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f2:	4b44      	ldr	r3, [pc, #272]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d116      	bne.n	800362c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	4b41      	ldr	r3, [pc, #260]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_RCC_OscConfig+0x186>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e1d3      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b3b      	ldr	r3, [pc, #236]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4937      	ldr	r1, [pc, #220]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	e03a      	b.n	80036a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003634:	4b34      	ldr	r3, [pc, #208]	@ (8003708 <HAL_RCC_OscConfig+0x278>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fe fd17 	bl	800206c <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003642:	f7fe fd13 	bl	800206c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1b4      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	4b2b      	ldr	r3, [pc, #172]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4925      	ldr	r1, [pc, #148]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
 8003674:	e015      	b.n	80036a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003676:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <HAL_RCC_OscConfig+0x278>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe fcf6 	bl	800206c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003684:	f7fe fcf2 	bl	800206c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e193      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	4b1b      	ldr	r3, [pc, #108]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d036      	beq.n	800371c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d016      	beq.n	80036e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b6:	4b15      	ldr	r3, [pc, #84]	@ (800370c <HAL_RCC_OscConfig+0x27c>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fe fcd6 	bl	800206c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c4:	f7fe fcd2 	bl	800206c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e173      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_RCC_OscConfig+0x274>)
 80036d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x234>
 80036e2:	e01b      	b.n	800371c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e4:	4b09      	ldr	r3, [pc, #36]	@ (800370c <HAL_RCC_OscConfig+0x27c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fcbf 	bl	800206c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	e00e      	b.n	8003710 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe fcbb 	bl	800206c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d907      	bls.n	8003710 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e15c      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
 8003704:	40023800 	.word	0x40023800
 8003708:	42470000 	.word	0x42470000
 800370c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	4b8a      	ldr	r3, [pc, #552]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ea      	bne.n	80036f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8097 	beq.w	8003858 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372e:	4b83      	ldr	r3, [pc, #524]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	4b7f      	ldr	r3, [pc, #508]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	4a7e      	ldr	r2, [pc, #504]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003748:	6413      	str	r3, [r2, #64]	@ 0x40
 800374a:	4b7c      	ldr	r3, [pc, #496]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b79      	ldr	r3, [pc, #484]	@ (8003940 <HAL_RCC_OscConfig+0x4b0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d118      	bne.n	8003798 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003766:	4b76      	ldr	r3, [pc, #472]	@ (8003940 <HAL_RCC_OscConfig+0x4b0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a75      	ldr	r2, [pc, #468]	@ (8003940 <HAL_RCC_OscConfig+0x4b0>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7fe fc7b 	bl	800206c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377a:	f7fe fc77 	bl	800206c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e118      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <HAL_RCC_OscConfig+0x4b0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d106      	bne.n	80037ae <HAL_RCC_OscConfig+0x31e>
 80037a0:	4b66      	ldr	r3, [pc, #408]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a4:	4a65      	ldr	r2, [pc, #404]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ac:	e01c      	b.n	80037e8 <HAL_RCC_OscConfig+0x358>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x340>
 80037b6:	4b61      	ldr	r3, [pc, #388]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	4a60      	ldr	r2, [pc, #384]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c2:	4b5e      	ldr	r3, [pc, #376]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c6:	4a5d      	ldr	r2, [pc, #372]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ce:	e00b      	b.n	80037e8 <HAL_RCC_OscConfig+0x358>
 80037d0:	4b5a      	ldr	r3, [pc, #360]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	4a59      	ldr	r2, [pc, #356]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	@ 0x70
 80037dc:	4b57      	ldr	r3, [pc, #348]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e0:	4a56      	ldr	r2, [pc, #344]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	f023 0304 	bic.w	r3, r3, #4
 80037e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d015      	beq.n	800381c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fe fc3c 	bl	800206c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fe fc38 	bl	800206c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0d7      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380e:	4b4b      	ldr	r3, [pc, #300]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0ee      	beq.n	80037f8 <HAL_RCC_OscConfig+0x368>
 800381a:	e014      	b.n	8003846 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fe fc26 	bl	800206c <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003822:	e00a      	b.n	800383a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fe fc22 	bl	800206c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0c1      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383a:	4b40      	ldr	r3, [pc, #256]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ee      	bne.n	8003824 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384c:	4b3b      	ldr	r3, [pc, #236]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	4a3a      	ldr	r2, [pc, #232]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003856:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80ad 	beq.w	80039bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003862:	4b36      	ldr	r3, [pc, #216]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b08      	cmp	r3, #8
 800386c:	d060      	beq.n	8003930 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d145      	bne.n	8003902 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003876:	4b33      	ldr	r3, [pc, #204]	@ (8003944 <HAL_RCC_OscConfig+0x4b4>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe fbf6 	bl	800206c <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003884:	f7fe fbf2 	bl	800206c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e093      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	4b29      	ldr	r3, [pc, #164]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	3b01      	subs	r3, #1
 80038bc:	041b      	lsls	r3, r3, #16
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	491b      	ldr	r1, [pc, #108]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x4b4>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fe fbc7 	bl	800206c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fe fbc3 	bl	800206c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e064      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x452>
 8003900:	e05c      	b.n	80039bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_RCC_OscConfig+0x4b4>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fe fbb0 	bl	800206c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe fbac 	bl	800206c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04d      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCC_OscConfig+0x4ac>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x480>
 800392e:	e045      	b.n	80039bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e040      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
 800393c:	40023800 	.word	0x40023800
 8003940:	40007000 	.word	0x40007000
 8003944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003948:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <HAL_RCC_OscConfig+0x538>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d030      	beq.n	80039b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d129      	bne.n	80039b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d122      	bne.n	80039b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003978:	4013      	ands	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800397e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003980:	4293      	cmp	r3, r2
 8003982:	d119      	bne.n	80039b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	3b01      	subs	r3, #1
 8003992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d10f      	bne.n	80039b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800

080039cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07b      	b.n	8003ad6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ee:	d009      	beq.n	8003a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
 80039f6:	e005      	b.n	8003a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe f8d4 	bl	8001bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a88:	ea42 0103 	orr.w	r1, r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	f003 0104 	and.w	r1, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	f003 0210 	and.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b08a      	sub	sp, #40	@ 0x28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003aec:	2301      	movs	r3, #1
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af0:	f7fe fabc 	bl	800206c <HAL_GetTick>
 8003af4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003afc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b08:	7ffb      	ldrb	r3, [r7, #31]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d00c      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x4a>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b14:	d106      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x46>
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d001      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	e17f      	b.n	8003e28 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x5c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x5c>
 8003b34:	887b      	ldrh	r3, [r7, #2]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e174      	b.n	8003e28 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_SPI_TransmitReceive+0x6e>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e16d      	b.n	8003e28 <HAL_SPI_TransmitReceive+0x34a>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d003      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2205      	movs	r2, #5
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	887a      	ldrh	r2, [r7, #2]
 8003b7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	887a      	ldrh	r2, [r7, #2]
 8003b8a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b40      	cmp	r3, #64	@ 0x40
 8003baa:	d007      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc4:	d17e      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0xf6>
 8003bce:	8afb      	ldrh	r3, [r7, #22]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d16c      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf8:	e059      	b.n	8003cae <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d11b      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x162>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x162>
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d113      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d119      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x1a4>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d014      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c62:	b292      	uxth	r2, r2
 8003c64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6a:	1c9a      	adds	r2, r3, #2
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c82:	f7fe f9f3 	bl	800206c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d80d      	bhi.n	8003cae <HAL_SPI_TransmitReceive+0x1d0>
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d009      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e0bc      	b.n	8003e28 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1a0      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x11c>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d19b      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x11c>
 8003cc2:	e082      	b.n	8003dca <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_TransmitReceive+0x1f4>
 8003ccc:	8afb      	ldrh	r3, [r7, #22]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d171      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf8:	e05d      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d11c      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x264>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d017      	beq.n	8003d42 <HAL_SPI_TransmitReceive+0x264>
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d114      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d119      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x2a6>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d014      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d80:	2301      	movs	r3, #1
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d84:	f7fe f972 	bl	800206c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d803      	bhi.n	8003d9c <HAL_SPI_TransmitReceive+0x2be>
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d102      	bne.n	8003da2 <HAL_SPI_TransmitReceive+0x2c4>
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e038      	b.n	8003e28 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d19c      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x21c>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d197      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f8b6 	bl	8003f40 <SPI_EndRxTxTransaction>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e01d      	b.n	8003e28 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3728      	adds	r7, #40	@ 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e40:	f7fe f914 	bl	800206c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e50:	f7fe f90c 	bl	800206c <HAL_GetTick>
 8003e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	015b      	lsls	r3, r3, #5
 8003e5c:	0d1b      	lsrs	r3, r3, #20
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e66:	e054      	b.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d050      	beq.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e70:	f7fe f8fc 	bl	800206c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d902      	bls.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d13d      	bne.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e9e:	d111      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea8:	d004      	beq.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb2:	d107      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ecc:	d10f      	bne.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e017      	b.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d19b      	bne.n	8003e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200002f0 	.word	0x200002f0

08003f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2201      	movs	r2, #1
 8003f54:	2102      	movs	r1, #2
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff ff6a 	bl	8003e30 <SPI_WaitFlagStateUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f66:	f043 0220 	orr.w	r2, r3, #32
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e032      	b.n	8003fd8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <SPI_EndRxTxTransaction+0xa0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe4 <SPI_EndRxTxTransaction+0xa4>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	0d5b      	lsrs	r3, r3, #21
 8003f7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f90:	d112      	bne.n	8003fb8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2180      	movs	r1, #128	@ 0x80
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff ff47 	bl	8003e30 <SPI_WaitFlagStateUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d016      	beq.n	8003fd6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e00f      	b.n	8003fd8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	2b80      	cmp	r3, #128	@ 0x80
 8003fd0:	d0f2      	beq.n	8003fb8 <SPI_EndRxTxTransaction+0x78>
 8003fd2:	e000      	b.n	8003fd6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003fd4:	bf00      	nop
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200002f0 	.word	0x200002f0
 8003fe4:	165e9f81 	.word	0x165e9f81

08003fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e041      	b.n	800407e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd fe24 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f000 fb9c 	bl	8004764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <HAL_TIM_Base_DeInit+0x40>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d107      	bne.n	80040c6 <HAL_TIM_Base_DeInit+0x40>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd fe20 	bl	8001d0c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e041      	b.n	80041c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f839 	bl	80041cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3304      	adds	r3, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f000 faf9 	bl	8004764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_TIM_PWM_Start+0x24>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e022      	b.n	800424a <HAL_TIM_PWM_Start+0x6a>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d109      	bne.n	800421e <HAL_TIM_PWM_Start+0x3e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	bf14      	ite	ne
 8004216:	2301      	movne	r3, #1
 8004218:	2300      	moveq	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	e015      	b.n	800424a <HAL_TIM_PWM_Start+0x6a>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d109      	bne.n	8004238 <HAL_TIM_PWM_Start+0x58>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e008      	b.n	800424a <HAL_TIM_PWM_Start+0x6a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e07c      	b.n	800434c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <HAL_TIM_PWM_Start+0x82>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004260:	e013      	b.n	800428a <HAL_TIM_PWM_Start+0xaa>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Start+0x92>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004270:	e00b      	b.n	800428a <HAL_TIM_PWM_Start+0xaa>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d104      	bne.n	8004282 <HAL_TIM_PWM_Start+0xa2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004280:	e003      	b.n	800428a <HAL_TIM_PWM_Start+0xaa>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fd5c 	bl	8004d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2d      	ldr	r2, [pc, #180]	@ (8004354 <HAL_TIM_PWM_Start+0x174>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_TIM_PWM_Start+0xcc>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004358 <HAL_TIM_PWM_Start+0x178>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_TIM_PWM_Start+0xd0>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <HAL_TIM_PWM_Start+0xd2>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a22      	ldr	r2, [pc, #136]	@ (8004354 <HAL_TIM_PWM_Start+0x174>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d022      	beq.n	8004316 <HAL_TIM_PWM_Start+0x136>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d8:	d01d      	beq.n	8004316 <HAL_TIM_PWM_Start+0x136>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1f      	ldr	r2, [pc, #124]	@ (800435c <HAL_TIM_PWM_Start+0x17c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d018      	beq.n	8004316 <HAL_TIM_PWM_Start+0x136>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <HAL_TIM_PWM_Start+0x180>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_TIM_PWM_Start+0x136>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <HAL_TIM_PWM_Start+0x184>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00e      	beq.n	8004316 <HAL_TIM_PWM_Start+0x136>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a16      	ldr	r2, [pc, #88]	@ (8004358 <HAL_TIM_PWM_Start+0x178>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d009      	beq.n	8004316 <HAL_TIM_PWM_Start+0x136>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a18      	ldr	r2, [pc, #96]	@ (8004368 <HAL_TIM_PWM_Start+0x188>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <HAL_TIM_PWM_Start+0x136>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a16      	ldr	r2, [pc, #88]	@ (800436c <HAL_TIM_PWM_Start+0x18c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d111      	bne.n	800433a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b06      	cmp	r3, #6
 8004326:	d010      	beq.n	800434a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	e007      	b.n	800434a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40010000 	.word	0x40010000
 8004358:	40010400 	.word	0x40010400
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00
 8004368:	40014000 	.word	0x40014000
 800436c:	40001800 	.word	0x40001800

08004370 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fce4 	bl	8004d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2e      	ldr	r2, [pc, #184]	@ (8004448 <HAL_TIM_PWM_Stop+0xd8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIM_PWM_Stop+0x2c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2d      	ldr	r2, [pc, #180]	@ (800444c <HAL_TIM_PWM_Stop+0xdc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_TIM_PWM_Stop+0x30>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_TIM_PWM_Stop+0x32>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d017      	beq.n	80043d6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6a1a      	ldr	r2, [r3, #32]
 80043ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <HAL_TIM_PWM_Stop+0x66>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	f240 4344 	movw	r3, #1092	@ 0x444
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <HAL_TIM_PWM_Stop+0x66>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a1a      	ldr	r2, [r3, #32]
 80043dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <HAL_TIM_PWM_Stop+0x96>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <HAL_TIM_PWM_Stop+0x96>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Stop+0xa6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004414:	e013      	b.n	800443e <HAL_TIM_PWM_Stop+0xce>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Stop+0xb6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004424:	e00b      	b.n	800443e <HAL_TIM_PWM_Stop+0xce>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Stop+0xc6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004434:	e003      	b.n	800443e <HAL_TIM_PWM_Stop+0xce>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40010000 	.word	0x40010000
 800444c:	40010400 	.word	0x40010400

08004450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800446a:	2302      	movs	r3, #2
 800446c:	e0ae      	b.n	80045cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	f200 809f 	bhi.w	80045bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800447e:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080045bd 	.word	0x080045bd
 800448c:	080045bd 	.word	0x080045bd
 8004490:	080045bd 	.word	0x080045bd
 8004494:	080044f9 	.word	0x080044f9
 8004498:	080045bd 	.word	0x080045bd
 800449c:	080045bd 	.word	0x080045bd
 80044a0:	080045bd 	.word	0x080045bd
 80044a4:	0800453b 	.word	0x0800453b
 80044a8:	080045bd 	.word	0x080045bd
 80044ac:	080045bd 	.word	0x080045bd
 80044b0:	080045bd 	.word	0x080045bd
 80044b4:	0800457b 	.word	0x0800457b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f9fc 	bl	80048bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0208 	orr.w	r2, r2, #8
 80044d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0204 	bic.w	r2, r2, #4
 80044e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6999      	ldr	r1, [r3, #24]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	619a      	str	r2, [r3, #24]
      break;
 80044f6:	e064      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fa4c 	bl	800499c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6999      	ldr	r1, [r3, #24]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	021a      	lsls	r2, r3, #8
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	619a      	str	r2, [r3, #24]
      break;
 8004538:	e043      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 faa1 	bl	8004a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0208 	orr.w	r2, r2, #8
 8004554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0204 	bic.w	r2, r2, #4
 8004564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69d9      	ldr	r1, [r3, #28]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	61da      	str	r2, [r3, #28]
      break;
 8004578:	e023      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 faf5 	bl	8004b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69d9      	ldr	r1, [r3, #28]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	021a      	lsls	r2, r3, #8
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	61da      	str	r2, [r3, #28]
      break;
 80045ba:	e002      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
      break;
 80045c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_ConfigClockSource+0x1c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e0b4      	b.n	800475a <HAL_TIM_ConfigClockSource+0x186>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800460e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004628:	d03e      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0xd4>
 800462a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800462e:	f200 8087 	bhi.w	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004636:	f000 8086 	beq.w	8004746 <HAL_TIM_ConfigClockSource+0x172>
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463e:	d87f      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b70      	cmp	r3, #112	@ 0x70
 8004642:	d01a      	beq.n	800467a <HAL_TIM_ConfigClockSource+0xa6>
 8004644:	2b70      	cmp	r3, #112	@ 0x70
 8004646:	d87b      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b60      	cmp	r3, #96	@ 0x60
 800464a:	d050      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x11a>
 800464c:	2b60      	cmp	r3, #96	@ 0x60
 800464e:	d877      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b50      	cmp	r3, #80	@ 0x50
 8004652:	d03c      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0xfa>
 8004654:	2b50      	cmp	r3, #80	@ 0x50
 8004656:	d873      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	d058      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x13a>
 800465c:	2b40      	cmp	r3, #64	@ 0x40
 800465e:	d86f      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b30      	cmp	r3, #48	@ 0x30
 8004662:	d064      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x15a>
 8004664:	2b30      	cmp	r3, #48	@ 0x30
 8004666:	d86b      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d060      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x15a>
 800466c:	2b20      	cmp	r3, #32
 800466e:	d867      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05c      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x15a>
 8004674:	2b10      	cmp	r3, #16
 8004676:	d05a      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x15a>
 8004678:	e062      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800468a:	f000 fb41 	bl	8004d10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800469c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	609a      	str	r2, [r3, #8]
      break;
 80046a6:	e04f      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046b8:	f000 fb2a 	bl	8004d10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046ca:	609a      	str	r2, [r3, #8]
      break;
 80046cc:	e03c      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 fa9e 	bl	8004c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2150      	movs	r1, #80	@ 0x50
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 faf7 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 80046ec:	e02c      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fa:	461a      	mov	r2, r3
 80046fc:	f000 fabd 	bl	8004c7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2160      	movs	r1, #96	@ 0x60
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fae7 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 800470c:	e01c      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471a:	461a      	mov	r2, r3
 800471c:	f000 fa7e 	bl	8004c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2140      	movs	r1, #64	@ 0x40
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fad7 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 800472c:	e00c      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f000 face 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 800473e:	e003      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	e000      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a46      	ldr	r2, [pc, #280]	@ (8004890 <TIM_Base_SetConfig+0x12c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004782:	d00f      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a43      	ldr	r2, [pc, #268]	@ (8004894 <TIM_Base_SetConfig+0x130>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a42      	ldr	r2, [pc, #264]	@ (8004898 <TIM_Base_SetConfig+0x134>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a41      	ldr	r2, [pc, #260]	@ (800489c <TIM_Base_SetConfig+0x138>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a40      	ldr	r2, [pc, #256]	@ (80048a0 <TIM_Base_SetConfig+0x13c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a35      	ldr	r2, [pc, #212]	@ (8004890 <TIM_Base_SetConfig+0x12c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d02b      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d027      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a32      	ldr	r2, [pc, #200]	@ (8004894 <TIM_Base_SetConfig+0x130>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d023      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a31      	ldr	r2, [pc, #196]	@ (8004898 <TIM_Base_SetConfig+0x134>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01f      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a30      	ldr	r2, [pc, #192]	@ (800489c <TIM_Base_SetConfig+0x138>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01b      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2f      	ldr	r2, [pc, #188]	@ (80048a0 <TIM_Base_SetConfig+0x13c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d017      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2e      	ldr	r2, [pc, #184]	@ (80048a4 <TIM_Base_SetConfig+0x140>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	@ (80048a8 <TIM_Base_SetConfig+0x144>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2c      	ldr	r2, [pc, #176]	@ (80048ac <TIM_Base_SetConfig+0x148>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2b      	ldr	r2, [pc, #172]	@ (80048b0 <TIM_Base_SetConfig+0x14c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2a      	ldr	r2, [pc, #168]	@ (80048b4 <TIM_Base_SetConfig+0x150>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a29      	ldr	r2, [pc, #164]	@ (80048b8 <TIM_Base_SetConfig+0x154>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d108      	bne.n	8004828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a10      	ldr	r2, [pc, #64]	@ (8004890 <TIM_Base_SetConfig+0x12c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_Base_SetConfig+0xf8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a12      	ldr	r2, [pc, #72]	@ (80048a0 <TIM_Base_SetConfig+0x13c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d103      	bne.n	8004864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b01      	cmp	r3, #1
 8004874:	d105      	bne.n	8004882 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	611a      	str	r2, [r3, #16]
  }
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	40001800 	.word	0x40001800
 80048b4:	40001c00 	.word	0x40001c00
 80048b8:	40002000 	.word	0x40002000

080048bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f023 0201 	bic.w	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0303 	bic.w	r3, r3, #3
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 0302 	bic.w	r3, r3, #2
 8004904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a20      	ldr	r2, [pc, #128]	@ (8004994 <TIM_OC1_SetConfig+0xd8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC1_SetConfig+0x64>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1f      	ldr	r2, [pc, #124]	@ (8004998 <TIM_OC1_SetConfig+0xdc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10c      	bne.n	800493a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0308 	bic.w	r3, r3, #8
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a15      	ldr	r2, [pc, #84]	@ (8004994 <TIM_OC1_SetConfig+0xd8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_OC1_SetConfig+0x8e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a14      	ldr	r2, [pc, #80]	@ (8004998 <TIM_OC1_SetConfig+0xdc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d111      	bne.n	800496e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	621a      	str	r2, [r3, #32]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40010000 	.word	0x40010000
 8004998:	40010400 	.word	0x40010400

0800499c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f023 0210 	bic.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0320 	bic.w	r3, r3, #32
 80049e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a22      	ldr	r2, [pc, #136]	@ (8004a80 <TIM_OC2_SetConfig+0xe4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_OC2_SetConfig+0x68>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a21      	ldr	r2, [pc, #132]	@ (8004a84 <TIM_OC2_SetConfig+0xe8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10d      	bne.n	8004a20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a17      	ldr	r2, [pc, #92]	@ (8004a80 <TIM_OC2_SetConfig+0xe4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_OC2_SetConfig+0x94>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <TIM_OC2_SetConfig+0xe8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d113      	bne.n	8004a58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010400 	.word	0x40010400

08004a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0303 	bic.w	r3, r3, #3
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a21      	ldr	r2, [pc, #132]	@ (8004b68 <TIM_OC3_SetConfig+0xe0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <TIM_OC3_SetConfig+0x66>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	@ (8004b6c <TIM_OC3_SetConfig+0xe4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d10d      	bne.n	8004b0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a16      	ldr	r2, [pc, #88]	@ (8004b68 <TIM_OC3_SetConfig+0xe0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_OC3_SetConfig+0x92>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a15      	ldr	r2, [pc, #84]	@ (8004b6c <TIM_OC3_SetConfig+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d113      	bne.n	8004b42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	621a      	str	r2, [r3, #32]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40010400 	.word	0x40010400

08004b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	031b      	lsls	r3, r3, #12
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a12      	ldr	r2, [pc, #72]	@ (8004c14 <TIM_OC4_SetConfig+0xa4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_OC4_SetConfig+0x68>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a11      	ldr	r2, [pc, #68]	@ (8004c18 <TIM_OC4_SetConfig+0xa8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d109      	bne.n	8004bec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	019b      	lsls	r3, r3, #6
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40010400 	.word	0x40010400

08004c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f023 0201 	bic.w	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 030a 	bic.w	r3, r3, #10
 8004c58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f023 0210 	bic.w	r2, r3, #16
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	031b      	lsls	r3, r3, #12
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f043 0307 	orr.w	r3, r3, #7
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	609a      	str	r2, [r3, #8]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	021a      	lsls	r2, r3, #8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2201      	movs	r2, #1
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	43db      	mvns	r3, r3
 8004d72:	401a      	ands	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e05a      	b.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a21      	ldr	r2, [pc, #132]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e00:	d01d      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a18      	ldr	r2, [pc, #96]	@ (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a17      	ldr	r2, [pc, #92]	@ (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a15      	ldr	r2, [pc, #84]	@ (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10c      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40001800 	.word	0x40001800

08004e94 <rand>:
 8004e94:	4b16      	ldr	r3, [pc, #88]	@ (8004ef0 <rand+0x5c>)
 8004e96:	b510      	push	{r4, lr}
 8004e98:	681c      	ldr	r4, [r3, #0]
 8004e9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e9c:	b9b3      	cbnz	r3, 8004ecc <rand+0x38>
 8004e9e:	2018      	movs	r0, #24
 8004ea0:	f001 fcc8 	bl	8006834 <malloc>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6320      	str	r0, [r4, #48]	@ 0x30
 8004ea8:	b920      	cbnz	r0, 8004eb4 <rand+0x20>
 8004eaa:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <rand+0x60>)
 8004eac:	4812      	ldr	r0, [pc, #72]	@ (8004ef8 <rand+0x64>)
 8004eae:	2152      	movs	r1, #82	@ 0x52
 8004eb0:	f000 fe0c 	bl	8005acc <__assert_func>
 8004eb4:	4911      	ldr	r1, [pc, #68]	@ (8004efc <rand+0x68>)
 8004eb6:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <rand+0x6c>)
 8004eb8:	e9c0 1300 	strd	r1, r3, [r0]
 8004ebc:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <rand+0x70>)
 8004ebe:	6083      	str	r3, [r0, #8]
 8004ec0:	230b      	movs	r3, #11
 8004ec2:	8183      	strh	r3, [r0, #12]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ecc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ece:	480e      	ldr	r0, [pc, #56]	@ (8004f08 <rand+0x74>)
 8004ed0:	690b      	ldr	r3, [r1, #16]
 8004ed2:	694c      	ldr	r4, [r1, #20]
 8004ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8004f0c <rand+0x78>)
 8004ed6:	4358      	muls	r0, r3
 8004ed8:	fb02 0004 	mla	r0, r2, r4, r0
 8004edc:	fba3 3202 	umull	r3, r2, r3, r2
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	eb40 0002 	adc.w	r0, r0, r2
 8004ee6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004eea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004eee:	bd10      	pop	{r4, pc}
 8004ef0:	20000308 	.word	0x20000308
 8004ef4:	080081a0 	.word	0x080081a0
 8004ef8:	080081b7 	.word	0x080081b7
 8004efc:	abcd330e 	.word	0xabcd330e
 8004f00:	e66d1234 	.word	0xe66d1234
 8004f04:	0005deec 	.word	0x0005deec
 8004f08:	5851f42d 	.word	0x5851f42d
 8004f0c:	4c957f2d 	.word	0x4c957f2d

08004f10 <__cvt>:
 8004f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	ec57 6b10 	vmov	r6, r7, d0
 8004f18:	2f00      	cmp	r7, #0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	463b      	mov	r3, r7
 8004f20:	bfbb      	ittet	lt
 8004f22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f26:	461f      	movlt	r7, r3
 8004f28:	2300      	movge	r3, #0
 8004f2a:	232d      	movlt	r3, #45	@ 0x2d
 8004f2c:	700b      	strb	r3, [r1, #0]
 8004f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f34:	4691      	mov	r9, r2
 8004f36:	f023 0820 	bic.w	r8, r3, #32
 8004f3a:	bfbc      	itt	lt
 8004f3c:	4632      	movlt	r2, r6
 8004f3e:	4616      	movlt	r6, r2
 8004f40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f44:	d005      	beq.n	8004f52 <__cvt+0x42>
 8004f46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f4a:	d100      	bne.n	8004f4e <__cvt+0x3e>
 8004f4c:	3401      	adds	r4, #1
 8004f4e:	2102      	movs	r1, #2
 8004f50:	e000      	b.n	8004f54 <__cvt+0x44>
 8004f52:	2103      	movs	r1, #3
 8004f54:	ab03      	add	r3, sp, #12
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	ab02      	add	r3, sp, #8
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	ec47 6b10 	vmov	d0, r6, r7
 8004f60:	4653      	mov	r3, sl
 8004f62:	4622      	mov	r2, r4
 8004f64:	f000 fe58 	bl	8005c18 <_dtoa_r>
 8004f68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	d119      	bne.n	8004fa4 <__cvt+0x94>
 8004f70:	f019 0f01 	tst.w	r9, #1
 8004f74:	d00e      	beq.n	8004f94 <__cvt+0x84>
 8004f76:	eb00 0904 	add.w	r9, r0, r4
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4630      	mov	r0, r6
 8004f80:	4639      	mov	r1, r7
 8004f82:	f7fb fdc1 	bl	8000b08 <__aeabi_dcmpeq>
 8004f86:	b108      	cbz	r0, 8004f8c <__cvt+0x7c>
 8004f88:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f8c:	2230      	movs	r2, #48	@ 0x30
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	454b      	cmp	r3, r9
 8004f92:	d31e      	bcc.n	8004fd2 <__cvt+0xc2>
 8004f94:	9b03      	ldr	r3, [sp, #12]
 8004f96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f98:	1b5b      	subs	r3, r3, r5
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	b004      	add	sp, #16
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fa8:	eb00 0904 	add.w	r9, r0, r4
 8004fac:	d1e5      	bne.n	8004f7a <__cvt+0x6a>
 8004fae:	7803      	ldrb	r3, [r0, #0]
 8004fb0:	2b30      	cmp	r3, #48	@ 0x30
 8004fb2:	d10a      	bne.n	8004fca <__cvt+0xba>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f7fb fda4 	bl	8000b08 <__aeabi_dcmpeq>
 8004fc0:	b918      	cbnz	r0, 8004fca <__cvt+0xba>
 8004fc2:	f1c4 0401 	rsb	r4, r4, #1
 8004fc6:	f8ca 4000 	str.w	r4, [sl]
 8004fca:	f8da 3000 	ldr.w	r3, [sl]
 8004fce:	4499      	add	r9, r3
 8004fd0:	e7d3      	b.n	8004f7a <__cvt+0x6a>
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	9103      	str	r1, [sp, #12]
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	e7d9      	b.n	8004f8e <__cvt+0x7e>

08004fda <__exponent>:
 8004fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	bfba      	itte	lt
 8004fe0:	4249      	neglt	r1, r1
 8004fe2:	232d      	movlt	r3, #45	@ 0x2d
 8004fe4:	232b      	movge	r3, #43	@ 0x2b
 8004fe6:	2909      	cmp	r1, #9
 8004fe8:	7002      	strb	r2, [r0, #0]
 8004fea:	7043      	strb	r3, [r0, #1]
 8004fec:	dd29      	ble.n	8005042 <__exponent+0x68>
 8004fee:	f10d 0307 	add.w	r3, sp, #7
 8004ff2:	461d      	mov	r5, r3
 8004ff4:	270a      	movs	r7, #10
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ffc:	fb07 1416 	mls	r4, r7, r6, r1
 8005000:	3430      	adds	r4, #48	@ 0x30
 8005002:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005006:	460c      	mov	r4, r1
 8005008:	2c63      	cmp	r4, #99	@ 0x63
 800500a:	f103 33ff 	add.w	r3, r3, #4294967295
 800500e:	4631      	mov	r1, r6
 8005010:	dcf1      	bgt.n	8004ff6 <__exponent+0x1c>
 8005012:	3130      	adds	r1, #48	@ 0x30
 8005014:	1e94      	subs	r4, r2, #2
 8005016:	f803 1c01 	strb.w	r1, [r3, #-1]
 800501a:	1c41      	adds	r1, r0, #1
 800501c:	4623      	mov	r3, r4
 800501e:	42ab      	cmp	r3, r5
 8005020:	d30a      	bcc.n	8005038 <__exponent+0x5e>
 8005022:	f10d 0309 	add.w	r3, sp, #9
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	42ac      	cmp	r4, r5
 800502a:	bf88      	it	hi
 800502c:	2300      	movhi	r3, #0
 800502e:	3302      	adds	r3, #2
 8005030:	4403      	add	r3, r0
 8005032:	1a18      	subs	r0, r3, r0
 8005034:	b003      	add	sp, #12
 8005036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005038:	f813 6b01 	ldrb.w	r6, [r3], #1
 800503c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005040:	e7ed      	b.n	800501e <__exponent+0x44>
 8005042:	2330      	movs	r3, #48	@ 0x30
 8005044:	3130      	adds	r1, #48	@ 0x30
 8005046:	7083      	strb	r3, [r0, #2]
 8005048:	70c1      	strb	r1, [r0, #3]
 800504a:	1d03      	adds	r3, r0, #4
 800504c:	e7f1      	b.n	8005032 <__exponent+0x58>
	...

08005050 <_printf_float>:
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	b08d      	sub	sp, #52	@ 0x34
 8005056:	460c      	mov	r4, r1
 8005058:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800505c:	4616      	mov	r6, r2
 800505e:	461f      	mov	r7, r3
 8005060:	4605      	mov	r5, r0
 8005062:	f000 fcbb 	bl	80059dc <_localeconv_r>
 8005066:	6803      	ldr	r3, [r0, #0]
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb f920 	bl	80002b0 <strlen>
 8005070:	2300      	movs	r3, #0
 8005072:	930a      	str	r3, [sp, #40]	@ 0x28
 8005074:	f8d8 3000 	ldr.w	r3, [r8]
 8005078:	9005      	str	r0, [sp, #20]
 800507a:	3307      	adds	r3, #7
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	f103 0208 	add.w	r2, r3, #8
 8005084:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005088:	f8d4 b000 	ldr.w	fp, [r4]
 800508c:	f8c8 2000 	str.w	r2, [r8]
 8005090:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005094:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005098:	9307      	str	r3, [sp, #28]
 800509a:	f8cd 8018 	str.w	r8, [sp, #24]
 800509e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005318 <_printf_float+0x2c8>)
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	f7fb fd5e 	bl	8000b6c <__aeabi_dcmpun>
 80050b0:	bb70      	cbnz	r0, 8005110 <_printf_float+0xc0>
 80050b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050b6:	4b98      	ldr	r3, [pc, #608]	@ (8005318 <_printf_float+0x2c8>)
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	f7fb fd38 	bl	8000b30 <__aeabi_dcmple>
 80050c0:	bb30      	cbnz	r0, 8005110 <_printf_float+0xc0>
 80050c2:	2200      	movs	r2, #0
 80050c4:	2300      	movs	r3, #0
 80050c6:	4640      	mov	r0, r8
 80050c8:	4649      	mov	r1, r9
 80050ca:	f7fb fd27 	bl	8000b1c <__aeabi_dcmplt>
 80050ce:	b110      	cbz	r0, 80050d6 <_printf_float+0x86>
 80050d0:	232d      	movs	r3, #45	@ 0x2d
 80050d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d6:	4a91      	ldr	r2, [pc, #580]	@ (800531c <_printf_float+0x2cc>)
 80050d8:	4b91      	ldr	r3, [pc, #580]	@ (8005320 <_printf_float+0x2d0>)
 80050da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050de:	bf94      	ite	ls
 80050e0:	4690      	movls	r8, r2
 80050e2:	4698      	movhi	r8, r3
 80050e4:	2303      	movs	r3, #3
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	f02b 0304 	bic.w	r3, fp, #4
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	f04f 0900 	mov.w	r9, #0
 80050f2:	9700      	str	r7, [sp, #0]
 80050f4:	4633      	mov	r3, r6
 80050f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 f9d2 	bl	80054a4 <_printf_common>
 8005100:	3001      	adds	r0, #1
 8005102:	f040 808d 	bne.w	8005220 <_printf_float+0x1d0>
 8005106:	f04f 30ff 	mov.w	r0, #4294967295
 800510a:	b00d      	add	sp, #52	@ 0x34
 800510c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005110:	4642      	mov	r2, r8
 8005112:	464b      	mov	r3, r9
 8005114:	4640      	mov	r0, r8
 8005116:	4649      	mov	r1, r9
 8005118:	f7fb fd28 	bl	8000b6c <__aeabi_dcmpun>
 800511c:	b140      	cbz	r0, 8005130 <_printf_float+0xe0>
 800511e:	464b      	mov	r3, r9
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfbc      	itt	lt
 8005124:	232d      	movlt	r3, #45	@ 0x2d
 8005126:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800512a:	4a7e      	ldr	r2, [pc, #504]	@ (8005324 <_printf_float+0x2d4>)
 800512c:	4b7e      	ldr	r3, [pc, #504]	@ (8005328 <_printf_float+0x2d8>)
 800512e:	e7d4      	b.n	80050da <_printf_float+0x8a>
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005136:	9206      	str	r2, [sp, #24]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	d13b      	bne.n	80051b4 <_printf_float+0x164>
 800513c:	2306      	movs	r3, #6
 800513e:	6063      	str	r3, [r4, #4]
 8005140:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005144:	2300      	movs	r3, #0
 8005146:	6022      	str	r2, [r4, #0]
 8005148:	9303      	str	r3, [sp, #12]
 800514a:	ab0a      	add	r3, sp, #40	@ 0x28
 800514c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005150:	ab09      	add	r3, sp, #36	@ 0x24
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	6861      	ldr	r1, [r4, #4]
 8005156:	ec49 8b10 	vmov	d0, r8, r9
 800515a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800515e:	4628      	mov	r0, r5
 8005160:	f7ff fed6 	bl	8004f10 <__cvt>
 8005164:	9b06      	ldr	r3, [sp, #24]
 8005166:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005168:	2b47      	cmp	r3, #71	@ 0x47
 800516a:	4680      	mov	r8, r0
 800516c:	d129      	bne.n	80051c2 <_printf_float+0x172>
 800516e:	1cc8      	adds	r0, r1, #3
 8005170:	db02      	blt.n	8005178 <_printf_float+0x128>
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	4299      	cmp	r1, r3
 8005176:	dd41      	ble.n	80051fc <_printf_float+0x1ac>
 8005178:	f1aa 0a02 	sub.w	sl, sl, #2
 800517c:	fa5f fa8a 	uxtb.w	sl, sl
 8005180:	3901      	subs	r1, #1
 8005182:	4652      	mov	r2, sl
 8005184:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005188:	9109      	str	r1, [sp, #36]	@ 0x24
 800518a:	f7ff ff26 	bl	8004fda <__exponent>
 800518e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005190:	1813      	adds	r3, r2, r0
 8005192:	2a01      	cmp	r2, #1
 8005194:	4681      	mov	r9, r0
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	dc02      	bgt.n	80051a0 <_printf_float+0x150>
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	07d2      	lsls	r2, r2, #31
 800519e:	d501      	bpl.n	80051a4 <_printf_float+0x154>
 80051a0:	3301      	adds	r3, #1
 80051a2:	6123      	str	r3, [r4, #16]
 80051a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0a2      	beq.n	80050f2 <_printf_float+0xa2>
 80051ac:	232d      	movs	r3, #45	@ 0x2d
 80051ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b2:	e79e      	b.n	80050f2 <_printf_float+0xa2>
 80051b4:	9a06      	ldr	r2, [sp, #24]
 80051b6:	2a47      	cmp	r2, #71	@ 0x47
 80051b8:	d1c2      	bne.n	8005140 <_printf_float+0xf0>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1c0      	bne.n	8005140 <_printf_float+0xf0>
 80051be:	2301      	movs	r3, #1
 80051c0:	e7bd      	b.n	800513e <_printf_float+0xee>
 80051c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051c6:	d9db      	bls.n	8005180 <_printf_float+0x130>
 80051c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051cc:	d118      	bne.n	8005200 <_printf_float+0x1b0>
 80051ce:	2900      	cmp	r1, #0
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	dd0b      	ble.n	80051ec <_printf_float+0x19c>
 80051d4:	6121      	str	r1, [r4, #16]
 80051d6:	b913      	cbnz	r3, 80051de <_printf_float+0x18e>
 80051d8:	6822      	ldr	r2, [r4, #0]
 80051da:	07d0      	lsls	r0, r2, #31
 80051dc:	d502      	bpl.n	80051e4 <_printf_float+0x194>
 80051de:	3301      	adds	r3, #1
 80051e0:	440b      	add	r3, r1
 80051e2:	6123      	str	r3, [r4, #16]
 80051e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051e6:	f04f 0900 	mov.w	r9, #0
 80051ea:	e7db      	b.n	80051a4 <_printf_float+0x154>
 80051ec:	b913      	cbnz	r3, 80051f4 <_printf_float+0x1a4>
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	07d2      	lsls	r2, r2, #31
 80051f2:	d501      	bpl.n	80051f8 <_printf_float+0x1a8>
 80051f4:	3302      	adds	r3, #2
 80051f6:	e7f4      	b.n	80051e2 <_printf_float+0x192>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e7f2      	b.n	80051e2 <_printf_float+0x192>
 80051fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005202:	4299      	cmp	r1, r3
 8005204:	db05      	blt.n	8005212 <_printf_float+0x1c2>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	6121      	str	r1, [r4, #16]
 800520a:	07d8      	lsls	r0, r3, #31
 800520c:	d5ea      	bpl.n	80051e4 <_printf_float+0x194>
 800520e:	1c4b      	adds	r3, r1, #1
 8005210:	e7e7      	b.n	80051e2 <_printf_float+0x192>
 8005212:	2900      	cmp	r1, #0
 8005214:	bfd4      	ite	le
 8005216:	f1c1 0202 	rsble	r2, r1, #2
 800521a:	2201      	movgt	r2, #1
 800521c:	4413      	add	r3, r2
 800521e:	e7e0      	b.n	80051e2 <_printf_float+0x192>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	055a      	lsls	r2, r3, #21
 8005224:	d407      	bmi.n	8005236 <_printf_float+0x1e6>
 8005226:	6923      	ldr	r3, [r4, #16]
 8005228:	4642      	mov	r2, r8
 800522a:	4631      	mov	r1, r6
 800522c:	4628      	mov	r0, r5
 800522e:	47b8      	blx	r7
 8005230:	3001      	adds	r0, #1
 8005232:	d12b      	bne.n	800528c <_printf_float+0x23c>
 8005234:	e767      	b.n	8005106 <_printf_float+0xb6>
 8005236:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800523a:	f240 80dd 	bls.w	80053f8 <_printf_float+0x3a8>
 800523e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005242:	2200      	movs	r2, #0
 8005244:	2300      	movs	r3, #0
 8005246:	f7fb fc5f 	bl	8000b08 <__aeabi_dcmpeq>
 800524a:	2800      	cmp	r0, #0
 800524c:	d033      	beq.n	80052b6 <_printf_float+0x266>
 800524e:	4a37      	ldr	r2, [pc, #220]	@ (800532c <_printf_float+0x2dc>)
 8005250:	2301      	movs	r3, #1
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	47b8      	blx	r7
 8005258:	3001      	adds	r0, #1
 800525a:	f43f af54 	beq.w	8005106 <_printf_float+0xb6>
 800525e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005262:	4543      	cmp	r3, r8
 8005264:	db02      	blt.n	800526c <_printf_float+0x21c>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	07d8      	lsls	r0, r3, #31
 800526a:	d50f      	bpl.n	800528c <_printf_float+0x23c>
 800526c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f af45 	beq.w	8005106 <_printf_float+0xb6>
 800527c:	f04f 0900 	mov.w	r9, #0
 8005280:	f108 38ff 	add.w	r8, r8, #4294967295
 8005284:	f104 0a1a 	add.w	sl, r4, #26
 8005288:	45c8      	cmp	r8, r9
 800528a:	dc09      	bgt.n	80052a0 <_printf_float+0x250>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	079b      	lsls	r3, r3, #30
 8005290:	f100 8103 	bmi.w	800549a <_printf_float+0x44a>
 8005294:	68e0      	ldr	r0, [r4, #12]
 8005296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005298:	4298      	cmp	r0, r3
 800529a:	bfb8      	it	lt
 800529c:	4618      	movlt	r0, r3
 800529e:	e734      	b.n	800510a <_printf_float+0xba>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4652      	mov	r2, sl
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f af2b 	beq.w	8005106 <_printf_float+0xb6>
 80052b0:	f109 0901 	add.w	r9, r9, #1
 80052b4:	e7e8      	b.n	8005288 <_printf_float+0x238>
 80052b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dc39      	bgt.n	8005330 <_printf_float+0x2e0>
 80052bc:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <_printf_float+0x2dc>)
 80052be:	2301      	movs	r3, #1
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af1d 	beq.w	8005106 <_printf_float+0xb6>
 80052cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052d0:	ea59 0303 	orrs.w	r3, r9, r3
 80052d4:	d102      	bne.n	80052dc <_printf_float+0x28c>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	07d9      	lsls	r1, r3, #31
 80052da:	d5d7      	bpl.n	800528c <_printf_float+0x23c>
 80052dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f af0d 	beq.w	8005106 <_printf_float+0xb6>
 80052ec:	f04f 0a00 	mov.w	sl, #0
 80052f0:	f104 0b1a 	add.w	fp, r4, #26
 80052f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f6:	425b      	negs	r3, r3
 80052f8:	4553      	cmp	r3, sl
 80052fa:	dc01      	bgt.n	8005300 <_printf_float+0x2b0>
 80052fc:	464b      	mov	r3, r9
 80052fe:	e793      	b.n	8005228 <_printf_float+0x1d8>
 8005300:	2301      	movs	r3, #1
 8005302:	465a      	mov	r2, fp
 8005304:	4631      	mov	r1, r6
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	f43f aefb 	beq.w	8005106 <_printf_float+0xb6>
 8005310:	f10a 0a01 	add.w	sl, sl, #1
 8005314:	e7ee      	b.n	80052f4 <_printf_float+0x2a4>
 8005316:	bf00      	nop
 8005318:	7fefffff 	.word	0x7fefffff
 800531c:	0800820f 	.word	0x0800820f
 8005320:	08008213 	.word	0x08008213
 8005324:	08008217 	.word	0x08008217
 8005328:	0800821b 	.word	0x0800821b
 800532c:	0800821f 	.word	0x0800821f
 8005330:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005332:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005336:	4553      	cmp	r3, sl
 8005338:	bfa8      	it	ge
 800533a:	4653      	movge	r3, sl
 800533c:	2b00      	cmp	r3, #0
 800533e:	4699      	mov	r9, r3
 8005340:	dc36      	bgt.n	80053b0 <_printf_float+0x360>
 8005342:	f04f 0b00 	mov.w	fp, #0
 8005346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800534a:	f104 021a 	add.w	r2, r4, #26
 800534e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005350:	9306      	str	r3, [sp, #24]
 8005352:	eba3 0309 	sub.w	r3, r3, r9
 8005356:	455b      	cmp	r3, fp
 8005358:	dc31      	bgt.n	80053be <_printf_float+0x36e>
 800535a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535c:	459a      	cmp	sl, r3
 800535e:	dc3a      	bgt.n	80053d6 <_printf_float+0x386>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07da      	lsls	r2, r3, #31
 8005364:	d437      	bmi.n	80053d6 <_printf_float+0x386>
 8005366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005368:	ebaa 0903 	sub.w	r9, sl, r3
 800536c:	9b06      	ldr	r3, [sp, #24]
 800536e:	ebaa 0303 	sub.w	r3, sl, r3
 8005372:	4599      	cmp	r9, r3
 8005374:	bfa8      	it	ge
 8005376:	4699      	movge	r9, r3
 8005378:	f1b9 0f00 	cmp.w	r9, #0
 800537c:	dc33      	bgt.n	80053e6 <_printf_float+0x396>
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005386:	f104 0b1a 	add.w	fp, r4, #26
 800538a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800538c:	ebaa 0303 	sub.w	r3, sl, r3
 8005390:	eba3 0309 	sub.w	r3, r3, r9
 8005394:	4543      	cmp	r3, r8
 8005396:	f77f af79 	ble.w	800528c <_printf_float+0x23c>
 800539a:	2301      	movs	r3, #1
 800539c:	465a      	mov	r2, fp
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	f43f aeae 	beq.w	8005106 <_printf_float+0xb6>
 80053aa:	f108 0801 	add.w	r8, r8, #1
 80053ae:	e7ec      	b.n	800538a <_printf_float+0x33a>
 80053b0:	4642      	mov	r2, r8
 80053b2:	4631      	mov	r1, r6
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	d1c2      	bne.n	8005342 <_printf_float+0x2f2>
 80053bc:	e6a3      	b.n	8005106 <_printf_float+0xb6>
 80053be:	2301      	movs	r3, #1
 80053c0:	4631      	mov	r1, r6
 80053c2:	4628      	mov	r0, r5
 80053c4:	9206      	str	r2, [sp, #24]
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	f43f ae9c 	beq.w	8005106 <_printf_float+0xb6>
 80053ce:	9a06      	ldr	r2, [sp, #24]
 80053d0:	f10b 0b01 	add.w	fp, fp, #1
 80053d4:	e7bb      	b.n	800534e <_printf_float+0x2fe>
 80053d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053da:	4631      	mov	r1, r6
 80053dc:	4628      	mov	r0, r5
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	d1c0      	bne.n	8005366 <_printf_float+0x316>
 80053e4:	e68f      	b.n	8005106 <_printf_float+0xb6>
 80053e6:	9a06      	ldr	r2, [sp, #24]
 80053e8:	464b      	mov	r3, r9
 80053ea:	4442      	add	r2, r8
 80053ec:	4631      	mov	r1, r6
 80053ee:	4628      	mov	r0, r5
 80053f0:	47b8      	blx	r7
 80053f2:	3001      	adds	r0, #1
 80053f4:	d1c3      	bne.n	800537e <_printf_float+0x32e>
 80053f6:	e686      	b.n	8005106 <_printf_float+0xb6>
 80053f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053fc:	f1ba 0f01 	cmp.w	sl, #1
 8005400:	dc01      	bgt.n	8005406 <_printf_float+0x3b6>
 8005402:	07db      	lsls	r3, r3, #31
 8005404:	d536      	bpl.n	8005474 <_printf_float+0x424>
 8005406:	2301      	movs	r3, #1
 8005408:	4642      	mov	r2, r8
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f ae78 	beq.w	8005106 <_printf_float+0xb6>
 8005416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	f43f ae70 	beq.w	8005106 <_printf_float+0xb6>
 8005426:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800542a:	2200      	movs	r2, #0
 800542c:	2300      	movs	r3, #0
 800542e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005432:	f7fb fb69 	bl	8000b08 <__aeabi_dcmpeq>
 8005436:	b9c0      	cbnz	r0, 800546a <_printf_float+0x41a>
 8005438:	4653      	mov	r3, sl
 800543a:	f108 0201 	add.w	r2, r8, #1
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	d10c      	bne.n	8005462 <_printf_float+0x412>
 8005448:	e65d      	b.n	8005106 <_printf_float+0xb6>
 800544a:	2301      	movs	r3, #1
 800544c:	465a      	mov	r2, fp
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	f43f ae56 	beq.w	8005106 <_printf_float+0xb6>
 800545a:	f108 0801 	add.w	r8, r8, #1
 800545e:	45d0      	cmp	r8, sl
 8005460:	dbf3      	blt.n	800544a <_printf_float+0x3fa>
 8005462:	464b      	mov	r3, r9
 8005464:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005468:	e6df      	b.n	800522a <_printf_float+0x1da>
 800546a:	f04f 0800 	mov.w	r8, #0
 800546e:	f104 0b1a 	add.w	fp, r4, #26
 8005472:	e7f4      	b.n	800545e <_printf_float+0x40e>
 8005474:	2301      	movs	r3, #1
 8005476:	4642      	mov	r2, r8
 8005478:	e7e1      	b.n	800543e <_printf_float+0x3ee>
 800547a:	2301      	movs	r3, #1
 800547c:	464a      	mov	r2, r9
 800547e:	4631      	mov	r1, r6
 8005480:	4628      	mov	r0, r5
 8005482:	47b8      	blx	r7
 8005484:	3001      	adds	r0, #1
 8005486:	f43f ae3e 	beq.w	8005106 <_printf_float+0xb6>
 800548a:	f108 0801 	add.w	r8, r8, #1
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005492:	1a5b      	subs	r3, r3, r1
 8005494:	4543      	cmp	r3, r8
 8005496:	dcf0      	bgt.n	800547a <_printf_float+0x42a>
 8005498:	e6fc      	b.n	8005294 <_printf_float+0x244>
 800549a:	f04f 0800 	mov.w	r8, #0
 800549e:	f104 0919 	add.w	r9, r4, #25
 80054a2:	e7f4      	b.n	800548e <_printf_float+0x43e>

080054a4 <_printf_common>:
 80054a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a8:	4616      	mov	r6, r2
 80054aa:	4698      	mov	r8, r3
 80054ac:	688a      	ldr	r2, [r1, #8]
 80054ae:	690b      	ldr	r3, [r1, #16]
 80054b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054b4:	4293      	cmp	r3, r2
 80054b6:	bfb8      	it	lt
 80054b8:	4613      	movlt	r3, r2
 80054ba:	6033      	str	r3, [r6, #0]
 80054bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054c0:	4607      	mov	r7, r0
 80054c2:	460c      	mov	r4, r1
 80054c4:	b10a      	cbz	r2, 80054ca <_printf_common+0x26>
 80054c6:	3301      	adds	r3, #1
 80054c8:	6033      	str	r3, [r6, #0]
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	0699      	lsls	r1, r3, #26
 80054ce:	bf42      	ittt	mi
 80054d0:	6833      	ldrmi	r3, [r6, #0]
 80054d2:	3302      	addmi	r3, #2
 80054d4:	6033      	strmi	r3, [r6, #0]
 80054d6:	6825      	ldr	r5, [r4, #0]
 80054d8:	f015 0506 	ands.w	r5, r5, #6
 80054dc:	d106      	bne.n	80054ec <_printf_common+0x48>
 80054de:	f104 0a19 	add.w	sl, r4, #25
 80054e2:	68e3      	ldr	r3, [r4, #12]
 80054e4:	6832      	ldr	r2, [r6, #0]
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	42ab      	cmp	r3, r5
 80054ea:	dc26      	bgt.n	800553a <_printf_common+0x96>
 80054ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	3b00      	subs	r3, #0
 80054f4:	bf18      	it	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	0692      	lsls	r2, r2, #26
 80054fa:	d42b      	bmi.n	8005554 <_printf_common+0xb0>
 80054fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005500:	4641      	mov	r1, r8
 8005502:	4638      	mov	r0, r7
 8005504:	47c8      	blx	r9
 8005506:	3001      	adds	r0, #1
 8005508:	d01e      	beq.n	8005548 <_printf_common+0xa4>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	6922      	ldr	r2, [r4, #16]
 800550e:	f003 0306 	and.w	r3, r3, #6
 8005512:	2b04      	cmp	r3, #4
 8005514:	bf02      	ittt	eq
 8005516:	68e5      	ldreq	r5, [r4, #12]
 8005518:	6833      	ldreq	r3, [r6, #0]
 800551a:	1aed      	subeq	r5, r5, r3
 800551c:	68a3      	ldr	r3, [r4, #8]
 800551e:	bf0c      	ite	eq
 8005520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005524:	2500      	movne	r5, #0
 8005526:	4293      	cmp	r3, r2
 8005528:	bfc4      	itt	gt
 800552a:	1a9b      	subgt	r3, r3, r2
 800552c:	18ed      	addgt	r5, r5, r3
 800552e:	2600      	movs	r6, #0
 8005530:	341a      	adds	r4, #26
 8005532:	42b5      	cmp	r5, r6
 8005534:	d11a      	bne.n	800556c <_printf_common+0xc8>
 8005536:	2000      	movs	r0, #0
 8005538:	e008      	b.n	800554c <_printf_common+0xa8>
 800553a:	2301      	movs	r3, #1
 800553c:	4652      	mov	r2, sl
 800553e:	4641      	mov	r1, r8
 8005540:	4638      	mov	r0, r7
 8005542:	47c8      	blx	r9
 8005544:	3001      	adds	r0, #1
 8005546:	d103      	bne.n	8005550 <_printf_common+0xac>
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005550:	3501      	adds	r5, #1
 8005552:	e7c6      	b.n	80054e2 <_printf_common+0x3e>
 8005554:	18e1      	adds	r1, r4, r3
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	2030      	movs	r0, #48	@ 0x30
 800555a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800555e:	4422      	add	r2, r4
 8005560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005568:	3302      	adds	r3, #2
 800556a:	e7c7      	b.n	80054fc <_printf_common+0x58>
 800556c:	2301      	movs	r3, #1
 800556e:	4622      	mov	r2, r4
 8005570:	4641      	mov	r1, r8
 8005572:	4638      	mov	r0, r7
 8005574:	47c8      	blx	r9
 8005576:	3001      	adds	r0, #1
 8005578:	d0e6      	beq.n	8005548 <_printf_common+0xa4>
 800557a:	3601      	adds	r6, #1
 800557c:	e7d9      	b.n	8005532 <_printf_common+0x8e>
	...

08005580 <_printf_i>:
 8005580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005584:	7e0f      	ldrb	r7, [r1, #24]
 8005586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005588:	2f78      	cmp	r7, #120	@ 0x78
 800558a:	4691      	mov	r9, r2
 800558c:	4680      	mov	r8, r0
 800558e:	460c      	mov	r4, r1
 8005590:	469a      	mov	sl, r3
 8005592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005596:	d807      	bhi.n	80055a8 <_printf_i+0x28>
 8005598:	2f62      	cmp	r7, #98	@ 0x62
 800559a:	d80a      	bhi.n	80055b2 <_printf_i+0x32>
 800559c:	2f00      	cmp	r7, #0
 800559e:	f000 80d2 	beq.w	8005746 <_printf_i+0x1c6>
 80055a2:	2f58      	cmp	r7, #88	@ 0x58
 80055a4:	f000 80b9 	beq.w	800571a <_printf_i+0x19a>
 80055a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055b0:	e03a      	b.n	8005628 <_printf_i+0xa8>
 80055b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055b6:	2b15      	cmp	r3, #21
 80055b8:	d8f6      	bhi.n	80055a8 <_printf_i+0x28>
 80055ba:	a101      	add	r1, pc, #4	@ (adr r1, 80055c0 <_printf_i+0x40>)
 80055bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055c0:	08005619 	.word	0x08005619
 80055c4:	0800562d 	.word	0x0800562d
 80055c8:	080055a9 	.word	0x080055a9
 80055cc:	080055a9 	.word	0x080055a9
 80055d0:	080055a9 	.word	0x080055a9
 80055d4:	080055a9 	.word	0x080055a9
 80055d8:	0800562d 	.word	0x0800562d
 80055dc:	080055a9 	.word	0x080055a9
 80055e0:	080055a9 	.word	0x080055a9
 80055e4:	080055a9 	.word	0x080055a9
 80055e8:	080055a9 	.word	0x080055a9
 80055ec:	0800572d 	.word	0x0800572d
 80055f0:	08005657 	.word	0x08005657
 80055f4:	080056e7 	.word	0x080056e7
 80055f8:	080055a9 	.word	0x080055a9
 80055fc:	080055a9 	.word	0x080055a9
 8005600:	0800574f 	.word	0x0800574f
 8005604:	080055a9 	.word	0x080055a9
 8005608:	08005657 	.word	0x08005657
 800560c:	080055a9 	.word	0x080055a9
 8005610:	080055a9 	.word	0x080055a9
 8005614:	080056ef 	.word	0x080056ef
 8005618:	6833      	ldr	r3, [r6, #0]
 800561a:	1d1a      	adds	r2, r3, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6032      	str	r2, [r6, #0]
 8005620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005628:	2301      	movs	r3, #1
 800562a:	e09d      	b.n	8005768 <_printf_i+0x1e8>
 800562c:	6833      	ldr	r3, [r6, #0]
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	1d19      	adds	r1, r3, #4
 8005632:	6031      	str	r1, [r6, #0]
 8005634:	0606      	lsls	r6, r0, #24
 8005636:	d501      	bpl.n	800563c <_printf_i+0xbc>
 8005638:	681d      	ldr	r5, [r3, #0]
 800563a:	e003      	b.n	8005644 <_printf_i+0xc4>
 800563c:	0645      	lsls	r5, r0, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0xb8>
 8005640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005644:	2d00      	cmp	r5, #0
 8005646:	da03      	bge.n	8005650 <_printf_i+0xd0>
 8005648:	232d      	movs	r3, #45	@ 0x2d
 800564a:	426d      	negs	r5, r5
 800564c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005650:	4859      	ldr	r0, [pc, #356]	@ (80057b8 <_printf_i+0x238>)
 8005652:	230a      	movs	r3, #10
 8005654:	e011      	b.n	800567a <_printf_i+0xfa>
 8005656:	6821      	ldr	r1, [r4, #0]
 8005658:	6833      	ldr	r3, [r6, #0]
 800565a:	0608      	lsls	r0, r1, #24
 800565c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005660:	d402      	bmi.n	8005668 <_printf_i+0xe8>
 8005662:	0649      	lsls	r1, r1, #25
 8005664:	bf48      	it	mi
 8005666:	b2ad      	uxthmi	r5, r5
 8005668:	2f6f      	cmp	r7, #111	@ 0x6f
 800566a:	4853      	ldr	r0, [pc, #332]	@ (80057b8 <_printf_i+0x238>)
 800566c:	6033      	str	r3, [r6, #0]
 800566e:	bf14      	ite	ne
 8005670:	230a      	movne	r3, #10
 8005672:	2308      	moveq	r3, #8
 8005674:	2100      	movs	r1, #0
 8005676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800567a:	6866      	ldr	r6, [r4, #4]
 800567c:	60a6      	str	r6, [r4, #8]
 800567e:	2e00      	cmp	r6, #0
 8005680:	bfa2      	ittt	ge
 8005682:	6821      	ldrge	r1, [r4, #0]
 8005684:	f021 0104 	bicge.w	r1, r1, #4
 8005688:	6021      	strge	r1, [r4, #0]
 800568a:	b90d      	cbnz	r5, 8005690 <_printf_i+0x110>
 800568c:	2e00      	cmp	r6, #0
 800568e:	d04b      	beq.n	8005728 <_printf_i+0x1a8>
 8005690:	4616      	mov	r6, r2
 8005692:	fbb5 f1f3 	udiv	r1, r5, r3
 8005696:	fb03 5711 	mls	r7, r3, r1, r5
 800569a:	5dc7      	ldrb	r7, [r0, r7]
 800569c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056a0:	462f      	mov	r7, r5
 80056a2:	42bb      	cmp	r3, r7
 80056a4:	460d      	mov	r5, r1
 80056a6:	d9f4      	bls.n	8005692 <_printf_i+0x112>
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d10b      	bne.n	80056c4 <_printf_i+0x144>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	07df      	lsls	r7, r3, #31
 80056b0:	d508      	bpl.n	80056c4 <_printf_i+0x144>
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	6861      	ldr	r1, [r4, #4]
 80056b6:	4299      	cmp	r1, r3
 80056b8:	bfde      	ittt	le
 80056ba:	2330      	movle	r3, #48	@ 0x30
 80056bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056c4:	1b92      	subs	r2, r2, r6
 80056c6:	6122      	str	r2, [r4, #16]
 80056c8:	f8cd a000 	str.w	sl, [sp]
 80056cc:	464b      	mov	r3, r9
 80056ce:	aa03      	add	r2, sp, #12
 80056d0:	4621      	mov	r1, r4
 80056d2:	4640      	mov	r0, r8
 80056d4:	f7ff fee6 	bl	80054a4 <_printf_common>
 80056d8:	3001      	adds	r0, #1
 80056da:	d14a      	bne.n	8005772 <_printf_i+0x1f2>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	b004      	add	sp, #16
 80056e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	f043 0320 	orr.w	r3, r3, #32
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	4833      	ldr	r0, [pc, #204]	@ (80057bc <_printf_i+0x23c>)
 80056f0:	2778      	movs	r7, #120	@ 0x78
 80056f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	6831      	ldr	r1, [r6, #0]
 80056fa:	061f      	lsls	r7, r3, #24
 80056fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005700:	d402      	bmi.n	8005708 <_printf_i+0x188>
 8005702:	065f      	lsls	r7, r3, #25
 8005704:	bf48      	it	mi
 8005706:	b2ad      	uxthmi	r5, r5
 8005708:	6031      	str	r1, [r6, #0]
 800570a:	07d9      	lsls	r1, r3, #31
 800570c:	bf44      	itt	mi
 800570e:	f043 0320 	orrmi.w	r3, r3, #32
 8005712:	6023      	strmi	r3, [r4, #0]
 8005714:	b11d      	cbz	r5, 800571e <_printf_i+0x19e>
 8005716:	2310      	movs	r3, #16
 8005718:	e7ac      	b.n	8005674 <_printf_i+0xf4>
 800571a:	4827      	ldr	r0, [pc, #156]	@ (80057b8 <_printf_i+0x238>)
 800571c:	e7e9      	b.n	80056f2 <_printf_i+0x172>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f023 0320 	bic.w	r3, r3, #32
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	e7f6      	b.n	8005716 <_printf_i+0x196>
 8005728:	4616      	mov	r6, r2
 800572a:	e7bd      	b.n	80056a8 <_printf_i+0x128>
 800572c:	6833      	ldr	r3, [r6, #0]
 800572e:	6825      	ldr	r5, [r4, #0]
 8005730:	6961      	ldr	r1, [r4, #20]
 8005732:	1d18      	adds	r0, r3, #4
 8005734:	6030      	str	r0, [r6, #0]
 8005736:	062e      	lsls	r6, r5, #24
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	d501      	bpl.n	8005740 <_printf_i+0x1c0>
 800573c:	6019      	str	r1, [r3, #0]
 800573e:	e002      	b.n	8005746 <_printf_i+0x1c6>
 8005740:	0668      	lsls	r0, r5, #25
 8005742:	d5fb      	bpl.n	800573c <_printf_i+0x1bc>
 8005744:	8019      	strh	r1, [r3, #0]
 8005746:	2300      	movs	r3, #0
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	4616      	mov	r6, r2
 800574c:	e7bc      	b.n	80056c8 <_printf_i+0x148>
 800574e:	6833      	ldr	r3, [r6, #0]
 8005750:	1d1a      	adds	r2, r3, #4
 8005752:	6032      	str	r2, [r6, #0]
 8005754:	681e      	ldr	r6, [r3, #0]
 8005756:	6862      	ldr	r2, [r4, #4]
 8005758:	2100      	movs	r1, #0
 800575a:	4630      	mov	r0, r6
 800575c:	f7fa fd58 	bl	8000210 <memchr>
 8005760:	b108      	cbz	r0, 8005766 <_printf_i+0x1e6>
 8005762:	1b80      	subs	r0, r0, r6
 8005764:	6060      	str	r0, [r4, #4]
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	6123      	str	r3, [r4, #16]
 800576a:	2300      	movs	r3, #0
 800576c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005770:	e7aa      	b.n	80056c8 <_printf_i+0x148>
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	4632      	mov	r2, r6
 8005776:	4649      	mov	r1, r9
 8005778:	4640      	mov	r0, r8
 800577a:	47d0      	blx	sl
 800577c:	3001      	adds	r0, #1
 800577e:	d0ad      	beq.n	80056dc <_printf_i+0x15c>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	079b      	lsls	r3, r3, #30
 8005784:	d413      	bmi.n	80057ae <_printf_i+0x22e>
 8005786:	68e0      	ldr	r0, [r4, #12]
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	4298      	cmp	r0, r3
 800578c:	bfb8      	it	lt
 800578e:	4618      	movlt	r0, r3
 8005790:	e7a6      	b.n	80056e0 <_printf_i+0x160>
 8005792:	2301      	movs	r3, #1
 8005794:	4632      	mov	r2, r6
 8005796:	4649      	mov	r1, r9
 8005798:	4640      	mov	r0, r8
 800579a:	47d0      	blx	sl
 800579c:	3001      	adds	r0, #1
 800579e:	d09d      	beq.n	80056dc <_printf_i+0x15c>
 80057a0:	3501      	adds	r5, #1
 80057a2:	68e3      	ldr	r3, [r4, #12]
 80057a4:	9903      	ldr	r1, [sp, #12]
 80057a6:	1a5b      	subs	r3, r3, r1
 80057a8:	42ab      	cmp	r3, r5
 80057aa:	dcf2      	bgt.n	8005792 <_printf_i+0x212>
 80057ac:	e7eb      	b.n	8005786 <_printf_i+0x206>
 80057ae:	2500      	movs	r5, #0
 80057b0:	f104 0619 	add.w	r6, r4, #25
 80057b4:	e7f5      	b.n	80057a2 <_printf_i+0x222>
 80057b6:	bf00      	nop
 80057b8:	08008221 	.word	0x08008221
 80057bc:	08008232 	.word	0x08008232

080057c0 <std>:
 80057c0:	2300      	movs	r3, #0
 80057c2:	b510      	push	{r4, lr}
 80057c4:	4604      	mov	r4, r0
 80057c6:	e9c0 3300 	strd	r3, r3, [r0]
 80057ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057ce:	6083      	str	r3, [r0, #8]
 80057d0:	8181      	strh	r1, [r0, #12]
 80057d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80057d4:	81c2      	strh	r2, [r0, #14]
 80057d6:	6183      	str	r3, [r0, #24]
 80057d8:	4619      	mov	r1, r3
 80057da:	2208      	movs	r2, #8
 80057dc:	305c      	adds	r0, #92	@ 0x5c
 80057de:	f000 f8f4 	bl	80059ca <memset>
 80057e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005818 <std+0x58>)
 80057e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80057e6:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <std+0x5c>)
 80057e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <std+0x60>)
 80057ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005824 <std+0x64>)
 80057f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <std+0x68>)
 80057f4:	6224      	str	r4, [r4, #32]
 80057f6:	429c      	cmp	r4, r3
 80057f8:	d006      	beq.n	8005808 <std+0x48>
 80057fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057fe:	4294      	cmp	r4, r2
 8005800:	d002      	beq.n	8005808 <std+0x48>
 8005802:	33d0      	adds	r3, #208	@ 0xd0
 8005804:	429c      	cmp	r4, r3
 8005806:	d105      	bne.n	8005814 <std+0x54>
 8005808:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800580c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005810:	f000 b958 	b.w	8005ac4 <__retarget_lock_init_recursive>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	bf00      	nop
 8005818:	08005945 	.word	0x08005945
 800581c:	08005967 	.word	0x08005967
 8005820:	0800599f 	.word	0x0800599f
 8005824:	080059c3 	.word	0x080059c3
 8005828:	200005f8 	.word	0x200005f8

0800582c <stdio_exit_handler>:
 800582c:	4a02      	ldr	r2, [pc, #8]	@ (8005838 <stdio_exit_handler+0xc>)
 800582e:	4903      	ldr	r1, [pc, #12]	@ (800583c <stdio_exit_handler+0x10>)
 8005830:	4803      	ldr	r0, [pc, #12]	@ (8005840 <stdio_exit_handler+0x14>)
 8005832:	f000 b869 	b.w	8005908 <_fwalk_sglue>
 8005836:	bf00      	nop
 8005838:	200002fc 	.word	0x200002fc
 800583c:	080071ad 	.word	0x080071ad
 8005840:	2000030c 	.word	0x2000030c

08005844 <cleanup_stdio>:
 8005844:	6841      	ldr	r1, [r0, #4]
 8005846:	4b0c      	ldr	r3, [pc, #48]	@ (8005878 <cleanup_stdio+0x34>)
 8005848:	4299      	cmp	r1, r3
 800584a:	b510      	push	{r4, lr}
 800584c:	4604      	mov	r4, r0
 800584e:	d001      	beq.n	8005854 <cleanup_stdio+0x10>
 8005850:	f001 fcac 	bl	80071ac <_fflush_r>
 8005854:	68a1      	ldr	r1, [r4, #8]
 8005856:	4b09      	ldr	r3, [pc, #36]	@ (800587c <cleanup_stdio+0x38>)
 8005858:	4299      	cmp	r1, r3
 800585a:	d002      	beq.n	8005862 <cleanup_stdio+0x1e>
 800585c:	4620      	mov	r0, r4
 800585e:	f001 fca5 	bl	80071ac <_fflush_r>
 8005862:	68e1      	ldr	r1, [r4, #12]
 8005864:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <cleanup_stdio+0x3c>)
 8005866:	4299      	cmp	r1, r3
 8005868:	d004      	beq.n	8005874 <cleanup_stdio+0x30>
 800586a:	4620      	mov	r0, r4
 800586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005870:	f001 bc9c 	b.w	80071ac <_fflush_r>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	bf00      	nop
 8005878:	200005f8 	.word	0x200005f8
 800587c:	20000660 	.word	0x20000660
 8005880:	200006c8 	.word	0x200006c8

08005884 <global_stdio_init.part.0>:
 8005884:	b510      	push	{r4, lr}
 8005886:	4b0b      	ldr	r3, [pc, #44]	@ (80058b4 <global_stdio_init.part.0+0x30>)
 8005888:	4c0b      	ldr	r4, [pc, #44]	@ (80058b8 <global_stdio_init.part.0+0x34>)
 800588a:	4a0c      	ldr	r2, [pc, #48]	@ (80058bc <global_stdio_init.part.0+0x38>)
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	4620      	mov	r0, r4
 8005890:	2200      	movs	r2, #0
 8005892:	2104      	movs	r1, #4
 8005894:	f7ff ff94 	bl	80057c0 <std>
 8005898:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800589c:	2201      	movs	r2, #1
 800589e:	2109      	movs	r1, #9
 80058a0:	f7ff ff8e 	bl	80057c0 <std>
 80058a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058a8:	2202      	movs	r2, #2
 80058aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ae:	2112      	movs	r1, #18
 80058b0:	f7ff bf86 	b.w	80057c0 <std>
 80058b4:	20000730 	.word	0x20000730
 80058b8:	200005f8 	.word	0x200005f8
 80058bc:	0800582d 	.word	0x0800582d

080058c0 <__sfp_lock_acquire>:
 80058c0:	4801      	ldr	r0, [pc, #4]	@ (80058c8 <__sfp_lock_acquire+0x8>)
 80058c2:	f000 b900 	b.w	8005ac6 <__retarget_lock_acquire_recursive>
 80058c6:	bf00      	nop
 80058c8:	20000739 	.word	0x20000739

080058cc <__sfp_lock_release>:
 80058cc:	4801      	ldr	r0, [pc, #4]	@ (80058d4 <__sfp_lock_release+0x8>)
 80058ce:	f000 b8fb 	b.w	8005ac8 <__retarget_lock_release_recursive>
 80058d2:	bf00      	nop
 80058d4:	20000739 	.word	0x20000739

080058d8 <__sinit>:
 80058d8:	b510      	push	{r4, lr}
 80058da:	4604      	mov	r4, r0
 80058dc:	f7ff fff0 	bl	80058c0 <__sfp_lock_acquire>
 80058e0:	6a23      	ldr	r3, [r4, #32]
 80058e2:	b11b      	cbz	r3, 80058ec <__sinit+0x14>
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f7ff bff0 	b.w	80058cc <__sfp_lock_release>
 80058ec:	4b04      	ldr	r3, [pc, #16]	@ (8005900 <__sinit+0x28>)
 80058ee:	6223      	str	r3, [r4, #32]
 80058f0:	4b04      	ldr	r3, [pc, #16]	@ (8005904 <__sinit+0x2c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1f5      	bne.n	80058e4 <__sinit+0xc>
 80058f8:	f7ff ffc4 	bl	8005884 <global_stdio_init.part.0>
 80058fc:	e7f2      	b.n	80058e4 <__sinit+0xc>
 80058fe:	bf00      	nop
 8005900:	08005845 	.word	0x08005845
 8005904:	20000730 	.word	0x20000730

08005908 <_fwalk_sglue>:
 8005908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800590c:	4607      	mov	r7, r0
 800590e:	4688      	mov	r8, r1
 8005910:	4614      	mov	r4, r2
 8005912:	2600      	movs	r6, #0
 8005914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005918:	f1b9 0901 	subs.w	r9, r9, #1
 800591c:	d505      	bpl.n	800592a <_fwalk_sglue+0x22>
 800591e:	6824      	ldr	r4, [r4, #0]
 8005920:	2c00      	cmp	r4, #0
 8005922:	d1f7      	bne.n	8005914 <_fwalk_sglue+0xc>
 8005924:	4630      	mov	r0, r6
 8005926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d907      	bls.n	8005940 <_fwalk_sglue+0x38>
 8005930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005934:	3301      	adds	r3, #1
 8005936:	d003      	beq.n	8005940 <_fwalk_sglue+0x38>
 8005938:	4629      	mov	r1, r5
 800593a:	4638      	mov	r0, r7
 800593c:	47c0      	blx	r8
 800593e:	4306      	orrs	r6, r0
 8005940:	3568      	adds	r5, #104	@ 0x68
 8005942:	e7e9      	b.n	8005918 <_fwalk_sglue+0x10>

08005944 <__sread>:
 8005944:	b510      	push	{r4, lr}
 8005946:	460c      	mov	r4, r1
 8005948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594c:	f000 f86c 	bl	8005a28 <_read_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	bfab      	itete	ge
 8005954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005956:	89a3      	ldrhlt	r3, [r4, #12]
 8005958:	181b      	addge	r3, r3, r0
 800595a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800595e:	bfac      	ite	ge
 8005960:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005962:	81a3      	strhlt	r3, [r4, #12]
 8005964:	bd10      	pop	{r4, pc}

08005966 <__swrite>:
 8005966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596a:	461f      	mov	r7, r3
 800596c:	898b      	ldrh	r3, [r1, #12]
 800596e:	05db      	lsls	r3, r3, #23
 8005970:	4605      	mov	r5, r0
 8005972:	460c      	mov	r4, r1
 8005974:	4616      	mov	r6, r2
 8005976:	d505      	bpl.n	8005984 <__swrite+0x1e>
 8005978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597c:	2302      	movs	r3, #2
 800597e:	2200      	movs	r2, #0
 8005980:	f000 f840 	bl	8005a04 <_lseek_r>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800598a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	4632      	mov	r2, r6
 8005992:	463b      	mov	r3, r7
 8005994:	4628      	mov	r0, r5
 8005996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599a:	f000 b857 	b.w	8005a4c <_write_r>

0800599e <__sseek>:
 800599e:	b510      	push	{r4, lr}
 80059a0:	460c      	mov	r4, r1
 80059a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a6:	f000 f82d 	bl	8005a04 <_lseek_r>
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	bf15      	itete	ne
 80059b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059ba:	81a3      	strheq	r3, [r4, #12]
 80059bc:	bf18      	it	ne
 80059be:	81a3      	strhne	r3, [r4, #12]
 80059c0:	bd10      	pop	{r4, pc}

080059c2 <__sclose>:
 80059c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c6:	f000 b80d 	b.w	80059e4 <_close_r>

080059ca <memset>:
 80059ca:	4402      	add	r2, r0
 80059cc:	4603      	mov	r3, r0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d100      	bne.n	80059d4 <memset+0xa>
 80059d2:	4770      	bx	lr
 80059d4:	f803 1b01 	strb.w	r1, [r3], #1
 80059d8:	e7f9      	b.n	80059ce <memset+0x4>
	...

080059dc <_localeconv_r>:
 80059dc:	4800      	ldr	r0, [pc, #0]	@ (80059e0 <_localeconv_r+0x4>)
 80059de:	4770      	bx	lr
 80059e0:	20000448 	.word	0x20000448

080059e4 <_close_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4d06      	ldr	r5, [pc, #24]	@ (8005a00 <_close_r+0x1c>)
 80059e8:	2300      	movs	r3, #0
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	602b      	str	r3, [r5, #0]
 80059f0:	f7fc fa2f 	bl	8001e52 <_close>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d102      	bne.n	80059fe <_close_r+0x1a>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	b103      	cbz	r3, 80059fe <_close_r+0x1a>
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	20000734 	.word	0x20000734

08005a04 <_lseek_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4d07      	ldr	r5, [pc, #28]	@ (8005a24 <_lseek_r+0x20>)
 8005a08:	4604      	mov	r4, r0
 8005a0a:	4608      	mov	r0, r1
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	2200      	movs	r2, #0
 8005a10:	602a      	str	r2, [r5, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f7fc fa44 	bl	8001ea0 <_lseek>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d102      	bne.n	8005a22 <_lseek_r+0x1e>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	b103      	cbz	r3, 8005a22 <_lseek_r+0x1e>
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	20000734 	.word	0x20000734

08005a28 <_read_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4d07      	ldr	r5, [pc, #28]	@ (8005a48 <_read_r+0x20>)
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	4608      	mov	r0, r1
 8005a30:	4611      	mov	r1, r2
 8005a32:	2200      	movs	r2, #0
 8005a34:	602a      	str	r2, [r5, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f7fc f9d2 	bl	8001de0 <_read>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_read_r+0x1e>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_read_r+0x1e>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	20000734 	.word	0x20000734

08005a4c <_write_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4d07      	ldr	r5, [pc, #28]	@ (8005a6c <_write_r+0x20>)
 8005a50:	4604      	mov	r4, r0
 8005a52:	4608      	mov	r0, r1
 8005a54:	4611      	mov	r1, r2
 8005a56:	2200      	movs	r2, #0
 8005a58:	602a      	str	r2, [r5, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f7fc f9dd 	bl	8001e1a <_write>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_write_r+0x1e>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_write_r+0x1e>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	20000734 	.word	0x20000734

08005a70 <__errno>:
 8005a70:	4b01      	ldr	r3, [pc, #4]	@ (8005a78 <__errno+0x8>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000308 	.word	0x20000308

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab4 <__libc_init_array+0x38>)
 8005a80:	4c0d      	ldr	r4, [pc, #52]	@ (8005ab8 <__libc_init_array+0x3c>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	2600      	movs	r6, #0
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005abc <__libc_init_array+0x40>)
 8005a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac0 <__libc_init_array+0x44>)
 8005a90:	f001 febc 	bl	800780c <_init>
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	2600      	movs	r6, #0
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	08008574 	.word	0x08008574
 8005ab8:	08008574 	.word	0x08008574
 8005abc:	08008574 	.word	0x08008574
 8005ac0:	08008578 	.word	0x08008578

08005ac4 <__retarget_lock_init_recursive>:
 8005ac4:	4770      	bx	lr

08005ac6 <__retarget_lock_acquire_recursive>:
 8005ac6:	4770      	bx	lr

08005ac8 <__retarget_lock_release_recursive>:
 8005ac8:	4770      	bx	lr
	...

08005acc <__assert_func>:
 8005acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ace:	4614      	mov	r4, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4b09      	ldr	r3, [pc, #36]	@ (8005af8 <__assert_func+0x2c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	68d8      	ldr	r0, [r3, #12]
 8005ada:	b954      	cbnz	r4, 8005af2 <__assert_func+0x26>
 8005adc:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <__assert_func+0x30>)
 8005ade:	461c      	mov	r4, r3
 8005ae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ae4:	9100      	str	r1, [sp, #0]
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	4905      	ldr	r1, [pc, #20]	@ (8005b00 <__assert_func+0x34>)
 8005aea:	f001 fb87 	bl	80071fc <fiprintf>
 8005aee:	f001 fbb5 	bl	800725c <abort>
 8005af2:	4b04      	ldr	r3, [pc, #16]	@ (8005b04 <__assert_func+0x38>)
 8005af4:	e7f4      	b.n	8005ae0 <__assert_func+0x14>
 8005af6:	bf00      	nop
 8005af8:	20000308 	.word	0x20000308
 8005afc:	0800827e 	.word	0x0800827e
 8005b00:	08008250 	.word	0x08008250
 8005b04:	08008243 	.word	0x08008243

08005b08 <quorem>:
 8005b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	6903      	ldr	r3, [r0, #16]
 8005b0e:	690c      	ldr	r4, [r1, #16]
 8005b10:	42a3      	cmp	r3, r4
 8005b12:	4607      	mov	r7, r0
 8005b14:	db7e      	blt.n	8005c14 <quorem+0x10c>
 8005b16:	3c01      	subs	r4, #1
 8005b18:	f101 0814 	add.w	r8, r1, #20
 8005b1c:	00a3      	lsls	r3, r4, #2
 8005b1e:	f100 0514 	add.w	r5, r0, #20
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b32:	3301      	adds	r3, #1
 8005b34:	429a      	cmp	r2, r3
 8005b36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b3e:	d32e      	bcc.n	8005b9e <quorem+0x96>
 8005b40:	f04f 0a00 	mov.w	sl, #0
 8005b44:	46c4      	mov	ip, r8
 8005b46:	46ae      	mov	lr, r5
 8005b48:	46d3      	mov	fp, sl
 8005b4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b4e:	b298      	uxth	r0, r3
 8005b50:	fb06 a000 	mla	r0, r6, r0, sl
 8005b54:	0c02      	lsrs	r2, r0, #16
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	fb06 2303 	mla	r3, r6, r3, r2
 8005b5c:	f8de 2000 	ldr.w	r2, [lr]
 8005b60:	b280      	uxth	r0, r0
 8005b62:	b292      	uxth	r2, r2
 8005b64:	1a12      	subs	r2, r2, r0
 8005b66:	445a      	add	r2, fp
 8005b68:	f8de 0000 	ldr.w	r0, [lr]
 8005b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b80:	45e1      	cmp	r9, ip
 8005b82:	f84e 2b04 	str.w	r2, [lr], #4
 8005b86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b8a:	d2de      	bcs.n	8005b4a <quorem+0x42>
 8005b8c:	9b00      	ldr	r3, [sp, #0]
 8005b8e:	58eb      	ldr	r3, [r5, r3]
 8005b90:	b92b      	cbnz	r3, 8005b9e <quorem+0x96>
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	3b04      	subs	r3, #4
 8005b96:	429d      	cmp	r5, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	d32f      	bcc.n	8005bfc <quorem+0xf4>
 8005b9c:	613c      	str	r4, [r7, #16]
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	f001 f978 	bl	8006e94 <__mcmp>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	db25      	blt.n	8005bf4 <quorem+0xec>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	2000      	movs	r0, #0
 8005bac:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bb0:	f8d1 c000 	ldr.w	ip, [r1]
 8005bb4:	fa1f fe82 	uxth.w	lr, r2
 8005bb8:	fa1f f38c 	uxth.w	r3, ip
 8005bbc:	eba3 030e 	sub.w	r3, r3, lr
 8005bc0:	4403      	add	r3, r0
 8005bc2:	0c12      	lsrs	r2, r2, #16
 8005bc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bd2:	45c1      	cmp	r9, r8
 8005bd4:	f841 3b04 	str.w	r3, [r1], #4
 8005bd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bdc:	d2e6      	bcs.n	8005bac <quorem+0xa4>
 8005bde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005be6:	b922      	cbnz	r2, 8005bf2 <quorem+0xea>
 8005be8:	3b04      	subs	r3, #4
 8005bea:	429d      	cmp	r5, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	d30b      	bcc.n	8005c08 <quorem+0x100>
 8005bf0:	613c      	str	r4, [r7, #16]
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	b003      	add	sp, #12
 8005bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	3b04      	subs	r3, #4
 8005c00:	2a00      	cmp	r2, #0
 8005c02:	d1cb      	bne.n	8005b9c <quorem+0x94>
 8005c04:	3c01      	subs	r4, #1
 8005c06:	e7c6      	b.n	8005b96 <quorem+0x8e>
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	3b04      	subs	r3, #4
 8005c0c:	2a00      	cmp	r2, #0
 8005c0e:	d1ef      	bne.n	8005bf0 <quorem+0xe8>
 8005c10:	3c01      	subs	r4, #1
 8005c12:	e7ea      	b.n	8005bea <quorem+0xe2>
 8005c14:	2000      	movs	r0, #0
 8005c16:	e7ee      	b.n	8005bf6 <quorem+0xee>

08005c18 <_dtoa_r>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	69c7      	ldr	r7, [r0, #28]
 8005c1e:	b099      	sub	sp, #100	@ 0x64
 8005c20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c24:	ec55 4b10 	vmov	r4, r5, d0
 8005c28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c2c:	4683      	mov	fp, r0
 8005c2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c32:	b97f      	cbnz	r7, 8005c54 <_dtoa_r+0x3c>
 8005c34:	2010      	movs	r0, #16
 8005c36:	f000 fdfd 	bl	8006834 <malloc>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c40:	b920      	cbnz	r0, 8005c4c <_dtoa_r+0x34>
 8005c42:	4ba7      	ldr	r3, [pc, #668]	@ (8005ee0 <_dtoa_r+0x2c8>)
 8005c44:	21ef      	movs	r1, #239	@ 0xef
 8005c46:	48a7      	ldr	r0, [pc, #668]	@ (8005ee4 <_dtoa_r+0x2cc>)
 8005c48:	f7ff ff40 	bl	8005acc <__assert_func>
 8005c4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c50:	6007      	str	r7, [r0, #0]
 8005c52:	60c7      	str	r7, [r0, #12]
 8005c54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c58:	6819      	ldr	r1, [r3, #0]
 8005c5a:	b159      	cbz	r1, 8005c74 <_dtoa_r+0x5c>
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	604a      	str	r2, [r1, #4]
 8005c60:	2301      	movs	r3, #1
 8005c62:	4093      	lsls	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
 8005c66:	4658      	mov	r0, fp
 8005c68:	f000 feda 	bl	8006a20 <_Bfree>
 8005c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	1e2b      	subs	r3, r5, #0
 8005c76:	bfb9      	ittee	lt
 8005c78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c7c:	9303      	strlt	r3, [sp, #12]
 8005c7e:	2300      	movge	r3, #0
 8005c80:	6033      	strge	r3, [r6, #0]
 8005c82:	9f03      	ldr	r7, [sp, #12]
 8005c84:	4b98      	ldr	r3, [pc, #608]	@ (8005ee8 <_dtoa_r+0x2d0>)
 8005c86:	bfbc      	itt	lt
 8005c88:	2201      	movlt	r2, #1
 8005c8a:	6032      	strlt	r2, [r6, #0]
 8005c8c:	43bb      	bics	r3, r7
 8005c8e:	d112      	bne.n	8005cb6 <_dtoa_r+0x9e>
 8005c90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c9c:	4323      	orrs	r3, r4
 8005c9e:	f000 854d 	beq.w	800673c <_dtoa_r+0xb24>
 8005ca2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ca4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005efc <_dtoa_r+0x2e4>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 854f 	beq.w	800674c <_dtoa_r+0xb34>
 8005cae:	f10a 0303 	add.w	r3, sl, #3
 8005cb2:	f000 bd49 	b.w	8006748 <_dtoa_r+0xb30>
 8005cb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	ec51 0b17 	vmov	r0, r1, d7
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cc6:	f7fa ff1f 	bl	8000b08 <__aeabi_dcmpeq>
 8005cca:	4680      	mov	r8, r0
 8005ccc:	b158      	cbz	r0, 8005ce6 <_dtoa_r+0xce>
 8005cce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cd6:	b113      	cbz	r3, 8005cde <_dtoa_r+0xc6>
 8005cd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cda:	4b84      	ldr	r3, [pc, #528]	@ (8005eec <_dtoa_r+0x2d4>)
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005f00 <_dtoa_r+0x2e8>
 8005ce2:	f000 bd33 	b.w	800674c <_dtoa_r+0xb34>
 8005ce6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005cea:	aa16      	add	r2, sp, #88	@ 0x58
 8005cec:	a917      	add	r1, sp, #92	@ 0x5c
 8005cee:	4658      	mov	r0, fp
 8005cf0:	f001 f980 	bl	8006ff4 <__d2b>
 8005cf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005cf8:	4681      	mov	r9, r0
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	d077      	beq.n	8005dee <_dtoa_r+0x1d6>
 8005cfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d18:	4619      	mov	r1, r3
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4b74      	ldr	r3, [pc, #464]	@ (8005ef0 <_dtoa_r+0x2d8>)
 8005d1e:	f7fa fad3 	bl	80002c8 <__aeabi_dsub>
 8005d22:	a369      	add	r3, pc, #420	@ (adr r3, 8005ec8 <_dtoa_r+0x2b0>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fc86 	bl	8000638 <__aeabi_dmul>
 8005d2c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ed0 <_dtoa_r+0x2b8>)
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f7fa facb 	bl	80002cc <__adddf3>
 8005d36:	4604      	mov	r4, r0
 8005d38:	4630      	mov	r0, r6
 8005d3a:	460d      	mov	r5, r1
 8005d3c:	f7fa fc12 	bl	8000564 <__aeabi_i2d>
 8005d40:	a365      	add	r3, pc, #404	@ (adr r3, 8005ed8 <_dtoa_r+0x2c0>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	f7fa fc77 	bl	8000638 <__aeabi_dmul>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7fa fabb 	bl	80002cc <__adddf3>
 8005d56:	4604      	mov	r4, r0
 8005d58:	460d      	mov	r5, r1
 8005d5a:	f7fa ff1d 	bl	8000b98 <__aeabi_d2iz>
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4607      	mov	r7, r0
 8005d62:	2300      	movs	r3, #0
 8005d64:	4620      	mov	r0, r4
 8005d66:	4629      	mov	r1, r5
 8005d68:	f7fa fed8 	bl	8000b1c <__aeabi_dcmplt>
 8005d6c:	b140      	cbz	r0, 8005d80 <_dtoa_r+0x168>
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f7fa fbf8 	bl	8000564 <__aeabi_i2d>
 8005d74:	4622      	mov	r2, r4
 8005d76:	462b      	mov	r3, r5
 8005d78:	f7fa fec6 	bl	8000b08 <__aeabi_dcmpeq>
 8005d7c:	b900      	cbnz	r0, 8005d80 <_dtoa_r+0x168>
 8005d7e:	3f01      	subs	r7, #1
 8005d80:	2f16      	cmp	r7, #22
 8005d82:	d851      	bhi.n	8005e28 <_dtoa_r+0x210>
 8005d84:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef4 <_dtoa_r+0x2dc>)
 8005d86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d92:	f7fa fec3 	bl	8000b1c <__aeabi_dcmplt>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d048      	beq.n	8005e2c <_dtoa_r+0x214>
 8005d9a:	3f01      	subs	r7, #1
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005da0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005da2:	1b9b      	subs	r3, r3, r6
 8005da4:	1e5a      	subs	r2, r3, #1
 8005da6:	bf44      	itt	mi
 8005da8:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dac:	2300      	movmi	r3, #0
 8005dae:	9208      	str	r2, [sp, #32]
 8005db0:	bf54      	ite	pl
 8005db2:	f04f 0800 	movpl.w	r8, #0
 8005db6:	9308      	strmi	r3, [sp, #32]
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	db39      	blt.n	8005e30 <_dtoa_r+0x218>
 8005dbc:	9b08      	ldr	r3, [sp, #32]
 8005dbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005dc0:	443b      	add	r3, r7
 8005dc2:	9308      	str	r3, [sp, #32]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dca:	2b09      	cmp	r3, #9
 8005dcc:	d864      	bhi.n	8005e98 <_dtoa_r+0x280>
 8005dce:	2b05      	cmp	r3, #5
 8005dd0:	bfc4      	itt	gt
 8005dd2:	3b04      	subgt	r3, #4
 8005dd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd8:	f1a3 0302 	sub.w	r3, r3, #2
 8005ddc:	bfcc      	ite	gt
 8005dde:	2400      	movgt	r4, #0
 8005de0:	2401      	movle	r4, #1
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d863      	bhi.n	8005eae <_dtoa_r+0x296>
 8005de6:	e8df f003 	tbb	[pc, r3]
 8005dea:	372a      	.short	0x372a
 8005dec:	5535      	.short	0x5535
 8005dee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005df2:	441e      	add	r6, r3
 8005df4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	bfc1      	itttt	gt
 8005dfc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e00:	409f      	lslgt	r7, r3
 8005e02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e0a:	bfd6      	itet	le
 8005e0c:	f1c3 0320 	rsble	r3, r3, #32
 8005e10:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e14:	fa04 f003 	lslle.w	r0, r4, r3
 8005e18:	f7fa fb94 	bl	8000544 <__aeabi_ui2d>
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e22:	3e01      	subs	r6, #1
 8005e24:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e26:	e777      	b.n	8005d18 <_dtoa_r+0x100>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e7b8      	b.n	8005d9e <_dtoa_r+0x186>
 8005e2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e2e:	e7b7      	b.n	8005da0 <_dtoa_r+0x188>
 8005e30:	427b      	negs	r3, r7
 8005e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e34:	2300      	movs	r3, #0
 8005e36:	eba8 0807 	sub.w	r8, r8, r7
 8005e3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e3c:	e7c4      	b.n	8005dc8 <_dtoa_r+0x1b0>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dc35      	bgt.n	8005eb4 <_dtoa_r+0x29c>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	9307      	str	r3, [sp, #28]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e52:	e00b      	b.n	8005e6c <_dtoa_r+0x254>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e7f3      	b.n	8005e40 <_dtoa_r+0x228>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	9307      	str	r3, [sp, #28]
 8005e68:	bfb8      	it	lt
 8005e6a:	2301      	movlt	r3, #1
 8005e6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e70:	2100      	movs	r1, #0
 8005e72:	2204      	movs	r2, #4
 8005e74:	f102 0514 	add.w	r5, r2, #20
 8005e78:	429d      	cmp	r5, r3
 8005e7a:	d91f      	bls.n	8005ebc <_dtoa_r+0x2a4>
 8005e7c:	6041      	str	r1, [r0, #4]
 8005e7e:	4658      	mov	r0, fp
 8005e80:	f000 fd8e 	bl	80069a0 <_Balloc>
 8005e84:	4682      	mov	sl, r0
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d13c      	bne.n	8005f04 <_dtoa_r+0x2ec>
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef8 <_dtoa_r+0x2e0>)
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e92:	e6d8      	b.n	8005c46 <_dtoa_r+0x2e>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e7e0      	b.n	8005e5a <_dtoa_r+0x242>
 8005e98:	2401      	movs	r4, #1
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	9307      	str	r3, [sp, #28]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2312      	movs	r3, #18
 8005eac:	e7d0      	b.n	8005e50 <_dtoa_r+0x238>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eb2:	e7f5      	b.n	8005ea0 <_dtoa_r+0x288>
 8005eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	9307      	str	r3, [sp, #28]
 8005eba:	e7d7      	b.n	8005e6c <_dtoa_r+0x254>
 8005ebc:	3101      	adds	r1, #1
 8005ebe:	0052      	lsls	r2, r2, #1
 8005ec0:	e7d8      	b.n	8005e74 <_dtoa_r+0x25c>
 8005ec2:	bf00      	nop
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	636f4361 	.word	0x636f4361
 8005ecc:	3fd287a7 	.word	0x3fd287a7
 8005ed0:	8b60c8b3 	.word	0x8b60c8b3
 8005ed4:	3fc68a28 	.word	0x3fc68a28
 8005ed8:	509f79fb 	.word	0x509f79fb
 8005edc:	3fd34413 	.word	0x3fd34413
 8005ee0:	080081a0 	.word	0x080081a0
 8005ee4:	0800828c 	.word	0x0800828c
 8005ee8:	7ff00000 	.word	0x7ff00000
 8005eec:	08008220 	.word	0x08008220
 8005ef0:	3ff80000 	.word	0x3ff80000
 8005ef4:	08008388 	.word	0x08008388
 8005ef8:	080082e4 	.word	0x080082e4
 8005efc:	08008288 	.word	0x08008288
 8005f00:	0800821f 	.word	0x0800821f
 8005f04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f08:	6018      	str	r0, [r3, #0]
 8005f0a:	9b07      	ldr	r3, [sp, #28]
 8005f0c:	2b0e      	cmp	r3, #14
 8005f0e:	f200 80a4 	bhi.w	800605a <_dtoa_r+0x442>
 8005f12:	2c00      	cmp	r4, #0
 8005f14:	f000 80a1 	beq.w	800605a <_dtoa_r+0x442>
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	dd33      	ble.n	8005f84 <_dtoa_r+0x36c>
 8005f1c:	4bad      	ldr	r3, [pc, #692]	@ (80061d4 <_dtoa_r+0x5bc>)
 8005f1e:	f007 020f 	and.w	r2, r7, #15
 8005f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f26:	ed93 7b00 	vldr	d7, [r3]
 8005f2a:	05f8      	lsls	r0, r7, #23
 8005f2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f34:	d516      	bpl.n	8005f64 <_dtoa_r+0x34c>
 8005f36:	4ba8      	ldr	r3, [pc, #672]	@ (80061d8 <_dtoa_r+0x5c0>)
 8005f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f40:	f7fa fca4 	bl	800088c <__aeabi_ddiv>
 8005f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f48:	f004 040f 	and.w	r4, r4, #15
 8005f4c:	2603      	movs	r6, #3
 8005f4e:	4da2      	ldr	r5, [pc, #648]	@ (80061d8 <_dtoa_r+0x5c0>)
 8005f50:	b954      	cbnz	r4, 8005f68 <_dtoa_r+0x350>
 8005f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5a:	f7fa fc97 	bl	800088c <__aeabi_ddiv>
 8005f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f62:	e028      	b.n	8005fb6 <_dtoa_r+0x39e>
 8005f64:	2602      	movs	r6, #2
 8005f66:	e7f2      	b.n	8005f4e <_dtoa_r+0x336>
 8005f68:	07e1      	lsls	r1, r4, #31
 8005f6a:	d508      	bpl.n	8005f7e <_dtoa_r+0x366>
 8005f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f74:	f7fa fb60 	bl	8000638 <__aeabi_dmul>
 8005f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	1064      	asrs	r4, r4, #1
 8005f80:	3508      	adds	r5, #8
 8005f82:	e7e5      	b.n	8005f50 <_dtoa_r+0x338>
 8005f84:	f000 80d2 	beq.w	800612c <_dtoa_r+0x514>
 8005f88:	427c      	negs	r4, r7
 8005f8a:	4b92      	ldr	r3, [pc, #584]	@ (80061d4 <_dtoa_r+0x5bc>)
 8005f8c:	4d92      	ldr	r5, [pc, #584]	@ (80061d8 <_dtoa_r+0x5c0>)
 8005f8e:	f004 020f 	and.w	r2, r4, #15
 8005f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f9e:	f7fa fb4b 	bl	8000638 <__aeabi_dmul>
 8005fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fa6:	1124      	asrs	r4, r4, #4
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2602      	movs	r6, #2
 8005fac:	2c00      	cmp	r4, #0
 8005fae:	f040 80b2 	bne.w	8006116 <_dtoa_r+0x4fe>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1d3      	bne.n	8005f5e <_dtoa_r+0x346>
 8005fb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80b7 	beq.w	8006130 <_dtoa_r+0x518>
 8005fc2:	4b86      	ldr	r3, [pc, #536]	@ (80061dc <_dtoa_r+0x5c4>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	f7fa fda7 	bl	8000b1c <__aeabi_dcmplt>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	f000 80ae 	beq.w	8006130 <_dtoa_r+0x518>
 8005fd4:	9b07      	ldr	r3, [sp, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 80aa 	beq.w	8006130 <_dtoa_r+0x518>
 8005fdc:	9b00      	ldr	r3, [sp, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dd37      	ble.n	8006052 <_dtoa_r+0x43a>
 8005fe2:	1e7b      	subs	r3, r7, #1
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4b7d      	ldr	r3, [pc, #500]	@ (80061e0 <_dtoa_r+0x5c8>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	4629      	mov	r1, r5
 8005fee:	f7fa fb23 	bl	8000638 <__aeabi_dmul>
 8005ff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff6:	9c00      	ldr	r4, [sp, #0]
 8005ff8:	3601      	adds	r6, #1
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7fa fab2 	bl	8000564 <__aeabi_i2d>
 8006000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006004:	f7fa fb18 	bl	8000638 <__aeabi_dmul>
 8006008:	4b76      	ldr	r3, [pc, #472]	@ (80061e4 <_dtoa_r+0x5cc>)
 800600a:	2200      	movs	r2, #0
 800600c:	f7fa f95e 	bl	80002cc <__adddf3>
 8006010:	4605      	mov	r5, r0
 8006012:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006016:	2c00      	cmp	r4, #0
 8006018:	f040 808d 	bne.w	8006136 <_dtoa_r+0x51e>
 800601c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006020:	4b71      	ldr	r3, [pc, #452]	@ (80061e8 <_dtoa_r+0x5d0>)
 8006022:	2200      	movs	r2, #0
 8006024:	f7fa f950 	bl	80002c8 <__aeabi_dsub>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006030:	462a      	mov	r2, r5
 8006032:	4633      	mov	r3, r6
 8006034:	f7fa fd90 	bl	8000b58 <__aeabi_dcmpgt>
 8006038:	2800      	cmp	r0, #0
 800603a:	f040 828b 	bne.w	8006554 <_dtoa_r+0x93c>
 800603e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006042:	462a      	mov	r2, r5
 8006044:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006048:	f7fa fd68 	bl	8000b1c <__aeabi_dcmplt>
 800604c:	2800      	cmp	r0, #0
 800604e:	f040 8128 	bne.w	80062a2 <_dtoa_r+0x68a>
 8006052:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006056:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800605a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800605c:	2b00      	cmp	r3, #0
 800605e:	f2c0 815a 	blt.w	8006316 <_dtoa_r+0x6fe>
 8006062:	2f0e      	cmp	r7, #14
 8006064:	f300 8157 	bgt.w	8006316 <_dtoa_r+0x6fe>
 8006068:	4b5a      	ldr	r3, [pc, #360]	@ (80061d4 <_dtoa_r+0x5bc>)
 800606a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800606e:	ed93 7b00 	vldr	d7, [r3]
 8006072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	ed8d 7b00 	vstr	d7, [sp]
 800607a:	da03      	bge.n	8006084 <_dtoa_r+0x46c>
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f340 8101 	ble.w	8006286 <_dtoa_r+0x66e>
 8006084:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006088:	4656      	mov	r6, sl
 800608a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa fbfb 	bl	800088c <__aeabi_ddiv>
 8006096:	f7fa fd7f 	bl	8000b98 <__aeabi_d2iz>
 800609a:	4680      	mov	r8, r0
 800609c:	f7fa fa62 	bl	8000564 <__aeabi_i2d>
 80060a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060a4:	f7fa fac8 	bl	8000638 <__aeabi_dmul>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060b4:	f7fa f908 	bl	80002c8 <__aeabi_dsub>
 80060b8:	f806 4b01 	strb.w	r4, [r6], #1
 80060bc:	9d07      	ldr	r5, [sp, #28]
 80060be:	eba6 040a 	sub.w	r4, r6, sl
 80060c2:	42a5      	cmp	r5, r4
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	f040 8117 	bne.w	80062fa <_dtoa_r+0x6e2>
 80060cc:	f7fa f8fe 	bl	80002cc <__adddf3>
 80060d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060d4:	4604      	mov	r4, r0
 80060d6:	460d      	mov	r5, r1
 80060d8:	f7fa fd3e 	bl	8000b58 <__aeabi_dcmpgt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	f040 80f9 	bne.w	80062d4 <_dtoa_r+0x6bc>
 80060e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa fd0d 	bl	8000b08 <__aeabi_dcmpeq>
 80060ee:	b118      	cbz	r0, 80060f8 <_dtoa_r+0x4e0>
 80060f0:	f018 0f01 	tst.w	r8, #1
 80060f4:	f040 80ee 	bne.w	80062d4 <_dtoa_r+0x6bc>
 80060f8:	4649      	mov	r1, r9
 80060fa:	4658      	mov	r0, fp
 80060fc:	f000 fc90 	bl	8006a20 <_Bfree>
 8006100:	2300      	movs	r3, #0
 8006102:	7033      	strb	r3, [r6, #0]
 8006104:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006106:	3701      	adds	r7, #1
 8006108:	601f      	str	r7, [r3, #0]
 800610a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 831d 	beq.w	800674c <_dtoa_r+0xb34>
 8006112:	601e      	str	r6, [r3, #0]
 8006114:	e31a      	b.n	800674c <_dtoa_r+0xb34>
 8006116:	07e2      	lsls	r2, r4, #31
 8006118:	d505      	bpl.n	8006126 <_dtoa_r+0x50e>
 800611a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800611e:	f7fa fa8b 	bl	8000638 <__aeabi_dmul>
 8006122:	3601      	adds	r6, #1
 8006124:	2301      	movs	r3, #1
 8006126:	1064      	asrs	r4, r4, #1
 8006128:	3508      	adds	r5, #8
 800612a:	e73f      	b.n	8005fac <_dtoa_r+0x394>
 800612c:	2602      	movs	r6, #2
 800612e:	e742      	b.n	8005fb6 <_dtoa_r+0x39e>
 8006130:	9c07      	ldr	r4, [sp, #28]
 8006132:	9704      	str	r7, [sp, #16]
 8006134:	e761      	b.n	8005ffa <_dtoa_r+0x3e2>
 8006136:	4b27      	ldr	r3, [pc, #156]	@ (80061d4 <_dtoa_r+0x5bc>)
 8006138:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800613a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800613e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006142:	4454      	add	r4, sl
 8006144:	2900      	cmp	r1, #0
 8006146:	d053      	beq.n	80061f0 <_dtoa_r+0x5d8>
 8006148:	4928      	ldr	r1, [pc, #160]	@ (80061ec <_dtoa_r+0x5d4>)
 800614a:	2000      	movs	r0, #0
 800614c:	f7fa fb9e 	bl	800088c <__aeabi_ddiv>
 8006150:	4633      	mov	r3, r6
 8006152:	462a      	mov	r2, r5
 8006154:	f7fa f8b8 	bl	80002c8 <__aeabi_dsub>
 8006158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800615c:	4656      	mov	r6, sl
 800615e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006162:	f7fa fd19 	bl	8000b98 <__aeabi_d2iz>
 8006166:	4605      	mov	r5, r0
 8006168:	f7fa f9fc 	bl	8000564 <__aeabi_i2d>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006174:	f7fa f8a8 	bl	80002c8 <__aeabi_dsub>
 8006178:	3530      	adds	r5, #48	@ 0x30
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006182:	f806 5b01 	strb.w	r5, [r6], #1
 8006186:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800618a:	f7fa fcc7 	bl	8000b1c <__aeabi_dcmplt>
 800618e:	2800      	cmp	r0, #0
 8006190:	d171      	bne.n	8006276 <_dtoa_r+0x65e>
 8006192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006196:	4911      	ldr	r1, [pc, #68]	@ (80061dc <_dtoa_r+0x5c4>)
 8006198:	2000      	movs	r0, #0
 800619a:	f7fa f895 	bl	80002c8 <__aeabi_dsub>
 800619e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061a2:	f7fa fcbb 	bl	8000b1c <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f040 8095 	bne.w	80062d6 <_dtoa_r+0x6be>
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	f43f af50 	beq.w	8006052 <_dtoa_r+0x43a>
 80061b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061b6:	4b0a      	ldr	r3, [pc, #40]	@ (80061e0 <_dtoa_r+0x5c8>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	f7fa fa3d 	bl	8000638 <__aeabi_dmul>
 80061be:	4b08      	ldr	r3, [pc, #32]	@ (80061e0 <_dtoa_r+0x5c8>)
 80061c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061c4:	2200      	movs	r2, #0
 80061c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ca:	f7fa fa35 	bl	8000638 <__aeabi_dmul>
 80061ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d2:	e7c4      	b.n	800615e <_dtoa_r+0x546>
 80061d4:	08008388 	.word	0x08008388
 80061d8:	08008360 	.word	0x08008360
 80061dc:	3ff00000 	.word	0x3ff00000
 80061e0:	40240000 	.word	0x40240000
 80061e4:	401c0000 	.word	0x401c0000
 80061e8:	40140000 	.word	0x40140000
 80061ec:	3fe00000 	.word	0x3fe00000
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	f7fa fa20 	bl	8000638 <__aeabi_dmul>
 80061f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80061fe:	4656      	mov	r6, sl
 8006200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006204:	f7fa fcc8 	bl	8000b98 <__aeabi_d2iz>
 8006208:	4605      	mov	r5, r0
 800620a:	f7fa f9ab 	bl	8000564 <__aeabi_i2d>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006216:	f7fa f857 	bl	80002c8 <__aeabi_dsub>
 800621a:	3530      	adds	r5, #48	@ 0x30
 800621c:	f806 5b01 	strb.w	r5, [r6], #1
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	42a6      	cmp	r6, r4
 8006226:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	d124      	bne.n	800627a <_dtoa_r+0x662>
 8006230:	4bac      	ldr	r3, [pc, #688]	@ (80064e4 <_dtoa_r+0x8cc>)
 8006232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006236:	f7fa f849 	bl	80002cc <__adddf3>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006242:	f7fa fc89 	bl	8000b58 <__aeabi_dcmpgt>
 8006246:	2800      	cmp	r0, #0
 8006248:	d145      	bne.n	80062d6 <_dtoa_r+0x6be>
 800624a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800624e:	49a5      	ldr	r1, [pc, #660]	@ (80064e4 <_dtoa_r+0x8cc>)
 8006250:	2000      	movs	r0, #0
 8006252:	f7fa f839 	bl	80002c8 <__aeabi_dsub>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800625e:	f7fa fc5d 	bl	8000b1c <__aeabi_dcmplt>
 8006262:	2800      	cmp	r0, #0
 8006264:	f43f aef5 	beq.w	8006052 <_dtoa_r+0x43a>
 8006268:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800626a:	1e73      	subs	r3, r6, #1
 800626c:	9315      	str	r3, [sp, #84]	@ 0x54
 800626e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006272:	2b30      	cmp	r3, #48	@ 0x30
 8006274:	d0f8      	beq.n	8006268 <_dtoa_r+0x650>
 8006276:	9f04      	ldr	r7, [sp, #16]
 8006278:	e73e      	b.n	80060f8 <_dtoa_r+0x4e0>
 800627a:	4b9b      	ldr	r3, [pc, #620]	@ (80064e8 <_dtoa_r+0x8d0>)
 800627c:	f7fa f9dc 	bl	8000638 <__aeabi_dmul>
 8006280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006284:	e7bc      	b.n	8006200 <_dtoa_r+0x5e8>
 8006286:	d10c      	bne.n	80062a2 <_dtoa_r+0x68a>
 8006288:	4b98      	ldr	r3, [pc, #608]	@ (80064ec <_dtoa_r+0x8d4>)
 800628a:	2200      	movs	r2, #0
 800628c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006290:	f7fa f9d2 	bl	8000638 <__aeabi_dmul>
 8006294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006298:	f7fa fc54 	bl	8000b44 <__aeabi_dcmpge>
 800629c:	2800      	cmp	r0, #0
 800629e:	f000 8157 	beq.w	8006550 <_dtoa_r+0x938>
 80062a2:	2400      	movs	r4, #0
 80062a4:	4625      	mov	r5, r4
 80062a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062a8:	43db      	mvns	r3, r3
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	4656      	mov	r6, sl
 80062ae:	2700      	movs	r7, #0
 80062b0:	4621      	mov	r1, r4
 80062b2:	4658      	mov	r0, fp
 80062b4:	f000 fbb4 	bl	8006a20 <_Bfree>
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	d0dc      	beq.n	8006276 <_dtoa_r+0x65e>
 80062bc:	b12f      	cbz	r7, 80062ca <_dtoa_r+0x6b2>
 80062be:	42af      	cmp	r7, r5
 80062c0:	d003      	beq.n	80062ca <_dtoa_r+0x6b2>
 80062c2:	4639      	mov	r1, r7
 80062c4:	4658      	mov	r0, fp
 80062c6:	f000 fbab 	bl	8006a20 <_Bfree>
 80062ca:	4629      	mov	r1, r5
 80062cc:	4658      	mov	r0, fp
 80062ce:	f000 fba7 	bl	8006a20 <_Bfree>
 80062d2:	e7d0      	b.n	8006276 <_dtoa_r+0x65e>
 80062d4:	9704      	str	r7, [sp, #16]
 80062d6:	4633      	mov	r3, r6
 80062d8:	461e      	mov	r6, r3
 80062da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062de:	2a39      	cmp	r2, #57	@ 0x39
 80062e0:	d107      	bne.n	80062f2 <_dtoa_r+0x6da>
 80062e2:	459a      	cmp	sl, r3
 80062e4:	d1f8      	bne.n	80062d8 <_dtoa_r+0x6c0>
 80062e6:	9a04      	ldr	r2, [sp, #16]
 80062e8:	3201      	adds	r2, #1
 80062ea:	9204      	str	r2, [sp, #16]
 80062ec:	2230      	movs	r2, #48	@ 0x30
 80062ee:	f88a 2000 	strb.w	r2, [sl]
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	3201      	adds	r2, #1
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	e7bd      	b.n	8006276 <_dtoa_r+0x65e>
 80062fa:	4b7b      	ldr	r3, [pc, #492]	@ (80064e8 <_dtoa_r+0x8d0>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	f7fa f99b 	bl	8000638 <__aeabi_dmul>
 8006302:	2200      	movs	r2, #0
 8006304:	2300      	movs	r3, #0
 8006306:	4604      	mov	r4, r0
 8006308:	460d      	mov	r5, r1
 800630a:	f7fa fbfd 	bl	8000b08 <__aeabi_dcmpeq>
 800630e:	2800      	cmp	r0, #0
 8006310:	f43f aebb 	beq.w	800608a <_dtoa_r+0x472>
 8006314:	e6f0      	b.n	80060f8 <_dtoa_r+0x4e0>
 8006316:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006318:	2a00      	cmp	r2, #0
 800631a:	f000 80db 	beq.w	80064d4 <_dtoa_r+0x8bc>
 800631e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006320:	2a01      	cmp	r2, #1
 8006322:	f300 80bf 	bgt.w	80064a4 <_dtoa_r+0x88c>
 8006326:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006328:	2a00      	cmp	r2, #0
 800632a:	f000 80b7 	beq.w	800649c <_dtoa_r+0x884>
 800632e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006332:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006334:	4646      	mov	r6, r8
 8006336:	9a08      	ldr	r2, [sp, #32]
 8006338:	2101      	movs	r1, #1
 800633a:	441a      	add	r2, r3
 800633c:	4658      	mov	r0, fp
 800633e:	4498      	add	r8, r3
 8006340:	9208      	str	r2, [sp, #32]
 8006342:	f000 fc21 	bl	8006b88 <__i2b>
 8006346:	4605      	mov	r5, r0
 8006348:	b15e      	cbz	r6, 8006362 <_dtoa_r+0x74a>
 800634a:	9b08      	ldr	r3, [sp, #32]
 800634c:	2b00      	cmp	r3, #0
 800634e:	dd08      	ble.n	8006362 <_dtoa_r+0x74a>
 8006350:	42b3      	cmp	r3, r6
 8006352:	9a08      	ldr	r2, [sp, #32]
 8006354:	bfa8      	it	ge
 8006356:	4633      	movge	r3, r6
 8006358:	eba8 0803 	sub.w	r8, r8, r3
 800635c:	1af6      	subs	r6, r6, r3
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	9308      	str	r3, [sp, #32]
 8006362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006364:	b1f3      	cbz	r3, 80063a4 <_dtoa_r+0x78c>
 8006366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80b7 	beq.w	80064dc <_dtoa_r+0x8c4>
 800636e:	b18c      	cbz	r4, 8006394 <_dtoa_r+0x77c>
 8006370:	4629      	mov	r1, r5
 8006372:	4622      	mov	r2, r4
 8006374:	4658      	mov	r0, fp
 8006376:	f000 fcc7 	bl	8006d08 <__pow5mult>
 800637a:	464a      	mov	r2, r9
 800637c:	4601      	mov	r1, r0
 800637e:	4605      	mov	r5, r0
 8006380:	4658      	mov	r0, fp
 8006382:	f000 fc17 	bl	8006bb4 <__multiply>
 8006386:	4649      	mov	r1, r9
 8006388:	9004      	str	r0, [sp, #16]
 800638a:	4658      	mov	r0, fp
 800638c:	f000 fb48 	bl	8006a20 <_Bfree>
 8006390:	9b04      	ldr	r3, [sp, #16]
 8006392:	4699      	mov	r9, r3
 8006394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006396:	1b1a      	subs	r2, r3, r4
 8006398:	d004      	beq.n	80063a4 <_dtoa_r+0x78c>
 800639a:	4649      	mov	r1, r9
 800639c:	4658      	mov	r0, fp
 800639e:	f000 fcb3 	bl	8006d08 <__pow5mult>
 80063a2:	4681      	mov	r9, r0
 80063a4:	2101      	movs	r1, #1
 80063a6:	4658      	mov	r0, fp
 80063a8:	f000 fbee 	bl	8006b88 <__i2b>
 80063ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063ae:	4604      	mov	r4, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 81cf 	beq.w	8006754 <_dtoa_r+0xb3c>
 80063b6:	461a      	mov	r2, r3
 80063b8:	4601      	mov	r1, r0
 80063ba:	4658      	mov	r0, fp
 80063bc:	f000 fca4 	bl	8006d08 <__pow5mult>
 80063c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	4604      	mov	r4, r0
 80063c6:	f300 8095 	bgt.w	80064f4 <_dtoa_r+0x8dc>
 80063ca:	9b02      	ldr	r3, [sp, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 8087 	bne.w	80064e0 <_dtoa_r+0x8c8>
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 8089 	bne.w	80064f0 <_dtoa_r+0x8d8>
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063e4:	0d1b      	lsrs	r3, r3, #20
 80063e6:	051b      	lsls	r3, r3, #20
 80063e8:	b12b      	cbz	r3, 80063f6 <_dtoa_r+0x7de>
 80063ea:	9b08      	ldr	r3, [sp, #32]
 80063ec:	3301      	adds	r3, #1
 80063ee:	9308      	str	r3, [sp, #32]
 80063f0:	f108 0801 	add.w	r8, r8, #1
 80063f4:	2301      	movs	r3, #1
 80063f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80063f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 81b0 	beq.w	8006760 <_dtoa_r+0xb48>
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006406:	6918      	ldr	r0, [r3, #16]
 8006408:	f000 fb72 	bl	8006af0 <__hi0bits>
 800640c:	f1c0 0020 	rsb	r0, r0, #32
 8006410:	9b08      	ldr	r3, [sp, #32]
 8006412:	4418      	add	r0, r3
 8006414:	f010 001f 	ands.w	r0, r0, #31
 8006418:	d077      	beq.n	800650a <_dtoa_r+0x8f2>
 800641a:	f1c0 0320 	rsb	r3, r0, #32
 800641e:	2b04      	cmp	r3, #4
 8006420:	dd6b      	ble.n	80064fa <_dtoa_r+0x8e2>
 8006422:	9b08      	ldr	r3, [sp, #32]
 8006424:	f1c0 001c 	rsb	r0, r0, #28
 8006428:	4403      	add	r3, r0
 800642a:	4480      	add	r8, r0
 800642c:	4406      	add	r6, r0
 800642e:	9308      	str	r3, [sp, #32]
 8006430:	f1b8 0f00 	cmp.w	r8, #0
 8006434:	dd05      	ble.n	8006442 <_dtoa_r+0x82a>
 8006436:	4649      	mov	r1, r9
 8006438:	4642      	mov	r2, r8
 800643a:	4658      	mov	r0, fp
 800643c:	f000 fcbe 	bl	8006dbc <__lshift>
 8006440:	4681      	mov	r9, r0
 8006442:	9b08      	ldr	r3, [sp, #32]
 8006444:	2b00      	cmp	r3, #0
 8006446:	dd05      	ble.n	8006454 <_dtoa_r+0x83c>
 8006448:	4621      	mov	r1, r4
 800644a:	461a      	mov	r2, r3
 800644c:	4658      	mov	r0, fp
 800644e:	f000 fcb5 	bl	8006dbc <__lshift>
 8006452:	4604      	mov	r4, r0
 8006454:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006456:	2b00      	cmp	r3, #0
 8006458:	d059      	beq.n	800650e <_dtoa_r+0x8f6>
 800645a:	4621      	mov	r1, r4
 800645c:	4648      	mov	r0, r9
 800645e:	f000 fd19 	bl	8006e94 <__mcmp>
 8006462:	2800      	cmp	r0, #0
 8006464:	da53      	bge.n	800650e <_dtoa_r+0x8f6>
 8006466:	1e7b      	subs	r3, r7, #1
 8006468:	9304      	str	r3, [sp, #16]
 800646a:	4649      	mov	r1, r9
 800646c:	2300      	movs	r3, #0
 800646e:	220a      	movs	r2, #10
 8006470:	4658      	mov	r0, fp
 8006472:	f000 faf7 	bl	8006a64 <__multadd>
 8006476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006478:	4681      	mov	r9, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8172 	beq.w	8006764 <_dtoa_r+0xb4c>
 8006480:	2300      	movs	r3, #0
 8006482:	4629      	mov	r1, r5
 8006484:	220a      	movs	r2, #10
 8006486:	4658      	mov	r0, fp
 8006488:	f000 faec 	bl	8006a64 <__multadd>
 800648c:	9b00      	ldr	r3, [sp, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	4605      	mov	r5, r0
 8006492:	dc67      	bgt.n	8006564 <_dtoa_r+0x94c>
 8006494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006496:	2b02      	cmp	r3, #2
 8006498:	dc41      	bgt.n	800651e <_dtoa_r+0x906>
 800649a:	e063      	b.n	8006564 <_dtoa_r+0x94c>
 800649c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800649e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064a2:	e746      	b.n	8006332 <_dtoa_r+0x71a>
 80064a4:	9b07      	ldr	r3, [sp, #28]
 80064a6:	1e5c      	subs	r4, r3, #1
 80064a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064aa:	42a3      	cmp	r3, r4
 80064ac:	bfbf      	itttt	lt
 80064ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064b4:	1ae3      	sublt	r3, r4, r3
 80064b6:	bfb4      	ite	lt
 80064b8:	18d2      	addlt	r2, r2, r3
 80064ba:	1b1c      	subge	r4, r3, r4
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	bfbc      	itt	lt
 80064c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064c2:	2400      	movlt	r4, #0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfb5      	itete	lt
 80064c8:	eba8 0603 	sublt.w	r6, r8, r3
 80064cc:	9b07      	ldrge	r3, [sp, #28]
 80064ce:	2300      	movlt	r3, #0
 80064d0:	4646      	movge	r6, r8
 80064d2:	e730      	b.n	8006336 <_dtoa_r+0x71e>
 80064d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064d8:	4646      	mov	r6, r8
 80064da:	e735      	b.n	8006348 <_dtoa_r+0x730>
 80064dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064de:	e75c      	b.n	800639a <_dtoa_r+0x782>
 80064e0:	2300      	movs	r3, #0
 80064e2:	e788      	b.n	80063f6 <_dtoa_r+0x7de>
 80064e4:	3fe00000 	.word	0x3fe00000
 80064e8:	40240000 	.word	0x40240000
 80064ec:	40140000 	.word	0x40140000
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	e780      	b.n	80063f6 <_dtoa_r+0x7de>
 80064f4:	2300      	movs	r3, #0
 80064f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80064f8:	e782      	b.n	8006400 <_dtoa_r+0x7e8>
 80064fa:	d099      	beq.n	8006430 <_dtoa_r+0x818>
 80064fc:	9a08      	ldr	r2, [sp, #32]
 80064fe:	331c      	adds	r3, #28
 8006500:	441a      	add	r2, r3
 8006502:	4498      	add	r8, r3
 8006504:	441e      	add	r6, r3
 8006506:	9208      	str	r2, [sp, #32]
 8006508:	e792      	b.n	8006430 <_dtoa_r+0x818>
 800650a:	4603      	mov	r3, r0
 800650c:	e7f6      	b.n	80064fc <_dtoa_r+0x8e4>
 800650e:	9b07      	ldr	r3, [sp, #28]
 8006510:	9704      	str	r7, [sp, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dc20      	bgt.n	8006558 <_dtoa_r+0x940>
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651a:	2b02      	cmp	r3, #2
 800651c:	dd1e      	ble.n	800655c <_dtoa_r+0x944>
 800651e:	9b00      	ldr	r3, [sp, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f47f aec0 	bne.w	80062a6 <_dtoa_r+0x68e>
 8006526:	4621      	mov	r1, r4
 8006528:	2205      	movs	r2, #5
 800652a:	4658      	mov	r0, fp
 800652c:	f000 fa9a 	bl	8006a64 <__multadd>
 8006530:	4601      	mov	r1, r0
 8006532:	4604      	mov	r4, r0
 8006534:	4648      	mov	r0, r9
 8006536:	f000 fcad 	bl	8006e94 <__mcmp>
 800653a:	2800      	cmp	r0, #0
 800653c:	f77f aeb3 	ble.w	80062a6 <_dtoa_r+0x68e>
 8006540:	4656      	mov	r6, sl
 8006542:	2331      	movs	r3, #49	@ 0x31
 8006544:	f806 3b01 	strb.w	r3, [r6], #1
 8006548:	9b04      	ldr	r3, [sp, #16]
 800654a:	3301      	adds	r3, #1
 800654c:	9304      	str	r3, [sp, #16]
 800654e:	e6ae      	b.n	80062ae <_dtoa_r+0x696>
 8006550:	9c07      	ldr	r4, [sp, #28]
 8006552:	9704      	str	r7, [sp, #16]
 8006554:	4625      	mov	r5, r4
 8006556:	e7f3      	b.n	8006540 <_dtoa_r+0x928>
 8006558:	9b07      	ldr	r3, [sp, #28]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8104 	beq.w	800676c <_dtoa_r+0xb54>
 8006564:	2e00      	cmp	r6, #0
 8006566:	dd05      	ble.n	8006574 <_dtoa_r+0x95c>
 8006568:	4629      	mov	r1, r5
 800656a:	4632      	mov	r2, r6
 800656c:	4658      	mov	r0, fp
 800656e:	f000 fc25 	bl	8006dbc <__lshift>
 8006572:	4605      	mov	r5, r0
 8006574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	d05a      	beq.n	8006630 <_dtoa_r+0xa18>
 800657a:	6869      	ldr	r1, [r5, #4]
 800657c:	4658      	mov	r0, fp
 800657e:	f000 fa0f 	bl	80069a0 <_Balloc>
 8006582:	4606      	mov	r6, r0
 8006584:	b928      	cbnz	r0, 8006592 <_dtoa_r+0x97a>
 8006586:	4b84      	ldr	r3, [pc, #528]	@ (8006798 <_dtoa_r+0xb80>)
 8006588:	4602      	mov	r2, r0
 800658a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800658e:	f7ff bb5a 	b.w	8005c46 <_dtoa_r+0x2e>
 8006592:	692a      	ldr	r2, [r5, #16]
 8006594:	3202      	adds	r2, #2
 8006596:	0092      	lsls	r2, r2, #2
 8006598:	f105 010c 	add.w	r1, r5, #12
 800659c:	300c      	adds	r0, #12
 800659e:	f000 fe4f 	bl	8007240 <memcpy>
 80065a2:	2201      	movs	r2, #1
 80065a4:	4631      	mov	r1, r6
 80065a6:	4658      	mov	r0, fp
 80065a8:	f000 fc08 	bl	8006dbc <__lshift>
 80065ac:	f10a 0301 	add.w	r3, sl, #1
 80065b0:	9307      	str	r3, [sp, #28]
 80065b2:	9b00      	ldr	r3, [sp, #0]
 80065b4:	4453      	add	r3, sl
 80065b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065b8:	9b02      	ldr	r3, [sp, #8]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	462f      	mov	r7, r5
 80065c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c2:	4605      	mov	r5, r0
 80065c4:	9b07      	ldr	r3, [sp, #28]
 80065c6:	4621      	mov	r1, r4
 80065c8:	3b01      	subs	r3, #1
 80065ca:	4648      	mov	r0, r9
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	f7ff fa9b 	bl	8005b08 <quorem>
 80065d2:	4639      	mov	r1, r7
 80065d4:	9002      	str	r0, [sp, #8]
 80065d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065da:	4648      	mov	r0, r9
 80065dc:	f000 fc5a 	bl	8006e94 <__mcmp>
 80065e0:	462a      	mov	r2, r5
 80065e2:	9008      	str	r0, [sp, #32]
 80065e4:	4621      	mov	r1, r4
 80065e6:	4658      	mov	r0, fp
 80065e8:	f000 fc70 	bl	8006ecc <__mdiff>
 80065ec:	68c2      	ldr	r2, [r0, #12]
 80065ee:	4606      	mov	r6, r0
 80065f0:	bb02      	cbnz	r2, 8006634 <_dtoa_r+0xa1c>
 80065f2:	4601      	mov	r1, r0
 80065f4:	4648      	mov	r0, r9
 80065f6:	f000 fc4d 	bl	8006e94 <__mcmp>
 80065fa:	4602      	mov	r2, r0
 80065fc:	4631      	mov	r1, r6
 80065fe:	4658      	mov	r0, fp
 8006600:	920e      	str	r2, [sp, #56]	@ 0x38
 8006602:	f000 fa0d 	bl	8006a20 <_Bfree>
 8006606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800660a:	9e07      	ldr	r6, [sp, #28]
 800660c:	ea43 0102 	orr.w	r1, r3, r2
 8006610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006612:	4319      	orrs	r1, r3
 8006614:	d110      	bne.n	8006638 <_dtoa_r+0xa20>
 8006616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800661a:	d029      	beq.n	8006670 <_dtoa_r+0xa58>
 800661c:	9b08      	ldr	r3, [sp, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	dd02      	ble.n	8006628 <_dtoa_r+0xa10>
 8006622:	9b02      	ldr	r3, [sp, #8]
 8006624:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006628:	9b00      	ldr	r3, [sp, #0]
 800662a:	f883 8000 	strb.w	r8, [r3]
 800662e:	e63f      	b.n	80062b0 <_dtoa_r+0x698>
 8006630:	4628      	mov	r0, r5
 8006632:	e7bb      	b.n	80065ac <_dtoa_r+0x994>
 8006634:	2201      	movs	r2, #1
 8006636:	e7e1      	b.n	80065fc <_dtoa_r+0x9e4>
 8006638:	9b08      	ldr	r3, [sp, #32]
 800663a:	2b00      	cmp	r3, #0
 800663c:	db04      	blt.n	8006648 <_dtoa_r+0xa30>
 800663e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006640:	430b      	orrs	r3, r1
 8006642:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006644:	430b      	orrs	r3, r1
 8006646:	d120      	bne.n	800668a <_dtoa_r+0xa72>
 8006648:	2a00      	cmp	r2, #0
 800664a:	dded      	ble.n	8006628 <_dtoa_r+0xa10>
 800664c:	4649      	mov	r1, r9
 800664e:	2201      	movs	r2, #1
 8006650:	4658      	mov	r0, fp
 8006652:	f000 fbb3 	bl	8006dbc <__lshift>
 8006656:	4621      	mov	r1, r4
 8006658:	4681      	mov	r9, r0
 800665a:	f000 fc1b 	bl	8006e94 <__mcmp>
 800665e:	2800      	cmp	r0, #0
 8006660:	dc03      	bgt.n	800666a <_dtoa_r+0xa52>
 8006662:	d1e1      	bne.n	8006628 <_dtoa_r+0xa10>
 8006664:	f018 0f01 	tst.w	r8, #1
 8006668:	d0de      	beq.n	8006628 <_dtoa_r+0xa10>
 800666a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800666e:	d1d8      	bne.n	8006622 <_dtoa_r+0xa0a>
 8006670:	9a00      	ldr	r2, [sp, #0]
 8006672:	2339      	movs	r3, #57	@ 0x39
 8006674:	7013      	strb	r3, [r2, #0]
 8006676:	4633      	mov	r3, r6
 8006678:	461e      	mov	r6, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006680:	2a39      	cmp	r2, #57	@ 0x39
 8006682:	d052      	beq.n	800672a <_dtoa_r+0xb12>
 8006684:	3201      	adds	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	e612      	b.n	80062b0 <_dtoa_r+0x698>
 800668a:	2a00      	cmp	r2, #0
 800668c:	dd07      	ble.n	800669e <_dtoa_r+0xa86>
 800668e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006692:	d0ed      	beq.n	8006670 <_dtoa_r+0xa58>
 8006694:	9a00      	ldr	r2, [sp, #0]
 8006696:	f108 0301 	add.w	r3, r8, #1
 800669a:	7013      	strb	r3, [r2, #0]
 800669c:	e608      	b.n	80062b0 <_dtoa_r+0x698>
 800669e:	9b07      	ldr	r3, [sp, #28]
 80066a0:	9a07      	ldr	r2, [sp, #28]
 80066a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d028      	beq.n	80066fe <_dtoa_r+0xae6>
 80066ac:	4649      	mov	r1, r9
 80066ae:	2300      	movs	r3, #0
 80066b0:	220a      	movs	r2, #10
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 f9d6 	bl	8006a64 <__multadd>
 80066b8:	42af      	cmp	r7, r5
 80066ba:	4681      	mov	r9, r0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	f04f 020a 	mov.w	r2, #10
 80066c4:	4639      	mov	r1, r7
 80066c6:	4658      	mov	r0, fp
 80066c8:	d107      	bne.n	80066da <_dtoa_r+0xac2>
 80066ca:	f000 f9cb 	bl	8006a64 <__multadd>
 80066ce:	4607      	mov	r7, r0
 80066d0:	4605      	mov	r5, r0
 80066d2:	9b07      	ldr	r3, [sp, #28]
 80066d4:	3301      	adds	r3, #1
 80066d6:	9307      	str	r3, [sp, #28]
 80066d8:	e774      	b.n	80065c4 <_dtoa_r+0x9ac>
 80066da:	f000 f9c3 	bl	8006a64 <__multadd>
 80066de:	4629      	mov	r1, r5
 80066e0:	4607      	mov	r7, r0
 80066e2:	2300      	movs	r3, #0
 80066e4:	220a      	movs	r2, #10
 80066e6:	4658      	mov	r0, fp
 80066e8:	f000 f9bc 	bl	8006a64 <__multadd>
 80066ec:	4605      	mov	r5, r0
 80066ee:	e7f0      	b.n	80066d2 <_dtoa_r+0xaba>
 80066f0:	9b00      	ldr	r3, [sp, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bfcc      	ite	gt
 80066f6:	461e      	movgt	r6, r3
 80066f8:	2601      	movle	r6, #1
 80066fa:	4456      	add	r6, sl
 80066fc:	2700      	movs	r7, #0
 80066fe:	4649      	mov	r1, r9
 8006700:	2201      	movs	r2, #1
 8006702:	4658      	mov	r0, fp
 8006704:	f000 fb5a 	bl	8006dbc <__lshift>
 8006708:	4621      	mov	r1, r4
 800670a:	4681      	mov	r9, r0
 800670c:	f000 fbc2 	bl	8006e94 <__mcmp>
 8006710:	2800      	cmp	r0, #0
 8006712:	dcb0      	bgt.n	8006676 <_dtoa_r+0xa5e>
 8006714:	d102      	bne.n	800671c <_dtoa_r+0xb04>
 8006716:	f018 0f01 	tst.w	r8, #1
 800671a:	d1ac      	bne.n	8006676 <_dtoa_r+0xa5e>
 800671c:	4633      	mov	r3, r6
 800671e:	461e      	mov	r6, r3
 8006720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006724:	2a30      	cmp	r2, #48	@ 0x30
 8006726:	d0fa      	beq.n	800671e <_dtoa_r+0xb06>
 8006728:	e5c2      	b.n	80062b0 <_dtoa_r+0x698>
 800672a:	459a      	cmp	sl, r3
 800672c:	d1a4      	bne.n	8006678 <_dtoa_r+0xa60>
 800672e:	9b04      	ldr	r3, [sp, #16]
 8006730:	3301      	adds	r3, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	2331      	movs	r3, #49	@ 0x31
 8006736:	f88a 3000 	strb.w	r3, [sl]
 800673a:	e5b9      	b.n	80062b0 <_dtoa_r+0x698>
 800673c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800673e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800679c <_dtoa_r+0xb84>
 8006742:	b11b      	cbz	r3, 800674c <_dtoa_r+0xb34>
 8006744:	f10a 0308 	add.w	r3, sl, #8
 8006748:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	4650      	mov	r0, sl
 800674e:	b019      	add	sp, #100	@ 0x64
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006756:	2b01      	cmp	r3, #1
 8006758:	f77f ae37 	ble.w	80063ca <_dtoa_r+0x7b2>
 800675c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800675e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006760:	2001      	movs	r0, #1
 8006762:	e655      	b.n	8006410 <_dtoa_r+0x7f8>
 8006764:	9b00      	ldr	r3, [sp, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f77f aed6 	ble.w	8006518 <_dtoa_r+0x900>
 800676c:	4656      	mov	r6, sl
 800676e:	4621      	mov	r1, r4
 8006770:	4648      	mov	r0, r9
 8006772:	f7ff f9c9 	bl	8005b08 <quorem>
 8006776:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800677a:	f806 8b01 	strb.w	r8, [r6], #1
 800677e:	9b00      	ldr	r3, [sp, #0]
 8006780:	eba6 020a 	sub.w	r2, r6, sl
 8006784:	4293      	cmp	r3, r2
 8006786:	ddb3      	ble.n	80066f0 <_dtoa_r+0xad8>
 8006788:	4649      	mov	r1, r9
 800678a:	2300      	movs	r3, #0
 800678c:	220a      	movs	r2, #10
 800678e:	4658      	mov	r0, fp
 8006790:	f000 f968 	bl	8006a64 <__multadd>
 8006794:	4681      	mov	r9, r0
 8006796:	e7ea      	b.n	800676e <_dtoa_r+0xb56>
 8006798:	080082e4 	.word	0x080082e4
 800679c:	0800827f 	.word	0x0800827f

080067a0 <_free_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4605      	mov	r5, r0
 80067a4:	2900      	cmp	r1, #0
 80067a6:	d041      	beq.n	800682c <_free_r+0x8c>
 80067a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ac:	1f0c      	subs	r4, r1, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfb8      	it	lt
 80067b2:	18e4      	addlt	r4, r4, r3
 80067b4:	f000 f8e8 	bl	8006988 <__malloc_lock>
 80067b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006830 <_free_r+0x90>)
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	b933      	cbnz	r3, 80067cc <_free_r+0x2c>
 80067be:	6063      	str	r3, [r4, #4]
 80067c0:	6014      	str	r4, [r2, #0]
 80067c2:	4628      	mov	r0, r5
 80067c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c8:	f000 b8e4 	b.w	8006994 <__malloc_unlock>
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d908      	bls.n	80067e2 <_free_r+0x42>
 80067d0:	6820      	ldr	r0, [r4, #0]
 80067d2:	1821      	adds	r1, r4, r0
 80067d4:	428b      	cmp	r3, r1
 80067d6:	bf01      	itttt	eq
 80067d8:	6819      	ldreq	r1, [r3, #0]
 80067da:	685b      	ldreq	r3, [r3, #4]
 80067dc:	1809      	addeq	r1, r1, r0
 80067de:	6021      	streq	r1, [r4, #0]
 80067e0:	e7ed      	b.n	80067be <_free_r+0x1e>
 80067e2:	461a      	mov	r2, r3
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b10b      	cbz	r3, 80067ec <_free_r+0x4c>
 80067e8:	42a3      	cmp	r3, r4
 80067ea:	d9fa      	bls.n	80067e2 <_free_r+0x42>
 80067ec:	6811      	ldr	r1, [r2, #0]
 80067ee:	1850      	adds	r0, r2, r1
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d10b      	bne.n	800680c <_free_r+0x6c>
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	4401      	add	r1, r0
 80067f8:	1850      	adds	r0, r2, r1
 80067fa:	4283      	cmp	r3, r0
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	d1e0      	bne.n	80067c2 <_free_r+0x22>
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	6053      	str	r3, [r2, #4]
 8006806:	4408      	add	r0, r1
 8006808:	6010      	str	r0, [r2, #0]
 800680a:	e7da      	b.n	80067c2 <_free_r+0x22>
 800680c:	d902      	bls.n	8006814 <_free_r+0x74>
 800680e:	230c      	movs	r3, #12
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	e7d6      	b.n	80067c2 <_free_r+0x22>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	1821      	adds	r1, r4, r0
 8006818:	428b      	cmp	r3, r1
 800681a:	bf04      	itt	eq
 800681c:	6819      	ldreq	r1, [r3, #0]
 800681e:	685b      	ldreq	r3, [r3, #4]
 8006820:	6063      	str	r3, [r4, #4]
 8006822:	bf04      	itt	eq
 8006824:	1809      	addeq	r1, r1, r0
 8006826:	6021      	streq	r1, [r4, #0]
 8006828:	6054      	str	r4, [r2, #4]
 800682a:	e7ca      	b.n	80067c2 <_free_r+0x22>
 800682c:	bd38      	pop	{r3, r4, r5, pc}
 800682e:	bf00      	nop
 8006830:	20000740 	.word	0x20000740

08006834 <malloc>:
 8006834:	4b02      	ldr	r3, [pc, #8]	@ (8006840 <malloc+0xc>)
 8006836:	4601      	mov	r1, r0
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f000 b825 	b.w	8006888 <_malloc_r>
 800683e:	bf00      	nop
 8006840:	20000308 	.word	0x20000308

08006844 <sbrk_aligned>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	4e0f      	ldr	r6, [pc, #60]	@ (8006884 <sbrk_aligned+0x40>)
 8006848:	460c      	mov	r4, r1
 800684a:	6831      	ldr	r1, [r6, #0]
 800684c:	4605      	mov	r5, r0
 800684e:	b911      	cbnz	r1, 8006856 <sbrk_aligned+0x12>
 8006850:	f000 fce6 	bl	8007220 <_sbrk_r>
 8006854:	6030      	str	r0, [r6, #0]
 8006856:	4621      	mov	r1, r4
 8006858:	4628      	mov	r0, r5
 800685a:	f000 fce1 	bl	8007220 <_sbrk_r>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	d103      	bne.n	800686a <sbrk_aligned+0x26>
 8006862:	f04f 34ff 	mov.w	r4, #4294967295
 8006866:	4620      	mov	r0, r4
 8006868:	bd70      	pop	{r4, r5, r6, pc}
 800686a:	1cc4      	adds	r4, r0, #3
 800686c:	f024 0403 	bic.w	r4, r4, #3
 8006870:	42a0      	cmp	r0, r4
 8006872:	d0f8      	beq.n	8006866 <sbrk_aligned+0x22>
 8006874:	1a21      	subs	r1, r4, r0
 8006876:	4628      	mov	r0, r5
 8006878:	f000 fcd2 	bl	8007220 <_sbrk_r>
 800687c:	3001      	adds	r0, #1
 800687e:	d1f2      	bne.n	8006866 <sbrk_aligned+0x22>
 8006880:	e7ef      	b.n	8006862 <sbrk_aligned+0x1e>
 8006882:	bf00      	nop
 8006884:	2000073c 	.word	0x2000073c

08006888 <_malloc_r>:
 8006888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4606      	mov	r6, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d904      	bls.n	80068ae <_malloc_r+0x26>
 80068a4:	230c      	movs	r3, #12
 80068a6:	6033      	str	r3, [r6, #0]
 80068a8:	2000      	movs	r0, #0
 80068aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006984 <_malloc_r+0xfc>
 80068b2:	f000 f869 	bl	8006988 <__malloc_lock>
 80068b6:	f8d8 3000 	ldr.w	r3, [r8]
 80068ba:	461c      	mov	r4, r3
 80068bc:	bb44      	cbnz	r4, 8006910 <_malloc_r+0x88>
 80068be:	4629      	mov	r1, r5
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7ff ffbf 	bl	8006844 <sbrk_aligned>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	4604      	mov	r4, r0
 80068ca:	d158      	bne.n	800697e <_malloc_r+0xf6>
 80068cc:	f8d8 4000 	ldr.w	r4, [r8]
 80068d0:	4627      	mov	r7, r4
 80068d2:	2f00      	cmp	r7, #0
 80068d4:	d143      	bne.n	800695e <_malloc_r+0xd6>
 80068d6:	2c00      	cmp	r4, #0
 80068d8:	d04b      	beq.n	8006972 <_malloc_r+0xea>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	4639      	mov	r1, r7
 80068de:	4630      	mov	r0, r6
 80068e0:	eb04 0903 	add.w	r9, r4, r3
 80068e4:	f000 fc9c 	bl	8007220 <_sbrk_r>
 80068e8:	4581      	cmp	r9, r0
 80068ea:	d142      	bne.n	8006972 <_malloc_r+0xea>
 80068ec:	6821      	ldr	r1, [r4, #0]
 80068ee:	1a6d      	subs	r5, r5, r1
 80068f0:	4629      	mov	r1, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff ffa6 	bl	8006844 <sbrk_aligned>
 80068f8:	3001      	adds	r0, #1
 80068fa:	d03a      	beq.n	8006972 <_malloc_r+0xea>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	442b      	add	r3, r5
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	f8d8 3000 	ldr.w	r3, [r8]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	bb62      	cbnz	r2, 8006964 <_malloc_r+0xdc>
 800690a:	f8c8 7000 	str.w	r7, [r8]
 800690e:	e00f      	b.n	8006930 <_malloc_r+0xa8>
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	1b52      	subs	r2, r2, r5
 8006914:	d420      	bmi.n	8006958 <_malloc_r+0xd0>
 8006916:	2a0b      	cmp	r2, #11
 8006918:	d917      	bls.n	800694a <_malloc_r+0xc2>
 800691a:	1961      	adds	r1, r4, r5
 800691c:	42a3      	cmp	r3, r4
 800691e:	6025      	str	r5, [r4, #0]
 8006920:	bf18      	it	ne
 8006922:	6059      	strne	r1, [r3, #4]
 8006924:	6863      	ldr	r3, [r4, #4]
 8006926:	bf08      	it	eq
 8006928:	f8c8 1000 	streq.w	r1, [r8]
 800692c:	5162      	str	r2, [r4, r5]
 800692e:	604b      	str	r3, [r1, #4]
 8006930:	4630      	mov	r0, r6
 8006932:	f000 f82f 	bl	8006994 <__malloc_unlock>
 8006936:	f104 000b 	add.w	r0, r4, #11
 800693a:	1d23      	adds	r3, r4, #4
 800693c:	f020 0007 	bic.w	r0, r0, #7
 8006940:	1ac2      	subs	r2, r0, r3
 8006942:	bf1c      	itt	ne
 8006944:	1a1b      	subne	r3, r3, r0
 8006946:	50a3      	strne	r3, [r4, r2]
 8006948:	e7af      	b.n	80068aa <_malloc_r+0x22>
 800694a:	6862      	ldr	r2, [r4, #4]
 800694c:	42a3      	cmp	r3, r4
 800694e:	bf0c      	ite	eq
 8006950:	f8c8 2000 	streq.w	r2, [r8]
 8006954:	605a      	strne	r2, [r3, #4]
 8006956:	e7eb      	b.n	8006930 <_malloc_r+0xa8>
 8006958:	4623      	mov	r3, r4
 800695a:	6864      	ldr	r4, [r4, #4]
 800695c:	e7ae      	b.n	80068bc <_malloc_r+0x34>
 800695e:	463c      	mov	r4, r7
 8006960:	687f      	ldr	r7, [r7, #4]
 8006962:	e7b6      	b.n	80068d2 <_malloc_r+0x4a>
 8006964:	461a      	mov	r2, r3
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	42a3      	cmp	r3, r4
 800696a:	d1fb      	bne.n	8006964 <_malloc_r+0xdc>
 800696c:	2300      	movs	r3, #0
 800696e:	6053      	str	r3, [r2, #4]
 8006970:	e7de      	b.n	8006930 <_malloc_r+0xa8>
 8006972:	230c      	movs	r3, #12
 8006974:	6033      	str	r3, [r6, #0]
 8006976:	4630      	mov	r0, r6
 8006978:	f000 f80c 	bl	8006994 <__malloc_unlock>
 800697c:	e794      	b.n	80068a8 <_malloc_r+0x20>
 800697e:	6005      	str	r5, [r0, #0]
 8006980:	e7d6      	b.n	8006930 <_malloc_r+0xa8>
 8006982:	bf00      	nop
 8006984:	20000740 	.word	0x20000740

08006988 <__malloc_lock>:
 8006988:	4801      	ldr	r0, [pc, #4]	@ (8006990 <__malloc_lock+0x8>)
 800698a:	f7ff b89c 	b.w	8005ac6 <__retarget_lock_acquire_recursive>
 800698e:	bf00      	nop
 8006990:	20000738 	.word	0x20000738

08006994 <__malloc_unlock>:
 8006994:	4801      	ldr	r0, [pc, #4]	@ (800699c <__malloc_unlock+0x8>)
 8006996:	f7ff b897 	b.w	8005ac8 <__retarget_lock_release_recursive>
 800699a:	bf00      	nop
 800699c:	20000738 	.word	0x20000738

080069a0 <_Balloc>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	69c6      	ldr	r6, [r0, #28]
 80069a4:	4604      	mov	r4, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	b976      	cbnz	r6, 80069c8 <_Balloc+0x28>
 80069aa:	2010      	movs	r0, #16
 80069ac:	f7ff ff42 	bl	8006834 <malloc>
 80069b0:	4602      	mov	r2, r0
 80069b2:	61e0      	str	r0, [r4, #28]
 80069b4:	b920      	cbnz	r0, 80069c0 <_Balloc+0x20>
 80069b6:	4b18      	ldr	r3, [pc, #96]	@ (8006a18 <_Balloc+0x78>)
 80069b8:	4818      	ldr	r0, [pc, #96]	@ (8006a1c <_Balloc+0x7c>)
 80069ba:	216b      	movs	r1, #107	@ 0x6b
 80069bc:	f7ff f886 	bl	8005acc <__assert_func>
 80069c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069c4:	6006      	str	r6, [r0, #0]
 80069c6:	60c6      	str	r6, [r0, #12]
 80069c8:	69e6      	ldr	r6, [r4, #28]
 80069ca:	68f3      	ldr	r3, [r6, #12]
 80069cc:	b183      	cbz	r3, 80069f0 <_Balloc+0x50>
 80069ce:	69e3      	ldr	r3, [r4, #28]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069d6:	b9b8      	cbnz	r0, 8006a08 <_Balloc+0x68>
 80069d8:	2101      	movs	r1, #1
 80069da:	fa01 f605 	lsl.w	r6, r1, r5
 80069de:	1d72      	adds	r2, r6, #5
 80069e0:	0092      	lsls	r2, r2, #2
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fc41 	bl	800726a <_calloc_r>
 80069e8:	b160      	cbz	r0, 8006a04 <_Balloc+0x64>
 80069ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069ee:	e00e      	b.n	8006a0e <_Balloc+0x6e>
 80069f0:	2221      	movs	r2, #33	@ 0x21
 80069f2:	2104      	movs	r1, #4
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fc38 	bl	800726a <_calloc_r>
 80069fa:	69e3      	ldr	r3, [r4, #28]
 80069fc:	60f0      	str	r0, [r6, #12]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e4      	bne.n	80069ce <_Balloc+0x2e>
 8006a04:	2000      	movs	r0, #0
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	6802      	ldr	r2, [r0, #0]
 8006a0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a14:	e7f7      	b.n	8006a06 <_Balloc+0x66>
 8006a16:	bf00      	nop
 8006a18:	080081a0 	.word	0x080081a0
 8006a1c:	080082f5 	.word	0x080082f5

08006a20 <_Bfree>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	69c6      	ldr	r6, [r0, #28]
 8006a24:	4605      	mov	r5, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	b976      	cbnz	r6, 8006a48 <_Bfree+0x28>
 8006a2a:	2010      	movs	r0, #16
 8006a2c:	f7ff ff02 	bl	8006834 <malloc>
 8006a30:	4602      	mov	r2, r0
 8006a32:	61e8      	str	r0, [r5, #28]
 8006a34:	b920      	cbnz	r0, 8006a40 <_Bfree+0x20>
 8006a36:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <_Bfree+0x3c>)
 8006a38:	4809      	ldr	r0, [pc, #36]	@ (8006a60 <_Bfree+0x40>)
 8006a3a:	218f      	movs	r1, #143	@ 0x8f
 8006a3c:	f7ff f846 	bl	8005acc <__assert_func>
 8006a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a44:	6006      	str	r6, [r0, #0]
 8006a46:	60c6      	str	r6, [r0, #12]
 8006a48:	b13c      	cbz	r4, 8006a5a <_Bfree+0x3a>
 8006a4a:	69eb      	ldr	r3, [r5, #28]
 8006a4c:	6862      	ldr	r2, [r4, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a54:	6021      	str	r1, [r4, #0]
 8006a56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	080081a0 	.word	0x080081a0
 8006a60:	080082f5 	.word	0x080082f5

08006a64 <__multadd>:
 8006a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a68:	690d      	ldr	r5, [r1, #16]
 8006a6a:	4607      	mov	r7, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	461e      	mov	r6, r3
 8006a70:	f101 0c14 	add.w	ip, r1, #20
 8006a74:	2000      	movs	r0, #0
 8006a76:	f8dc 3000 	ldr.w	r3, [ip]
 8006a7a:	b299      	uxth	r1, r3
 8006a7c:	fb02 6101 	mla	r1, r2, r1, r6
 8006a80:	0c1e      	lsrs	r6, r3, #16
 8006a82:	0c0b      	lsrs	r3, r1, #16
 8006a84:	fb02 3306 	mla	r3, r2, r6, r3
 8006a88:	b289      	uxth	r1, r1
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a90:	4285      	cmp	r5, r0
 8006a92:	f84c 1b04 	str.w	r1, [ip], #4
 8006a96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a9a:	dcec      	bgt.n	8006a76 <__multadd+0x12>
 8006a9c:	b30e      	cbz	r6, 8006ae2 <__multadd+0x7e>
 8006a9e:	68a3      	ldr	r3, [r4, #8]
 8006aa0:	42ab      	cmp	r3, r5
 8006aa2:	dc19      	bgt.n	8006ad8 <__multadd+0x74>
 8006aa4:	6861      	ldr	r1, [r4, #4]
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	3101      	adds	r1, #1
 8006aaa:	f7ff ff79 	bl	80069a0 <_Balloc>
 8006aae:	4680      	mov	r8, r0
 8006ab0:	b928      	cbnz	r0, 8006abe <__multadd+0x5a>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae8 <__multadd+0x84>)
 8006ab6:	480d      	ldr	r0, [pc, #52]	@ (8006aec <__multadd+0x88>)
 8006ab8:	21ba      	movs	r1, #186	@ 0xba
 8006aba:	f7ff f807 	bl	8005acc <__assert_func>
 8006abe:	6922      	ldr	r2, [r4, #16]
 8006ac0:	3202      	adds	r2, #2
 8006ac2:	f104 010c 	add.w	r1, r4, #12
 8006ac6:	0092      	lsls	r2, r2, #2
 8006ac8:	300c      	adds	r0, #12
 8006aca:	f000 fbb9 	bl	8007240 <memcpy>
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f7ff ffa5 	bl	8006a20 <_Bfree>
 8006ad6:	4644      	mov	r4, r8
 8006ad8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006adc:	3501      	adds	r5, #1
 8006ade:	615e      	str	r6, [r3, #20]
 8006ae0:	6125      	str	r5, [r4, #16]
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae8:	080082e4 	.word	0x080082e4
 8006aec:	080082f5 	.word	0x080082f5

08006af0 <__hi0bits>:
 8006af0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006af4:	4603      	mov	r3, r0
 8006af6:	bf36      	itet	cc
 8006af8:	0403      	lslcc	r3, r0, #16
 8006afa:	2000      	movcs	r0, #0
 8006afc:	2010      	movcc	r0, #16
 8006afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b02:	bf3c      	itt	cc
 8006b04:	021b      	lslcc	r3, r3, #8
 8006b06:	3008      	addcc	r0, #8
 8006b08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b0c:	bf3c      	itt	cc
 8006b0e:	011b      	lslcc	r3, r3, #4
 8006b10:	3004      	addcc	r0, #4
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b16:	bf3c      	itt	cc
 8006b18:	009b      	lslcc	r3, r3, #2
 8006b1a:	3002      	addcc	r0, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db05      	blt.n	8006b2c <__hi0bits+0x3c>
 8006b20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b24:	f100 0001 	add.w	r0, r0, #1
 8006b28:	bf08      	it	eq
 8006b2a:	2020      	moveq	r0, #32
 8006b2c:	4770      	bx	lr

08006b2e <__lo0bits>:
 8006b2e:	6803      	ldr	r3, [r0, #0]
 8006b30:	4602      	mov	r2, r0
 8006b32:	f013 0007 	ands.w	r0, r3, #7
 8006b36:	d00b      	beq.n	8006b50 <__lo0bits+0x22>
 8006b38:	07d9      	lsls	r1, r3, #31
 8006b3a:	d421      	bmi.n	8006b80 <__lo0bits+0x52>
 8006b3c:	0798      	lsls	r0, r3, #30
 8006b3e:	bf49      	itett	mi
 8006b40:	085b      	lsrmi	r3, r3, #1
 8006b42:	089b      	lsrpl	r3, r3, #2
 8006b44:	2001      	movmi	r0, #1
 8006b46:	6013      	strmi	r3, [r2, #0]
 8006b48:	bf5c      	itt	pl
 8006b4a:	6013      	strpl	r3, [r2, #0]
 8006b4c:	2002      	movpl	r0, #2
 8006b4e:	4770      	bx	lr
 8006b50:	b299      	uxth	r1, r3
 8006b52:	b909      	cbnz	r1, 8006b58 <__lo0bits+0x2a>
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	2010      	movs	r0, #16
 8006b58:	b2d9      	uxtb	r1, r3
 8006b5a:	b909      	cbnz	r1, 8006b60 <__lo0bits+0x32>
 8006b5c:	3008      	adds	r0, #8
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	0719      	lsls	r1, r3, #28
 8006b62:	bf04      	itt	eq
 8006b64:	091b      	lsreq	r3, r3, #4
 8006b66:	3004      	addeq	r0, #4
 8006b68:	0799      	lsls	r1, r3, #30
 8006b6a:	bf04      	itt	eq
 8006b6c:	089b      	lsreq	r3, r3, #2
 8006b6e:	3002      	addeq	r0, #2
 8006b70:	07d9      	lsls	r1, r3, #31
 8006b72:	d403      	bmi.n	8006b7c <__lo0bits+0x4e>
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	f100 0001 	add.w	r0, r0, #1
 8006b7a:	d003      	beq.n	8006b84 <__lo0bits+0x56>
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	4770      	bx	lr
 8006b80:	2000      	movs	r0, #0
 8006b82:	4770      	bx	lr
 8006b84:	2020      	movs	r0, #32
 8006b86:	4770      	bx	lr

08006b88 <__i2b>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	f7ff ff07 	bl	80069a0 <_Balloc>
 8006b92:	4602      	mov	r2, r0
 8006b94:	b928      	cbnz	r0, 8006ba2 <__i2b+0x1a>
 8006b96:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <__i2b+0x24>)
 8006b98:	4805      	ldr	r0, [pc, #20]	@ (8006bb0 <__i2b+0x28>)
 8006b9a:	f240 1145 	movw	r1, #325	@ 0x145
 8006b9e:	f7fe ff95 	bl	8005acc <__assert_func>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	6144      	str	r4, [r0, #20]
 8006ba6:	6103      	str	r3, [r0, #16]
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	bf00      	nop
 8006bac:	080082e4 	.word	0x080082e4
 8006bb0:	080082f5 	.word	0x080082f5

08006bb4 <__multiply>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	4614      	mov	r4, r2
 8006bba:	690a      	ldr	r2, [r1, #16]
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	bfa8      	it	ge
 8006bc2:	4623      	movge	r3, r4
 8006bc4:	460f      	mov	r7, r1
 8006bc6:	bfa4      	itt	ge
 8006bc8:	460c      	movge	r4, r1
 8006bca:	461f      	movge	r7, r3
 8006bcc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006bd0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	6861      	ldr	r1, [r4, #4]
 8006bd8:	eb0a 0609 	add.w	r6, sl, r9
 8006bdc:	42b3      	cmp	r3, r6
 8006bde:	b085      	sub	sp, #20
 8006be0:	bfb8      	it	lt
 8006be2:	3101      	addlt	r1, #1
 8006be4:	f7ff fedc 	bl	80069a0 <_Balloc>
 8006be8:	b930      	cbnz	r0, 8006bf8 <__multiply+0x44>
 8006bea:	4602      	mov	r2, r0
 8006bec:	4b44      	ldr	r3, [pc, #272]	@ (8006d00 <__multiply+0x14c>)
 8006bee:	4845      	ldr	r0, [pc, #276]	@ (8006d04 <__multiply+0x150>)
 8006bf0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006bf4:	f7fe ff6a 	bl	8005acc <__assert_func>
 8006bf8:	f100 0514 	add.w	r5, r0, #20
 8006bfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c00:	462b      	mov	r3, r5
 8006c02:	2200      	movs	r2, #0
 8006c04:	4543      	cmp	r3, r8
 8006c06:	d321      	bcc.n	8006c4c <__multiply+0x98>
 8006c08:	f107 0114 	add.w	r1, r7, #20
 8006c0c:	f104 0214 	add.w	r2, r4, #20
 8006c10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c18:	9302      	str	r3, [sp, #8]
 8006c1a:	1b13      	subs	r3, r2, r4
 8006c1c:	3b15      	subs	r3, #21
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	3304      	adds	r3, #4
 8006c24:	f104 0715 	add.w	r7, r4, #21
 8006c28:	42ba      	cmp	r2, r7
 8006c2a:	bf38      	it	cc
 8006c2c:	2304      	movcc	r3, #4
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	9b02      	ldr	r3, [sp, #8]
 8006c32:	9103      	str	r1, [sp, #12]
 8006c34:	428b      	cmp	r3, r1
 8006c36:	d80c      	bhi.n	8006c52 <__multiply+0x9e>
 8006c38:	2e00      	cmp	r6, #0
 8006c3a:	dd03      	ble.n	8006c44 <__multiply+0x90>
 8006c3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d05b      	beq.n	8006cfc <__multiply+0x148>
 8006c44:	6106      	str	r6, [r0, #16]
 8006c46:	b005      	add	sp, #20
 8006c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4c:	f843 2b04 	str.w	r2, [r3], #4
 8006c50:	e7d8      	b.n	8006c04 <__multiply+0x50>
 8006c52:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c56:	f1ba 0f00 	cmp.w	sl, #0
 8006c5a:	d024      	beq.n	8006ca6 <__multiply+0xf2>
 8006c5c:	f104 0e14 	add.w	lr, r4, #20
 8006c60:	46a9      	mov	r9, r5
 8006c62:	f04f 0c00 	mov.w	ip, #0
 8006c66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c6a:	f8d9 3000 	ldr.w	r3, [r9]
 8006c6e:	fa1f fb87 	uxth.w	fp, r7
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c7c:	f8d9 7000 	ldr.w	r7, [r9]
 8006c80:	4463      	add	r3, ip
 8006c82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c86:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c94:	4572      	cmp	r2, lr
 8006c96:	f849 3b04 	str.w	r3, [r9], #4
 8006c9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c9e:	d8e2      	bhi.n	8006c66 <__multiply+0xb2>
 8006ca0:	9b01      	ldr	r3, [sp, #4]
 8006ca2:	f845 c003 	str.w	ip, [r5, r3]
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cac:	3104      	adds	r1, #4
 8006cae:	f1b9 0f00 	cmp.w	r9, #0
 8006cb2:	d021      	beq.n	8006cf8 <__multiply+0x144>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	f104 0c14 	add.w	ip, r4, #20
 8006cba:	46ae      	mov	lr, r5
 8006cbc:	f04f 0a00 	mov.w	sl, #0
 8006cc0:	f8bc b000 	ldrh.w	fp, [ip]
 8006cc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006cc8:	fb09 770b 	mla	r7, r9, fp, r7
 8006ccc:	4457      	add	r7, sl
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cd4:	f84e 3b04 	str.w	r3, [lr], #4
 8006cd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ce0:	f8be 3000 	ldrh.w	r3, [lr]
 8006ce4:	fb09 330a 	mla	r3, r9, sl, r3
 8006ce8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006cec:	4562      	cmp	r2, ip
 8006cee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cf2:	d8e5      	bhi.n	8006cc0 <__multiply+0x10c>
 8006cf4:	9f01      	ldr	r7, [sp, #4]
 8006cf6:	51eb      	str	r3, [r5, r7]
 8006cf8:	3504      	adds	r5, #4
 8006cfa:	e799      	b.n	8006c30 <__multiply+0x7c>
 8006cfc:	3e01      	subs	r6, #1
 8006cfe:	e79b      	b.n	8006c38 <__multiply+0x84>
 8006d00:	080082e4 	.word	0x080082e4
 8006d04:	080082f5 	.word	0x080082f5

08006d08 <__pow5mult>:
 8006d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d0c:	4615      	mov	r5, r2
 8006d0e:	f012 0203 	ands.w	r2, r2, #3
 8006d12:	4607      	mov	r7, r0
 8006d14:	460e      	mov	r6, r1
 8006d16:	d007      	beq.n	8006d28 <__pow5mult+0x20>
 8006d18:	4c25      	ldr	r4, [pc, #148]	@ (8006db0 <__pow5mult+0xa8>)
 8006d1a:	3a01      	subs	r2, #1
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d22:	f7ff fe9f 	bl	8006a64 <__multadd>
 8006d26:	4606      	mov	r6, r0
 8006d28:	10ad      	asrs	r5, r5, #2
 8006d2a:	d03d      	beq.n	8006da8 <__pow5mult+0xa0>
 8006d2c:	69fc      	ldr	r4, [r7, #28]
 8006d2e:	b97c      	cbnz	r4, 8006d50 <__pow5mult+0x48>
 8006d30:	2010      	movs	r0, #16
 8006d32:	f7ff fd7f 	bl	8006834 <malloc>
 8006d36:	4602      	mov	r2, r0
 8006d38:	61f8      	str	r0, [r7, #28]
 8006d3a:	b928      	cbnz	r0, 8006d48 <__pow5mult+0x40>
 8006d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006db4 <__pow5mult+0xac>)
 8006d3e:	481e      	ldr	r0, [pc, #120]	@ (8006db8 <__pow5mult+0xb0>)
 8006d40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d44:	f7fe fec2 	bl	8005acc <__assert_func>
 8006d48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d4c:	6004      	str	r4, [r0, #0]
 8006d4e:	60c4      	str	r4, [r0, #12]
 8006d50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d58:	b94c      	cbnz	r4, 8006d6e <__pow5mult+0x66>
 8006d5a:	f240 2171 	movw	r1, #625	@ 0x271
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f7ff ff12 	bl	8006b88 <__i2b>
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	6003      	str	r3, [r0, #0]
 8006d6e:	f04f 0900 	mov.w	r9, #0
 8006d72:	07eb      	lsls	r3, r5, #31
 8006d74:	d50a      	bpl.n	8006d8c <__pow5mult+0x84>
 8006d76:	4631      	mov	r1, r6
 8006d78:	4622      	mov	r2, r4
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f7ff ff1a 	bl	8006bb4 <__multiply>
 8006d80:	4631      	mov	r1, r6
 8006d82:	4680      	mov	r8, r0
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff fe4b 	bl	8006a20 <_Bfree>
 8006d8a:	4646      	mov	r6, r8
 8006d8c:	106d      	asrs	r5, r5, #1
 8006d8e:	d00b      	beq.n	8006da8 <__pow5mult+0xa0>
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	b938      	cbnz	r0, 8006da4 <__pow5mult+0x9c>
 8006d94:	4622      	mov	r2, r4
 8006d96:	4621      	mov	r1, r4
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f7ff ff0b 	bl	8006bb4 <__multiply>
 8006d9e:	6020      	str	r0, [r4, #0]
 8006da0:	f8c0 9000 	str.w	r9, [r0]
 8006da4:	4604      	mov	r4, r0
 8006da6:	e7e4      	b.n	8006d72 <__pow5mult+0x6a>
 8006da8:	4630      	mov	r0, r6
 8006daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dae:	bf00      	nop
 8006db0:	08008350 	.word	0x08008350
 8006db4:	080081a0 	.word	0x080081a0
 8006db8:	080082f5 	.word	0x080082f5

08006dbc <__lshift>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	6849      	ldr	r1, [r1, #4]
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dca:	68a3      	ldr	r3, [r4, #8]
 8006dcc:	4607      	mov	r7, r0
 8006dce:	4691      	mov	r9, r2
 8006dd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dd4:	f108 0601 	add.w	r6, r8, #1
 8006dd8:	42b3      	cmp	r3, r6
 8006dda:	db0b      	blt.n	8006df4 <__lshift+0x38>
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff fddf 	bl	80069a0 <_Balloc>
 8006de2:	4605      	mov	r5, r0
 8006de4:	b948      	cbnz	r0, 8006dfa <__lshift+0x3e>
 8006de6:	4602      	mov	r2, r0
 8006de8:	4b28      	ldr	r3, [pc, #160]	@ (8006e8c <__lshift+0xd0>)
 8006dea:	4829      	ldr	r0, [pc, #164]	@ (8006e90 <__lshift+0xd4>)
 8006dec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006df0:	f7fe fe6c 	bl	8005acc <__assert_func>
 8006df4:	3101      	adds	r1, #1
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	e7ee      	b.n	8006dd8 <__lshift+0x1c>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f100 0114 	add.w	r1, r0, #20
 8006e00:	f100 0210 	add.w	r2, r0, #16
 8006e04:	4618      	mov	r0, r3
 8006e06:	4553      	cmp	r3, sl
 8006e08:	db33      	blt.n	8006e72 <__lshift+0xb6>
 8006e0a:	6920      	ldr	r0, [r4, #16]
 8006e0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e10:	f104 0314 	add.w	r3, r4, #20
 8006e14:	f019 091f 	ands.w	r9, r9, #31
 8006e18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e20:	d02b      	beq.n	8006e7a <__lshift+0xbe>
 8006e22:	f1c9 0e20 	rsb	lr, r9, #32
 8006e26:	468a      	mov	sl, r1
 8006e28:	2200      	movs	r2, #0
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	fa00 f009 	lsl.w	r0, r0, r9
 8006e30:	4310      	orrs	r0, r2
 8006e32:	f84a 0b04 	str.w	r0, [sl], #4
 8006e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e3a:	459c      	cmp	ip, r3
 8006e3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e40:	d8f3      	bhi.n	8006e2a <__lshift+0x6e>
 8006e42:	ebac 0304 	sub.w	r3, ip, r4
 8006e46:	3b15      	subs	r3, #21
 8006e48:	f023 0303 	bic.w	r3, r3, #3
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	f104 0015 	add.w	r0, r4, #21
 8006e52:	4584      	cmp	ip, r0
 8006e54:	bf38      	it	cc
 8006e56:	2304      	movcc	r3, #4
 8006e58:	50ca      	str	r2, [r1, r3]
 8006e5a:	b10a      	cbz	r2, 8006e60 <__lshift+0xa4>
 8006e5c:	f108 0602 	add.w	r6, r8, #2
 8006e60:	3e01      	subs	r6, #1
 8006e62:	4638      	mov	r0, r7
 8006e64:	612e      	str	r6, [r5, #16]
 8006e66:	4621      	mov	r1, r4
 8006e68:	f7ff fdda 	bl	8006a20 <_Bfree>
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e72:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e76:	3301      	adds	r3, #1
 8006e78:	e7c5      	b.n	8006e06 <__lshift+0x4a>
 8006e7a:	3904      	subs	r1, #4
 8006e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e80:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e84:	459c      	cmp	ip, r3
 8006e86:	d8f9      	bhi.n	8006e7c <__lshift+0xc0>
 8006e88:	e7ea      	b.n	8006e60 <__lshift+0xa4>
 8006e8a:	bf00      	nop
 8006e8c:	080082e4 	.word	0x080082e4
 8006e90:	080082f5 	.word	0x080082f5

08006e94 <__mcmp>:
 8006e94:	690a      	ldr	r2, [r1, #16]
 8006e96:	4603      	mov	r3, r0
 8006e98:	6900      	ldr	r0, [r0, #16]
 8006e9a:	1a80      	subs	r0, r0, r2
 8006e9c:	b530      	push	{r4, r5, lr}
 8006e9e:	d10e      	bne.n	8006ebe <__mcmp+0x2a>
 8006ea0:	3314      	adds	r3, #20
 8006ea2:	3114      	adds	r1, #20
 8006ea4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ea8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006eac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006eb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006eb4:	4295      	cmp	r5, r2
 8006eb6:	d003      	beq.n	8006ec0 <__mcmp+0x2c>
 8006eb8:	d205      	bcs.n	8006ec6 <__mcmp+0x32>
 8006eba:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebe:	bd30      	pop	{r4, r5, pc}
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	d3f3      	bcc.n	8006eac <__mcmp+0x18>
 8006ec4:	e7fb      	b.n	8006ebe <__mcmp+0x2a>
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	e7f9      	b.n	8006ebe <__mcmp+0x2a>
	...

08006ecc <__mdiff>:
 8006ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	4689      	mov	r9, r1
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	4648      	mov	r0, r9
 8006ed8:	4614      	mov	r4, r2
 8006eda:	f7ff ffdb 	bl	8006e94 <__mcmp>
 8006ede:	1e05      	subs	r5, r0, #0
 8006ee0:	d112      	bne.n	8006f08 <__mdiff+0x3c>
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7ff fd5b 	bl	80069a0 <_Balloc>
 8006eea:	4602      	mov	r2, r0
 8006eec:	b928      	cbnz	r0, 8006efa <__mdiff+0x2e>
 8006eee:	4b3f      	ldr	r3, [pc, #252]	@ (8006fec <__mdiff+0x120>)
 8006ef0:	f240 2137 	movw	r1, #567	@ 0x237
 8006ef4:	483e      	ldr	r0, [pc, #248]	@ (8006ff0 <__mdiff+0x124>)
 8006ef6:	f7fe fde9 	bl	8005acc <__assert_func>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f00:	4610      	mov	r0, r2
 8006f02:	b003      	add	sp, #12
 8006f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f08:	bfbc      	itt	lt
 8006f0a:	464b      	movlt	r3, r9
 8006f0c:	46a1      	movlt	r9, r4
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f14:	bfba      	itte	lt
 8006f16:	461c      	movlt	r4, r3
 8006f18:	2501      	movlt	r5, #1
 8006f1a:	2500      	movge	r5, #0
 8006f1c:	f7ff fd40 	bl	80069a0 <_Balloc>
 8006f20:	4602      	mov	r2, r0
 8006f22:	b918      	cbnz	r0, 8006f2c <__mdiff+0x60>
 8006f24:	4b31      	ldr	r3, [pc, #196]	@ (8006fec <__mdiff+0x120>)
 8006f26:	f240 2145 	movw	r1, #581	@ 0x245
 8006f2a:	e7e3      	b.n	8006ef4 <__mdiff+0x28>
 8006f2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f30:	6926      	ldr	r6, [r4, #16]
 8006f32:	60c5      	str	r5, [r0, #12]
 8006f34:	f109 0310 	add.w	r3, r9, #16
 8006f38:	f109 0514 	add.w	r5, r9, #20
 8006f3c:	f104 0e14 	add.w	lr, r4, #20
 8006f40:	f100 0b14 	add.w	fp, r0, #20
 8006f44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	46d9      	mov	r9, fp
 8006f50:	f04f 0c00 	mov.w	ip, #0
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f5e:	9301      	str	r3, [sp, #4]
 8006f60:	fa1f f38a 	uxth.w	r3, sl
 8006f64:	4619      	mov	r1, r3
 8006f66:	b283      	uxth	r3, r0
 8006f68:	1acb      	subs	r3, r1, r3
 8006f6a:	0c00      	lsrs	r0, r0, #16
 8006f6c:	4463      	add	r3, ip
 8006f6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f7c:	4576      	cmp	r6, lr
 8006f7e:	f849 3b04 	str.w	r3, [r9], #4
 8006f82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f86:	d8e5      	bhi.n	8006f54 <__mdiff+0x88>
 8006f88:	1b33      	subs	r3, r6, r4
 8006f8a:	3b15      	subs	r3, #21
 8006f8c:	f023 0303 	bic.w	r3, r3, #3
 8006f90:	3415      	adds	r4, #21
 8006f92:	3304      	adds	r3, #4
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	bf38      	it	cc
 8006f98:	2304      	movcc	r3, #4
 8006f9a:	441d      	add	r5, r3
 8006f9c:	445b      	add	r3, fp
 8006f9e:	461e      	mov	r6, r3
 8006fa0:	462c      	mov	r4, r5
 8006fa2:	4544      	cmp	r4, r8
 8006fa4:	d30e      	bcc.n	8006fc4 <__mdiff+0xf8>
 8006fa6:	f108 0103 	add.w	r1, r8, #3
 8006faa:	1b49      	subs	r1, r1, r5
 8006fac:	f021 0103 	bic.w	r1, r1, #3
 8006fb0:	3d03      	subs	r5, #3
 8006fb2:	45a8      	cmp	r8, r5
 8006fb4:	bf38      	it	cc
 8006fb6:	2100      	movcc	r1, #0
 8006fb8:	440b      	add	r3, r1
 8006fba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fbe:	b191      	cbz	r1, 8006fe6 <__mdiff+0x11a>
 8006fc0:	6117      	str	r7, [r2, #16]
 8006fc2:	e79d      	b.n	8006f00 <__mdiff+0x34>
 8006fc4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fc8:	46e6      	mov	lr, ip
 8006fca:	0c08      	lsrs	r0, r1, #16
 8006fcc:	fa1c fc81 	uxtah	ip, ip, r1
 8006fd0:	4471      	add	r1, lr
 8006fd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006fd6:	b289      	uxth	r1, r1
 8006fd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006fdc:	f846 1b04 	str.w	r1, [r6], #4
 8006fe0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fe4:	e7dd      	b.n	8006fa2 <__mdiff+0xd6>
 8006fe6:	3f01      	subs	r7, #1
 8006fe8:	e7e7      	b.n	8006fba <__mdiff+0xee>
 8006fea:	bf00      	nop
 8006fec:	080082e4 	.word	0x080082e4
 8006ff0:	080082f5 	.word	0x080082f5

08006ff4 <__d2b>:
 8006ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	ec59 8b10 	vmov	r8, r9, d0
 8007000:	4616      	mov	r6, r2
 8007002:	f7ff fccd 	bl	80069a0 <_Balloc>
 8007006:	4604      	mov	r4, r0
 8007008:	b930      	cbnz	r0, 8007018 <__d2b+0x24>
 800700a:	4602      	mov	r2, r0
 800700c:	4b23      	ldr	r3, [pc, #140]	@ (800709c <__d2b+0xa8>)
 800700e:	4824      	ldr	r0, [pc, #144]	@ (80070a0 <__d2b+0xac>)
 8007010:	f240 310f 	movw	r1, #783	@ 0x30f
 8007014:	f7fe fd5a 	bl	8005acc <__assert_func>
 8007018:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800701c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007020:	b10d      	cbz	r5, 8007026 <__d2b+0x32>
 8007022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	f1b8 0300 	subs.w	r3, r8, #0
 800702c:	d023      	beq.n	8007076 <__d2b+0x82>
 800702e:	4668      	mov	r0, sp
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	f7ff fd7c 	bl	8006b2e <__lo0bits>
 8007036:	e9dd 1200 	ldrd	r1, r2, [sp]
 800703a:	b1d0      	cbz	r0, 8007072 <__d2b+0x7e>
 800703c:	f1c0 0320 	rsb	r3, r0, #32
 8007040:	fa02 f303 	lsl.w	r3, r2, r3
 8007044:	430b      	orrs	r3, r1
 8007046:	40c2      	lsrs	r2, r0
 8007048:	6163      	str	r3, [r4, #20]
 800704a:	9201      	str	r2, [sp, #4]
 800704c:	9b01      	ldr	r3, [sp, #4]
 800704e:	61a3      	str	r3, [r4, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	bf0c      	ite	eq
 8007054:	2201      	moveq	r2, #1
 8007056:	2202      	movne	r2, #2
 8007058:	6122      	str	r2, [r4, #16]
 800705a:	b1a5      	cbz	r5, 8007086 <__d2b+0x92>
 800705c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007060:	4405      	add	r5, r0
 8007062:	603d      	str	r5, [r7, #0]
 8007064:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007068:	6030      	str	r0, [r6, #0]
 800706a:	4620      	mov	r0, r4
 800706c:	b003      	add	sp, #12
 800706e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007072:	6161      	str	r1, [r4, #20]
 8007074:	e7ea      	b.n	800704c <__d2b+0x58>
 8007076:	a801      	add	r0, sp, #4
 8007078:	f7ff fd59 	bl	8006b2e <__lo0bits>
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	6163      	str	r3, [r4, #20]
 8007080:	3020      	adds	r0, #32
 8007082:	2201      	movs	r2, #1
 8007084:	e7e8      	b.n	8007058 <__d2b+0x64>
 8007086:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800708a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800708e:	6038      	str	r0, [r7, #0]
 8007090:	6918      	ldr	r0, [r3, #16]
 8007092:	f7ff fd2d 	bl	8006af0 <__hi0bits>
 8007096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800709a:	e7e5      	b.n	8007068 <__d2b+0x74>
 800709c:	080082e4 	.word	0x080082e4
 80070a0:	080082f5 	.word	0x080082f5

080070a4 <__sflush_r>:
 80070a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ac:	0716      	lsls	r6, r2, #28
 80070ae:	4605      	mov	r5, r0
 80070b0:	460c      	mov	r4, r1
 80070b2:	d454      	bmi.n	800715e <__sflush_r+0xba>
 80070b4:	684b      	ldr	r3, [r1, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	dc02      	bgt.n	80070c0 <__sflush_r+0x1c>
 80070ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dd48      	ble.n	8007152 <__sflush_r+0xae>
 80070c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070c2:	2e00      	cmp	r6, #0
 80070c4:	d045      	beq.n	8007152 <__sflush_r+0xae>
 80070c6:	2300      	movs	r3, #0
 80070c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070cc:	682f      	ldr	r7, [r5, #0]
 80070ce:	6a21      	ldr	r1, [r4, #32]
 80070d0:	602b      	str	r3, [r5, #0]
 80070d2:	d030      	beq.n	8007136 <__sflush_r+0x92>
 80070d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	0759      	lsls	r1, r3, #29
 80070da:	d505      	bpl.n	80070e8 <__sflush_r+0x44>
 80070dc:	6863      	ldr	r3, [r4, #4]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070e2:	b10b      	cbz	r3, 80070e8 <__sflush_r+0x44>
 80070e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	2300      	movs	r3, #0
 80070ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070ec:	6a21      	ldr	r1, [r4, #32]
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b0      	blx	r6
 80070f2:	1c43      	adds	r3, r0, #1
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	d106      	bne.n	8007106 <__sflush_r+0x62>
 80070f8:	6829      	ldr	r1, [r5, #0]
 80070fa:	291d      	cmp	r1, #29
 80070fc:	d82b      	bhi.n	8007156 <__sflush_r+0xb2>
 80070fe:	4a2a      	ldr	r2, [pc, #168]	@ (80071a8 <__sflush_r+0x104>)
 8007100:	410a      	asrs	r2, r1
 8007102:	07d6      	lsls	r6, r2, #31
 8007104:	d427      	bmi.n	8007156 <__sflush_r+0xb2>
 8007106:	2200      	movs	r2, #0
 8007108:	6062      	str	r2, [r4, #4]
 800710a:	04d9      	lsls	r1, r3, #19
 800710c:	6922      	ldr	r2, [r4, #16]
 800710e:	6022      	str	r2, [r4, #0]
 8007110:	d504      	bpl.n	800711c <__sflush_r+0x78>
 8007112:	1c42      	adds	r2, r0, #1
 8007114:	d101      	bne.n	800711a <__sflush_r+0x76>
 8007116:	682b      	ldr	r3, [r5, #0]
 8007118:	b903      	cbnz	r3, 800711c <__sflush_r+0x78>
 800711a:	6560      	str	r0, [r4, #84]	@ 0x54
 800711c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800711e:	602f      	str	r7, [r5, #0]
 8007120:	b1b9      	cbz	r1, 8007152 <__sflush_r+0xae>
 8007122:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007126:	4299      	cmp	r1, r3
 8007128:	d002      	beq.n	8007130 <__sflush_r+0x8c>
 800712a:	4628      	mov	r0, r5
 800712c:	f7ff fb38 	bl	80067a0 <_free_r>
 8007130:	2300      	movs	r3, #0
 8007132:	6363      	str	r3, [r4, #52]	@ 0x34
 8007134:	e00d      	b.n	8007152 <__sflush_r+0xae>
 8007136:	2301      	movs	r3, #1
 8007138:	4628      	mov	r0, r5
 800713a:	47b0      	blx	r6
 800713c:	4602      	mov	r2, r0
 800713e:	1c50      	adds	r0, r2, #1
 8007140:	d1c9      	bne.n	80070d6 <__sflush_r+0x32>
 8007142:	682b      	ldr	r3, [r5, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0c6      	beq.n	80070d6 <__sflush_r+0x32>
 8007148:	2b1d      	cmp	r3, #29
 800714a:	d001      	beq.n	8007150 <__sflush_r+0xac>
 800714c:	2b16      	cmp	r3, #22
 800714e:	d11e      	bne.n	800718e <__sflush_r+0xea>
 8007150:	602f      	str	r7, [r5, #0]
 8007152:	2000      	movs	r0, #0
 8007154:	e022      	b.n	800719c <__sflush_r+0xf8>
 8007156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800715a:	b21b      	sxth	r3, r3
 800715c:	e01b      	b.n	8007196 <__sflush_r+0xf2>
 800715e:	690f      	ldr	r7, [r1, #16]
 8007160:	2f00      	cmp	r7, #0
 8007162:	d0f6      	beq.n	8007152 <__sflush_r+0xae>
 8007164:	0793      	lsls	r3, r2, #30
 8007166:	680e      	ldr	r6, [r1, #0]
 8007168:	bf08      	it	eq
 800716a:	694b      	ldreq	r3, [r1, #20]
 800716c:	600f      	str	r7, [r1, #0]
 800716e:	bf18      	it	ne
 8007170:	2300      	movne	r3, #0
 8007172:	eba6 0807 	sub.w	r8, r6, r7
 8007176:	608b      	str	r3, [r1, #8]
 8007178:	f1b8 0f00 	cmp.w	r8, #0
 800717c:	dde9      	ble.n	8007152 <__sflush_r+0xae>
 800717e:	6a21      	ldr	r1, [r4, #32]
 8007180:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007182:	4643      	mov	r3, r8
 8007184:	463a      	mov	r2, r7
 8007186:	4628      	mov	r0, r5
 8007188:	47b0      	blx	r6
 800718a:	2800      	cmp	r0, #0
 800718c:	dc08      	bgt.n	80071a0 <__sflush_r+0xfc>
 800718e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a0:	4407      	add	r7, r0
 80071a2:	eba8 0800 	sub.w	r8, r8, r0
 80071a6:	e7e7      	b.n	8007178 <__sflush_r+0xd4>
 80071a8:	dfbffffe 	.word	0xdfbffffe

080071ac <_fflush_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	690b      	ldr	r3, [r1, #16]
 80071b0:	4605      	mov	r5, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b913      	cbnz	r3, 80071bc <_fflush_r+0x10>
 80071b6:	2500      	movs	r5, #0
 80071b8:	4628      	mov	r0, r5
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	b118      	cbz	r0, 80071c6 <_fflush_r+0x1a>
 80071be:	6a03      	ldr	r3, [r0, #32]
 80071c0:	b90b      	cbnz	r3, 80071c6 <_fflush_r+0x1a>
 80071c2:	f7fe fb89 	bl	80058d8 <__sinit>
 80071c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f3      	beq.n	80071b6 <_fflush_r+0xa>
 80071ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071d0:	07d0      	lsls	r0, r2, #31
 80071d2:	d404      	bmi.n	80071de <_fflush_r+0x32>
 80071d4:	0599      	lsls	r1, r3, #22
 80071d6:	d402      	bmi.n	80071de <_fflush_r+0x32>
 80071d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071da:	f7fe fc74 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 80071de:	4628      	mov	r0, r5
 80071e0:	4621      	mov	r1, r4
 80071e2:	f7ff ff5f 	bl	80070a4 <__sflush_r>
 80071e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071e8:	07da      	lsls	r2, r3, #31
 80071ea:	4605      	mov	r5, r0
 80071ec:	d4e4      	bmi.n	80071b8 <_fflush_r+0xc>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	059b      	lsls	r3, r3, #22
 80071f2:	d4e1      	bmi.n	80071b8 <_fflush_r+0xc>
 80071f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071f6:	f7fe fc67 	bl	8005ac8 <__retarget_lock_release_recursive>
 80071fa:	e7dd      	b.n	80071b8 <_fflush_r+0xc>

080071fc <fiprintf>:
 80071fc:	b40e      	push	{r1, r2, r3}
 80071fe:	b503      	push	{r0, r1, lr}
 8007200:	4601      	mov	r1, r0
 8007202:	ab03      	add	r3, sp, #12
 8007204:	4805      	ldr	r0, [pc, #20]	@ (800721c <fiprintf+0x20>)
 8007206:	f853 2b04 	ldr.w	r2, [r3], #4
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	f000 f889 	bl	8007324 <_vfiprintf_r>
 8007212:	b002      	add	sp, #8
 8007214:	f85d eb04 	ldr.w	lr, [sp], #4
 8007218:	b003      	add	sp, #12
 800721a:	4770      	bx	lr
 800721c:	20000308 	.word	0x20000308

08007220 <_sbrk_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d06      	ldr	r5, [pc, #24]	@ (800723c <_sbrk_r+0x1c>)
 8007224:	2300      	movs	r3, #0
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7fa fe46 	bl	8001ebc <_sbrk>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_sbrk_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_sbrk_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	20000734 	.word	0x20000734

08007240 <memcpy>:
 8007240:	440a      	add	r2, r1
 8007242:	4291      	cmp	r1, r2
 8007244:	f100 33ff 	add.w	r3, r0, #4294967295
 8007248:	d100      	bne.n	800724c <memcpy+0xc>
 800724a:	4770      	bx	lr
 800724c:	b510      	push	{r4, lr}
 800724e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007256:	4291      	cmp	r1, r2
 8007258:	d1f9      	bne.n	800724e <memcpy+0xe>
 800725a:	bd10      	pop	{r4, pc}

0800725c <abort>:
 800725c:	b508      	push	{r3, lr}
 800725e:	2006      	movs	r0, #6
 8007260:	f000 fa34 	bl	80076cc <raise>
 8007264:	2001      	movs	r0, #1
 8007266:	f7fa fdb0 	bl	8001dca <_exit>

0800726a <_calloc_r>:
 800726a:	b570      	push	{r4, r5, r6, lr}
 800726c:	fba1 5402 	umull	r5, r4, r1, r2
 8007270:	b93c      	cbnz	r4, 8007282 <_calloc_r+0x18>
 8007272:	4629      	mov	r1, r5
 8007274:	f7ff fb08 	bl	8006888 <_malloc_r>
 8007278:	4606      	mov	r6, r0
 800727a:	b928      	cbnz	r0, 8007288 <_calloc_r+0x1e>
 800727c:	2600      	movs	r6, #0
 800727e:	4630      	mov	r0, r6
 8007280:	bd70      	pop	{r4, r5, r6, pc}
 8007282:	220c      	movs	r2, #12
 8007284:	6002      	str	r2, [r0, #0]
 8007286:	e7f9      	b.n	800727c <_calloc_r+0x12>
 8007288:	462a      	mov	r2, r5
 800728a:	4621      	mov	r1, r4
 800728c:	f7fe fb9d 	bl	80059ca <memset>
 8007290:	e7f5      	b.n	800727e <_calloc_r+0x14>

08007292 <__ascii_mbtowc>:
 8007292:	b082      	sub	sp, #8
 8007294:	b901      	cbnz	r1, 8007298 <__ascii_mbtowc+0x6>
 8007296:	a901      	add	r1, sp, #4
 8007298:	b142      	cbz	r2, 80072ac <__ascii_mbtowc+0x1a>
 800729a:	b14b      	cbz	r3, 80072b0 <__ascii_mbtowc+0x1e>
 800729c:	7813      	ldrb	r3, [r2, #0]
 800729e:	600b      	str	r3, [r1, #0]
 80072a0:	7812      	ldrb	r2, [r2, #0]
 80072a2:	1e10      	subs	r0, r2, #0
 80072a4:	bf18      	it	ne
 80072a6:	2001      	movne	r0, #1
 80072a8:	b002      	add	sp, #8
 80072aa:	4770      	bx	lr
 80072ac:	4610      	mov	r0, r2
 80072ae:	e7fb      	b.n	80072a8 <__ascii_mbtowc+0x16>
 80072b0:	f06f 0001 	mvn.w	r0, #1
 80072b4:	e7f8      	b.n	80072a8 <__ascii_mbtowc+0x16>

080072b6 <__ascii_wctomb>:
 80072b6:	4603      	mov	r3, r0
 80072b8:	4608      	mov	r0, r1
 80072ba:	b141      	cbz	r1, 80072ce <__ascii_wctomb+0x18>
 80072bc:	2aff      	cmp	r2, #255	@ 0xff
 80072be:	d904      	bls.n	80072ca <__ascii_wctomb+0x14>
 80072c0:	228a      	movs	r2, #138	@ 0x8a
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	4770      	bx	lr
 80072ca:	700a      	strb	r2, [r1, #0]
 80072cc:	2001      	movs	r0, #1
 80072ce:	4770      	bx	lr

080072d0 <__sfputc_r>:
 80072d0:	6893      	ldr	r3, [r2, #8]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	b410      	push	{r4}
 80072d8:	6093      	str	r3, [r2, #8]
 80072da:	da08      	bge.n	80072ee <__sfputc_r+0x1e>
 80072dc:	6994      	ldr	r4, [r2, #24]
 80072de:	42a3      	cmp	r3, r4
 80072e0:	db01      	blt.n	80072e6 <__sfputc_r+0x16>
 80072e2:	290a      	cmp	r1, #10
 80072e4:	d103      	bne.n	80072ee <__sfputc_r+0x1e>
 80072e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072ea:	f000 b933 	b.w	8007554 <__swbuf_r>
 80072ee:	6813      	ldr	r3, [r2, #0]
 80072f0:	1c58      	adds	r0, r3, #1
 80072f2:	6010      	str	r0, [r2, #0]
 80072f4:	7019      	strb	r1, [r3, #0]
 80072f6:	4608      	mov	r0, r1
 80072f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <__sfputs_r>:
 80072fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007300:	4606      	mov	r6, r0
 8007302:	460f      	mov	r7, r1
 8007304:	4614      	mov	r4, r2
 8007306:	18d5      	adds	r5, r2, r3
 8007308:	42ac      	cmp	r4, r5
 800730a:	d101      	bne.n	8007310 <__sfputs_r+0x12>
 800730c:	2000      	movs	r0, #0
 800730e:	e007      	b.n	8007320 <__sfputs_r+0x22>
 8007310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007314:	463a      	mov	r2, r7
 8007316:	4630      	mov	r0, r6
 8007318:	f7ff ffda 	bl	80072d0 <__sfputc_r>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d1f3      	bne.n	8007308 <__sfputs_r+0xa>
 8007320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007324 <_vfiprintf_r>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	460d      	mov	r5, r1
 800732a:	b09d      	sub	sp, #116	@ 0x74
 800732c:	4614      	mov	r4, r2
 800732e:	4698      	mov	r8, r3
 8007330:	4606      	mov	r6, r0
 8007332:	b118      	cbz	r0, 800733c <_vfiprintf_r+0x18>
 8007334:	6a03      	ldr	r3, [r0, #32]
 8007336:	b90b      	cbnz	r3, 800733c <_vfiprintf_r+0x18>
 8007338:	f7fe face 	bl	80058d8 <__sinit>
 800733c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800733e:	07d9      	lsls	r1, r3, #31
 8007340:	d405      	bmi.n	800734e <_vfiprintf_r+0x2a>
 8007342:	89ab      	ldrh	r3, [r5, #12]
 8007344:	059a      	lsls	r2, r3, #22
 8007346:	d402      	bmi.n	800734e <_vfiprintf_r+0x2a>
 8007348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800734a:	f7fe fbbc 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	071b      	lsls	r3, r3, #28
 8007352:	d501      	bpl.n	8007358 <_vfiprintf_r+0x34>
 8007354:	692b      	ldr	r3, [r5, #16]
 8007356:	b99b      	cbnz	r3, 8007380 <_vfiprintf_r+0x5c>
 8007358:	4629      	mov	r1, r5
 800735a:	4630      	mov	r0, r6
 800735c:	f000 f938 	bl	80075d0 <__swsetup_r>
 8007360:	b170      	cbz	r0, 8007380 <_vfiprintf_r+0x5c>
 8007362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007364:	07dc      	lsls	r4, r3, #31
 8007366:	d504      	bpl.n	8007372 <_vfiprintf_r+0x4e>
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	b01d      	add	sp, #116	@ 0x74
 800736e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007372:	89ab      	ldrh	r3, [r5, #12]
 8007374:	0598      	lsls	r0, r3, #22
 8007376:	d4f7      	bmi.n	8007368 <_vfiprintf_r+0x44>
 8007378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800737a:	f7fe fba5 	bl	8005ac8 <__retarget_lock_release_recursive>
 800737e:	e7f3      	b.n	8007368 <_vfiprintf_r+0x44>
 8007380:	2300      	movs	r3, #0
 8007382:	9309      	str	r3, [sp, #36]	@ 0x24
 8007384:	2320      	movs	r3, #32
 8007386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800738a:	f8cd 800c 	str.w	r8, [sp, #12]
 800738e:	2330      	movs	r3, #48	@ 0x30
 8007390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007540 <_vfiprintf_r+0x21c>
 8007394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	4623      	mov	r3, r4
 800739e:	469a      	mov	sl, r3
 80073a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073a4:	b10a      	cbz	r2, 80073aa <_vfiprintf_r+0x86>
 80073a6:	2a25      	cmp	r2, #37	@ 0x25
 80073a8:	d1f9      	bne.n	800739e <_vfiprintf_r+0x7a>
 80073aa:	ebba 0b04 	subs.w	fp, sl, r4
 80073ae:	d00b      	beq.n	80073c8 <_vfiprintf_r+0xa4>
 80073b0:	465b      	mov	r3, fp
 80073b2:	4622      	mov	r2, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7ff ffa1 	bl	80072fe <__sfputs_r>
 80073bc:	3001      	adds	r0, #1
 80073be:	f000 80a7 	beq.w	8007510 <_vfiprintf_r+0x1ec>
 80073c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c4:	445a      	add	r2, fp
 80073c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80073c8:	f89a 3000 	ldrb.w	r3, [sl]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 809f 	beq.w	8007510 <_vfiprintf_r+0x1ec>
 80073d2:	2300      	movs	r3, #0
 80073d4:	f04f 32ff 	mov.w	r2, #4294967295
 80073d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073dc:	f10a 0a01 	add.w	sl, sl, #1
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	9307      	str	r3, [sp, #28]
 80073e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80073ea:	4654      	mov	r4, sl
 80073ec:	2205      	movs	r2, #5
 80073ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f2:	4853      	ldr	r0, [pc, #332]	@ (8007540 <_vfiprintf_r+0x21c>)
 80073f4:	f7f8 ff0c 	bl	8000210 <memchr>
 80073f8:	9a04      	ldr	r2, [sp, #16]
 80073fa:	b9d8      	cbnz	r0, 8007434 <_vfiprintf_r+0x110>
 80073fc:	06d1      	lsls	r1, r2, #27
 80073fe:	bf44      	itt	mi
 8007400:	2320      	movmi	r3, #32
 8007402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007406:	0713      	lsls	r3, r2, #28
 8007408:	bf44      	itt	mi
 800740a:	232b      	movmi	r3, #43	@ 0x2b
 800740c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007410:	f89a 3000 	ldrb.w	r3, [sl]
 8007414:	2b2a      	cmp	r3, #42	@ 0x2a
 8007416:	d015      	beq.n	8007444 <_vfiprintf_r+0x120>
 8007418:	9a07      	ldr	r2, [sp, #28]
 800741a:	4654      	mov	r4, sl
 800741c:	2000      	movs	r0, #0
 800741e:	f04f 0c0a 	mov.w	ip, #10
 8007422:	4621      	mov	r1, r4
 8007424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007428:	3b30      	subs	r3, #48	@ 0x30
 800742a:	2b09      	cmp	r3, #9
 800742c:	d94b      	bls.n	80074c6 <_vfiprintf_r+0x1a2>
 800742e:	b1b0      	cbz	r0, 800745e <_vfiprintf_r+0x13a>
 8007430:	9207      	str	r2, [sp, #28]
 8007432:	e014      	b.n	800745e <_vfiprintf_r+0x13a>
 8007434:	eba0 0308 	sub.w	r3, r0, r8
 8007438:	fa09 f303 	lsl.w	r3, r9, r3
 800743c:	4313      	orrs	r3, r2
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	46a2      	mov	sl, r4
 8007442:	e7d2      	b.n	80073ea <_vfiprintf_r+0xc6>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	1d19      	adds	r1, r3, #4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	9103      	str	r1, [sp, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	bfbb      	ittet	lt
 8007450:	425b      	neglt	r3, r3
 8007452:	f042 0202 	orrlt.w	r2, r2, #2
 8007456:	9307      	strge	r3, [sp, #28]
 8007458:	9307      	strlt	r3, [sp, #28]
 800745a:	bfb8      	it	lt
 800745c:	9204      	strlt	r2, [sp, #16]
 800745e:	7823      	ldrb	r3, [r4, #0]
 8007460:	2b2e      	cmp	r3, #46	@ 0x2e
 8007462:	d10a      	bne.n	800747a <_vfiprintf_r+0x156>
 8007464:	7863      	ldrb	r3, [r4, #1]
 8007466:	2b2a      	cmp	r3, #42	@ 0x2a
 8007468:	d132      	bne.n	80074d0 <_vfiprintf_r+0x1ac>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	1d1a      	adds	r2, r3, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	9203      	str	r2, [sp, #12]
 8007472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007476:	3402      	adds	r4, #2
 8007478:	9305      	str	r3, [sp, #20]
 800747a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007550 <_vfiprintf_r+0x22c>
 800747e:	7821      	ldrb	r1, [r4, #0]
 8007480:	2203      	movs	r2, #3
 8007482:	4650      	mov	r0, sl
 8007484:	f7f8 fec4 	bl	8000210 <memchr>
 8007488:	b138      	cbz	r0, 800749a <_vfiprintf_r+0x176>
 800748a:	9b04      	ldr	r3, [sp, #16]
 800748c:	eba0 000a 	sub.w	r0, r0, sl
 8007490:	2240      	movs	r2, #64	@ 0x40
 8007492:	4082      	lsls	r2, r0
 8007494:	4313      	orrs	r3, r2
 8007496:	3401      	adds	r4, #1
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749e:	4829      	ldr	r0, [pc, #164]	@ (8007544 <_vfiprintf_r+0x220>)
 80074a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074a4:	2206      	movs	r2, #6
 80074a6:	f7f8 feb3 	bl	8000210 <memchr>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d03f      	beq.n	800752e <_vfiprintf_r+0x20a>
 80074ae:	4b26      	ldr	r3, [pc, #152]	@ (8007548 <_vfiprintf_r+0x224>)
 80074b0:	bb1b      	cbnz	r3, 80074fa <_vfiprintf_r+0x1d6>
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	3307      	adds	r3, #7
 80074b6:	f023 0307 	bic.w	r3, r3, #7
 80074ba:	3308      	adds	r3, #8
 80074bc:	9303      	str	r3, [sp, #12]
 80074be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c0:	443b      	add	r3, r7
 80074c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c4:	e76a      	b.n	800739c <_vfiprintf_r+0x78>
 80074c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ca:	460c      	mov	r4, r1
 80074cc:	2001      	movs	r0, #1
 80074ce:	e7a8      	b.n	8007422 <_vfiprintf_r+0xfe>
 80074d0:	2300      	movs	r3, #0
 80074d2:	3401      	adds	r4, #1
 80074d4:	9305      	str	r3, [sp, #20]
 80074d6:	4619      	mov	r1, r3
 80074d8:	f04f 0c0a 	mov.w	ip, #10
 80074dc:	4620      	mov	r0, r4
 80074de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074e2:	3a30      	subs	r2, #48	@ 0x30
 80074e4:	2a09      	cmp	r2, #9
 80074e6:	d903      	bls.n	80074f0 <_vfiprintf_r+0x1cc>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0c6      	beq.n	800747a <_vfiprintf_r+0x156>
 80074ec:	9105      	str	r1, [sp, #20]
 80074ee:	e7c4      	b.n	800747a <_vfiprintf_r+0x156>
 80074f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074f4:	4604      	mov	r4, r0
 80074f6:	2301      	movs	r3, #1
 80074f8:	e7f0      	b.n	80074dc <_vfiprintf_r+0x1b8>
 80074fa:	ab03      	add	r3, sp, #12
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	462a      	mov	r2, r5
 8007500:	4b12      	ldr	r3, [pc, #72]	@ (800754c <_vfiprintf_r+0x228>)
 8007502:	a904      	add	r1, sp, #16
 8007504:	4630      	mov	r0, r6
 8007506:	f7fd fda3 	bl	8005050 <_printf_float>
 800750a:	4607      	mov	r7, r0
 800750c:	1c78      	adds	r0, r7, #1
 800750e:	d1d6      	bne.n	80074be <_vfiprintf_r+0x19a>
 8007510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007512:	07d9      	lsls	r1, r3, #31
 8007514:	d405      	bmi.n	8007522 <_vfiprintf_r+0x1fe>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	059a      	lsls	r2, r3, #22
 800751a:	d402      	bmi.n	8007522 <_vfiprintf_r+0x1fe>
 800751c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800751e:	f7fe fad3 	bl	8005ac8 <__retarget_lock_release_recursive>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	065b      	lsls	r3, r3, #25
 8007526:	f53f af1f 	bmi.w	8007368 <_vfiprintf_r+0x44>
 800752a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800752c:	e71e      	b.n	800736c <_vfiprintf_r+0x48>
 800752e:	ab03      	add	r3, sp, #12
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	462a      	mov	r2, r5
 8007534:	4b05      	ldr	r3, [pc, #20]	@ (800754c <_vfiprintf_r+0x228>)
 8007536:	a904      	add	r1, sp, #16
 8007538:	4630      	mov	r0, r6
 800753a:	f7fe f821 	bl	8005580 <_printf_i>
 800753e:	e7e4      	b.n	800750a <_vfiprintf_r+0x1e6>
 8007540:	0800855b 	.word	0x0800855b
 8007544:	08008565 	.word	0x08008565
 8007548:	08005051 	.word	0x08005051
 800754c:	080072ff 	.word	0x080072ff
 8007550:	08008561 	.word	0x08008561

08007554 <__swbuf_r>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	460e      	mov	r6, r1
 8007558:	4614      	mov	r4, r2
 800755a:	4605      	mov	r5, r0
 800755c:	b118      	cbz	r0, 8007566 <__swbuf_r+0x12>
 800755e:	6a03      	ldr	r3, [r0, #32]
 8007560:	b90b      	cbnz	r3, 8007566 <__swbuf_r+0x12>
 8007562:	f7fe f9b9 	bl	80058d8 <__sinit>
 8007566:	69a3      	ldr	r3, [r4, #24]
 8007568:	60a3      	str	r3, [r4, #8]
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	071a      	lsls	r2, r3, #28
 800756e:	d501      	bpl.n	8007574 <__swbuf_r+0x20>
 8007570:	6923      	ldr	r3, [r4, #16]
 8007572:	b943      	cbnz	r3, 8007586 <__swbuf_r+0x32>
 8007574:	4621      	mov	r1, r4
 8007576:	4628      	mov	r0, r5
 8007578:	f000 f82a 	bl	80075d0 <__swsetup_r>
 800757c:	b118      	cbz	r0, 8007586 <__swbuf_r+0x32>
 800757e:	f04f 37ff 	mov.w	r7, #4294967295
 8007582:	4638      	mov	r0, r7
 8007584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	6922      	ldr	r2, [r4, #16]
 800758a:	1a98      	subs	r0, r3, r2
 800758c:	6963      	ldr	r3, [r4, #20]
 800758e:	b2f6      	uxtb	r6, r6
 8007590:	4283      	cmp	r3, r0
 8007592:	4637      	mov	r7, r6
 8007594:	dc05      	bgt.n	80075a2 <__swbuf_r+0x4e>
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f7ff fe07 	bl	80071ac <_fflush_r>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d1ed      	bne.n	800757e <__swbuf_r+0x2a>
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	60a3      	str	r3, [r4, #8]
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	6022      	str	r2, [r4, #0]
 80075ae:	701e      	strb	r6, [r3, #0]
 80075b0:	6962      	ldr	r2, [r4, #20]
 80075b2:	1c43      	adds	r3, r0, #1
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d004      	beq.n	80075c2 <__swbuf_r+0x6e>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	07db      	lsls	r3, r3, #31
 80075bc:	d5e1      	bpl.n	8007582 <__swbuf_r+0x2e>
 80075be:	2e0a      	cmp	r6, #10
 80075c0:	d1df      	bne.n	8007582 <__swbuf_r+0x2e>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f7ff fdf1 	bl	80071ac <_fflush_r>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d0d9      	beq.n	8007582 <__swbuf_r+0x2e>
 80075ce:	e7d6      	b.n	800757e <__swbuf_r+0x2a>

080075d0 <__swsetup_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4b29      	ldr	r3, [pc, #164]	@ (8007678 <__swsetup_r+0xa8>)
 80075d4:	4605      	mov	r5, r0
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	460c      	mov	r4, r1
 80075da:	b118      	cbz	r0, 80075e4 <__swsetup_r+0x14>
 80075dc:	6a03      	ldr	r3, [r0, #32]
 80075de:	b90b      	cbnz	r3, 80075e4 <__swsetup_r+0x14>
 80075e0:	f7fe f97a 	bl	80058d8 <__sinit>
 80075e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e8:	0719      	lsls	r1, r3, #28
 80075ea:	d422      	bmi.n	8007632 <__swsetup_r+0x62>
 80075ec:	06da      	lsls	r2, r3, #27
 80075ee:	d407      	bmi.n	8007600 <__swsetup_r+0x30>
 80075f0:	2209      	movs	r2, #9
 80075f2:	602a      	str	r2, [r5, #0]
 80075f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295
 80075fe:	e033      	b.n	8007668 <__swsetup_r+0x98>
 8007600:	0758      	lsls	r0, r3, #29
 8007602:	d512      	bpl.n	800762a <__swsetup_r+0x5a>
 8007604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007606:	b141      	cbz	r1, 800761a <__swsetup_r+0x4a>
 8007608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <__swsetup_r+0x46>
 8007610:	4628      	mov	r0, r5
 8007612:	f7ff f8c5 	bl	80067a0 <_free_r>
 8007616:	2300      	movs	r3, #0
 8007618:	6363      	str	r3, [r4, #52]	@ 0x34
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	2300      	movs	r3, #0
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f043 0308 	orr.w	r3, r3, #8
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	b94b      	cbnz	r3, 800764a <__swsetup_r+0x7a>
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800763c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007640:	d003      	beq.n	800764a <__swsetup_r+0x7a>
 8007642:	4621      	mov	r1, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f000 f883 	bl	8007750 <__smakebuf_r>
 800764a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764e:	f013 0201 	ands.w	r2, r3, #1
 8007652:	d00a      	beq.n	800766a <__swsetup_r+0x9a>
 8007654:	2200      	movs	r2, #0
 8007656:	60a2      	str	r2, [r4, #8]
 8007658:	6962      	ldr	r2, [r4, #20]
 800765a:	4252      	negs	r2, r2
 800765c:	61a2      	str	r2, [r4, #24]
 800765e:	6922      	ldr	r2, [r4, #16]
 8007660:	b942      	cbnz	r2, 8007674 <__swsetup_r+0xa4>
 8007662:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007666:	d1c5      	bne.n	80075f4 <__swsetup_r+0x24>
 8007668:	bd38      	pop	{r3, r4, r5, pc}
 800766a:	0799      	lsls	r1, r3, #30
 800766c:	bf58      	it	pl
 800766e:	6962      	ldrpl	r2, [r4, #20]
 8007670:	60a2      	str	r2, [r4, #8]
 8007672:	e7f4      	b.n	800765e <__swsetup_r+0x8e>
 8007674:	2000      	movs	r0, #0
 8007676:	e7f7      	b.n	8007668 <__swsetup_r+0x98>
 8007678:	20000308 	.word	0x20000308

0800767c <_raise_r>:
 800767c:	291f      	cmp	r1, #31
 800767e:	b538      	push	{r3, r4, r5, lr}
 8007680:	4605      	mov	r5, r0
 8007682:	460c      	mov	r4, r1
 8007684:	d904      	bls.n	8007690 <_raise_r+0x14>
 8007686:	2316      	movs	r3, #22
 8007688:	6003      	str	r3, [r0, #0]
 800768a:	f04f 30ff 	mov.w	r0, #4294967295
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007692:	b112      	cbz	r2, 800769a <_raise_r+0x1e>
 8007694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007698:	b94b      	cbnz	r3, 80076ae <_raise_r+0x32>
 800769a:	4628      	mov	r0, r5
 800769c:	f000 f830 	bl	8007700 <_getpid_r>
 80076a0:	4622      	mov	r2, r4
 80076a2:	4601      	mov	r1, r0
 80076a4:	4628      	mov	r0, r5
 80076a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076aa:	f000 b817 	b.w	80076dc <_kill_r>
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d00a      	beq.n	80076c8 <_raise_r+0x4c>
 80076b2:	1c59      	adds	r1, r3, #1
 80076b4:	d103      	bne.n	80076be <_raise_r+0x42>
 80076b6:	2316      	movs	r3, #22
 80076b8:	6003      	str	r3, [r0, #0]
 80076ba:	2001      	movs	r0, #1
 80076bc:	e7e7      	b.n	800768e <_raise_r+0x12>
 80076be:	2100      	movs	r1, #0
 80076c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076c4:	4620      	mov	r0, r4
 80076c6:	4798      	blx	r3
 80076c8:	2000      	movs	r0, #0
 80076ca:	e7e0      	b.n	800768e <_raise_r+0x12>

080076cc <raise>:
 80076cc:	4b02      	ldr	r3, [pc, #8]	@ (80076d8 <raise+0xc>)
 80076ce:	4601      	mov	r1, r0
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	f7ff bfd3 	b.w	800767c <_raise_r>
 80076d6:	bf00      	nop
 80076d8:	20000308 	.word	0x20000308

080076dc <_kill_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d07      	ldr	r5, [pc, #28]	@ (80076fc <_kill_r+0x20>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	4611      	mov	r1, r2
 80076e8:	602b      	str	r3, [r5, #0]
 80076ea:	f7fa fb5e 	bl	8001daa <_kill>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d102      	bne.n	80076f8 <_kill_r+0x1c>
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	b103      	cbz	r3, 80076f8 <_kill_r+0x1c>
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop
 80076fc:	20000734 	.word	0x20000734

08007700 <_getpid_r>:
 8007700:	f7fa bb4b 	b.w	8001d9a <_getpid>

08007704 <__swhatbuf_r>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	460c      	mov	r4, r1
 8007708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770c:	2900      	cmp	r1, #0
 800770e:	b096      	sub	sp, #88	@ 0x58
 8007710:	4615      	mov	r5, r2
 8007712:	461e      	mov	r6, r3
 8007714:	da0d      	bge.n	8007732 <__swhatbuf_r+0x2e>
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800771c:	f04f 0100 	mov.w	r1, #0
 8007720:	bf14      	ite	ne
 8007722:	2340      	movne	r3, #64	@ 0x40
 8007724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007728:	2000      	movs	r0, #0
 800772a:	6031      	str	r1, [r6, #0]
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	b016      	add	sp, #88	@ 0x58
 8007730:	bd70      	pop	{r4, r5, r6, pc}
 8007732:	466a      	mov	r2, sp
 8007734:	f000 f848 	bl	80077c8 <_fstat_r>
 8007738:	2800      	cmp	r0, #0
 800773a:	dbec      	blt.n	8007716 <__swhatbuf_r+0x12>
 800773c:	9901      	ldr	r1, [sp, #4]
 800773e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007746:	4259      	negs	r1, r3
 8007748:	4159      	adcs	r1, r3
 800774a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800774e:	e7eb      	b.n	8007728 <__swhatbuf_r+0x24>

08007750 <__smakebuf_r>:
 8007750:	898b      	ldrh	r3, [r1, #12]
 8007752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007754:	079d      	lsls	r5, r3, #30
 8007756:	4606      	mov	r6, r0
 8007758:	460c      	mov	r4, r1
 800775a:	d507      	bpl.n	800776c <__smakebuf_r+0x1c>
 800775c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	6123      	str	r3, [r4, #16]
 8007764:	2301      	movs	r3, #1
 8007766:	6163      	str	r3, [r4, #20]
 8007768:	b003      	add	sp, #12
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	ab01      	add	r3, sp, #4
 800776e:	466a      	mov	r2, sp
 8007770:	f7ff ffc8 	bl	8007704 <__swhatbuf_r>
 8007774:	9f00      	ldr	r7, [sp, #0]
 8007776:	4605      	mov	r5, r0
 8007778:	4639      	mov	r1, r7
 800777a:	4630      	mov	r0, r6
 800777c:	f7ff f884 	bl	8006888 <_malloc_r>
 8007780:	b948      	cbnz	r0, 8007796 <__smakebuf_r+0x46>
 8007782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007786:	059a      	lsls	r2, r3, #22
 8007788:	d4ee      	bmi.n	8007768 <__smakebuf_r+0x18>
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	f043 0302 	orr.w	r3, r3, #2
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	e7e2      	b.n	800775c <__smakebuf_r+0xc>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	6020      	str	r0, [r4, #0]
 800779a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	9b01      	ldr	r3, [sp, #4]
 80077a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077a6:	b15b      	cbz	r3, 80077c0 <__smakebuf_r+0x70>
 80077a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ac:	4630      	mov	r0, r6
 80077ae:	f000 f81d 	bl	80077ec <_isatty_r>
 80077b2:	b128      	cbz	r0, 80077c0 <__smakebuf_r+0x70>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	431d      	orrs	r5, r3
 80077c4:	81a5      	strh	r5, [r4, #12]
 80077c6:	e7cf      	b.n	8007768 <__smakebuf_r+0x18>

080077c8 <_fstat_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d07      	ldr	r5, [pc, #28]	@ (80077e8 <_fstat_r+0x20>)
 80077cc:	2300      	movs	r3, #0
 80077ce:	4604      	mov	r4, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	4611      	mov	r1, r2
 80077d4:	602b      	str	r3, [r5, #0]
 80077d6:	f7fa fb48 	bl	8001e6a <_fstat>
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	d102      	bne.n	80077e4 <_fstat_r+0x1c>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	b103      	cbz	r3, 80077e4 <_fstat_r+0x1c>
 80077e2:	6023      	str	r3, [r4, #0]
 80077e4:	bd38      	pop	{r3, r4, r5, pc}
 80077e6:	bf00      	nop
 80077e8:	20000734 	.word	0x20000734

080077ec <_isatty_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d06      	ldr	r5, [pc, #24]	@ (8007808 <_isatty_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	f7fa fb47 	bl	8001e8a <_isatty>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_isatty_r+0x1a>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_isatty_r+0x1a>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	20000734 	.word	0x20000734

0800780c <_init>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr

08007818 <_fini>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr
