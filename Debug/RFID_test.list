
RFID_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b58  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08007d28  08007d28  00008d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f8  080080f8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080080f8  080080f8  000090f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008100  08008100  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008100  08008100  00009100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008104  08008104  00009104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008108  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001d4  080082dc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080082dc  0000a458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe94  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253c  00000000  00000000  0001a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0001c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3b  00000000  00000000  0001d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023856  00000000  00000000  0001e423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014444  00000000  00000000  00041c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d55d3  00000000  00000000  000560bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b690  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  0012b6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00131078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d10 	.word	0x08007d10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007d10 	.word	0x08007d10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4603      	mov	r3, r0
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4a13      	ldr	r2, [pc, #76]	@ (8000f38 <I2C_LCD_ExpanderWrite+0x60>)
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	785a      	ldrb	r2, [r3, #1]
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	490f      	ldr	r1, [pc, #60]	@ (8000f3c <I2C_LCD_ExpanderWrite+0x64>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3304      	adds	r3, #4
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	79fa      	ldrb	r2, [r7, #7]
 8000f0e:	490b      	ldr	r1, [pc, #44]	@ (8000f3c <I2C_LCD_ExpanderWrite+0x64>)
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	b299      	uxth	r1, r3
 8000f22:	f107 020f 	add.w	r2, r7, #15
 8000f26:	2364      	movs	r3, #100	@ 0x64
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f001 fdce 	bl	8002acc <HAL_I2C_Master_Transmit>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001f0 	.word	0x200001f0
 8000f3c:	08007d60 	.word	0x08007d60

08000f40 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffbb 	bl	8000ed8 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8000f62:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <I2C_LCD_EnPulse+0xac>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <I2C_LCD_EnPulse+0xb0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <I2C_LCD_EnPulse+0xb4>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9b      	lsrs	r3, r3, #18
 8000f74:	005a      	lsls	r2, r3, #1
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <I2C_LCD_EnPulse+0xb0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	491e      	ldr	r1, [pc, #120]	@ (8000ff4 <I2C_LCD_EnPulse+0xb4>)
 8000f7c:	fba1 1303 	umull	r1, r3, r1, r3
 8000f80:	0c9b      	lsrs	r3, r3, #18
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <I2C_LCD_EnPulse+0xac>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d8f8      	bhi.n	8000f88 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff98 	bl	8000ed8 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <I2C_LCD_EnPulse+0xac>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <I2C_LCD_EnPulse+0xb0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <I2C_LCD_EnPulse+0xb4>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	0c9b      	lsrs	r3, r3, #18
 8000fba:	2232      	movs	r2, #50	@ 0x32
 8000fbc:	fb03 f202 	mul.w	r2, r3, r2
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <I2C_LCD_EnPulse+0xb0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	490b      	ldr	r1, [pc, #44]	@ (8000ff4 <I2C_LCD_EnPulse+0xb4>)
 8000fc6:	fba1 1303 	umull	r1, r3, r1, r3
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	085b      	lsrs	r3, r3, #1
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <I2C_LCD_EnPulse+0xac>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f8      	bhi.n	8000fd2 <I2C_LCD_EnPulse+0x92>
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	431bde83 	.word	0x431bde83

08000ff8 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8001008:	79ba      	ldrb	r2, [r7, #6]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff62 	bl	8000ed8 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8001014:	79ba      	ldrb	r2, [r7, #6]
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff90 	bl	8000f40 <I2C_LCD_EnPulse>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	460b      	mov	r3, r1
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	f023 030f 	bic.w	r3, r3, #15
 8001040:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	4313      	orrs	r3, r2
 800104e:	b2da      	uxtb	r2, r3
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffcf 	bl	8000ff8 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800105a:	7bba      	ldrb	r2, [r7, #14]
 800105c:	797b      	ldrb	r3, [r7, #5]
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ffc6 	bl	8000ff8 <I2C_LCD_Write4Bits>
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8001084:	79b9      	ldrb	r1, [r7, #6]
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2200      	movs	r2, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ffcc 	bl	8001028 <I2C_LCD_Send>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80010a8:	79b9      	ldrb	r1, [r7, #6]
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffba 	bl	8001028 <I2C_LCD_Send>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80010c6:	bf00      	nop
 80010c8:	f001 f8f8 	bl	80022bc <HAL_GetTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b31      	cmp	r3, #49	@ 0x31
 80010d0:	d9fa      	bls.n	80010c8 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2130      	movs	r1, #48	@ 0x30
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffcc 	bl	8001074 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e0:	e01f      	b.n	8001122 <I2C_LCD_Init+0x66>
 80010e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001210 <I2C_LCD_Init+0x154>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001214 <I2C_LCD_Init+0x158>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001218 <I2C_LCD_Init+0x15c>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9b      	lsrs	r3, r3, #18
 80010f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f8:	fb03 f202 	mul.w	r2, r3, r2
 80010fc:	4b45      	ldr	r3, [pc, #276]	@ (8001214 <I2C_LCD_Init+0x158>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4945      	ldr	r1, [pc, #276]	@ (8001218 <I2C_LCD_Init+0x15c>)
 8001102:	fba1 1303 	umull	r1, r3, r1, r3
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	085b      	lsrs	r3, r3, #1
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <I2C_LCD_Init+0x154>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f8      	bhi.n	800110e <I2C_LCD_Init+0x52>
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	3301      	adds	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	2b04      	cmp	r3, #4
 8001126:	d9dc      	bls.n	80010e2 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2130      	movs	r1, #48	@ 0x30
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffa1 	bl	8001074 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
 8001136:	e01f      	b.n	8001178 <I2C_LCD_Init+0xbc>
 8001138:	4b35      	ldr	r3, [pc, #212]	@ (8001210 <I2C_LCD_Init+0x154>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	4b35      	ldr	r3, [pc, #212]	@ (8001214 <I2C_LCD_Init+0x158>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a35      	ldr	r2, [pc, #212]	@ (8001218 <I2C_LCD_Init+0x15c>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	0c9b      	lsrs	r3, r3, #18
 800114a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114e:	fb03 f202 	mul.w	r2, r3, r2
 8001152:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <I2C_LCD_Init+0x158>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4930      	ldr	r1, [pc, #192]	@ (8001218 <I2C_LCD_Init+0x15c>)
 8001158:	fba1 1303 	umull	r1, r3, r1, r3
 800115c:	0c9b      	lsrs	r3, r3, #18
 800115e:	085b      	lsrs	r3, r3, #1
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <I2C_LCD_Init+0x154>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	429a      	cmp	r2, r3
 8001170:	d8f8      	bhi.n	8001164 <I2C_LCD_Init+0xa8>
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	3301      	adds	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	2b04      	cmp	r3, #4
 800117c:	d9dc      	bls.n	8001138 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2130      	movs	r1, #48	@ 0x30
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff76 	bl	8001074 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8001188:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <I2C_LCD_Init+0x154>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <I2C_LCD_Init+0x158>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <I2C_LCD_Init+0x15c>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	0c9b      	lsrs	r3, r3, #18
 800119a:	2296      	movs	r2, #150	@ 0x96
 800119c:	fb03 f202 	mul.w	r2, r3, r2
 80011a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <I2C_LCD_Init+0x158>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	491c      	ldr	r1, [pc, #112]	@ (8001218 <I2C_LCD_Init+0x15c>)
 80011a6:	fba1 1303 	umull	r1, r3, r1, r3
 80011aa:	0c9b      	lsrs	r3, r3, #18
 80011ac:	085b      	lsrs	r3, r3, #1
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <I2C_LCD_Init+0x154>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f8      	bhi.n	80011b2 <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2102      	movs	r1, #2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff55 	bl	8001074 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2128      	movs	r1, #40	@ 0x28
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff50 	bl	8001074 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	210c      	movs	r1, #12
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff4b 	bl	8001074 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2106      	movs	r1, #6
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff46 	bl	8001074 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <I2C_LCD_Init+0x160>)
 80011ec:	2104      	movs	r1, #4
 80011ee:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4a09      	ldr	r2, [pc, #36]	@ (800121c <I2C_LCD_Init+0x160>)
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	2208      	movs	r2, #8
 80011fc:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f80d 	bl	8001220 <I2C_LCD_Clear>
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010
 8001214:	20000000 	.word	0x20000000
 8001218:	431bde83 	.word	0x431bde83
 800121c:	200001f0 	.word	0x200001f0

08001220 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff20 	bl	8001074 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e01f      	b.n	800127a <I2C_LCD_Clear+0x5a>
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <I2C_LCD_Clear+0x6c>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <I2C_LCD_Clear+0x70>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a13      	ldr	r2, [pc, #76]	@ (8001294 <I2C_LCD_Clear+0x74>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001250:	fb03 f202 	mul.w	r2, r3, r2
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <I2C_LCD_Clear+0x70>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	490e      	ldr	r1, [pc, #56]	@ (8001294 <I2C_LCD_Clear+0x74>)
 800125a:	fba1 1303 	umull	r1, r3, r1, r3
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <I2C_LCD_Clear+0x6c>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f8      	bhi.n	8001266 <I2C_LCD_Clear+0x46>
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d9dc      	bls.n	800123a <I2C_LCD_Clear+0x1a>
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010
 8001290:	20000000 	.word	0x20000000
 8001294:	431bde83 	.word	0x431bde83

08001298 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	460b      	mov	r3, r1
 80012a4:	71bb      	strb	r3, [r7, #6]
 80012a6:	4613      	mov	r3, r2
 80012a8:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <I2C_LCD_SetCursor+0x7c>)
 80012ac:	f107 0408 	add.w	r4, r7, #8
 80012b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4917      	ldr	r1, [pc, #92]	@ (8001318 <I2C_LCD_SetCursor+0x80>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	330a      	adds	r3, #10
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	797a      	ldrb	r2, [r7, #5]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d90a      	bls.n	80012e4 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	4911      	ldr	r1, [pc, #68]	@ (8001318 <I2C_LCD_SetCursor+0x80>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	330a      	adds	r3, #10
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	3318      	adds	r3, #24
 80012ea:	443b      	add	r3, r7
 80012ec:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	4413      	add	r3, r2
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff feb4 	bl	8001074 <I2C_LCD_Cmd>
}
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	08007d28 	.word	0x08007d28
 8001318:	08007d60 	.word	0x08007d60

0800131c <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8001328:	e008      	b.n	800133c <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	603a      	str	r2, [r7, #0]
 8001330:	781a      	ldrb	r2, [r3, #0]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff feae 	bl	8001098 <I2C_LCD_Data>
    while (*Str)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f2      	bne.n	800132a <I2C_LCD_WriteString+0xe>
    }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800135a:	f107 020f 	add.w	r2, r7, #15
 800135e:	1df9      	adds	r1, r7, #7
 8001360:	2364      	movs	r3, #100	@ 0x64
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	4804      	ldr	r0, [pc, #16]	@ (8001378 <RC522_SPI_Transfer+0x28>)
 8001368:	f002 fce1 	bl	8003d2e <HAL_SPI_TransmitReceive>

	return rx_data;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000248 	.word	0x20000248

0800137c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2110      	movs	r1, #16
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <Write_MFRC522+0x48>)
 8001392:	f001 fa3d 	bl	8002810 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ffd4 	bl	8001350 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ffd0 	bl	8001350 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2110      	movs	r1, #16
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <Write_MFRC522+0x48>)
 80013b6:	f001 fa2b 	bl	8002810 <HAL_GPIO_WritePin>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40020000 	.word	0x40020000

080013c8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2110      	movs	r1, #16
 80013d6:	480f      	ldr	r0, [pc, #60]	@ (8001414 <Read_MFRC522+0x4c>)
 80013d8:	f001 fa1a 	bl	8002810 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ffad 	bl	8001350 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff ffaa 	bl	8001350 <RC522_SPI_Transfer>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2110      	movs	r1, #16
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <Read_MFRC522+0x4c>)
 8001406:	f001 fa03 	bl	8002810 <HAL_GPIO_WritePin>

	return val;
 800140a:	7bfb      	ldrb	r3, [r7, #15]

}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40020000 	.word	0x40020000

08001418 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	460a      	mov	r2, r1
 8001422:	71fb      	strb	r3, [r7, #7]
 8001424:	4613      	mov	r3, r2
 8001426:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ffcc 	bl	80013c8 <Read_MFRC522>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	4313      	orrs	r3, r2
 800143a:	b2da      	uxtb	r2, r3
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff9b 	bl	800137c <Write_MFRC522>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	460a      	mov	r2, r1
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	4613      	mov	r3, r2
 800145c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffb1 	bl	80013c8 <Read_MFRC522>
 8001466:	4603      	mov	r3, r0
 8001468:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800146a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800146e:	43db      	mvns	r3, r3
 8001470:	b25a      	sxtb	r2, r3
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4013      	ands	r3, r2
 8001478:	b25b      	sxtb	r3, r3
 800147a:	b2da      	uxtb	r2, r3
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff7b 	bl	800137c <Write_MFRC522>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001492:	2014      	movs	r0, #20
 8001494:	f7ff ff98 	bl	80013c8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001498:	2103      	movs	r1, #3
 800149a:	2014      	movs	r0, #20
 800149c:	f7ff ffbc 	bl	8001418 <SetBitMask>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80014a8:	210f      	movs	r1, #15
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff ff66 	bl	800137c <Write_MFRC522>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2110      	movs	r1, #16
 80014bc:	4812      	ldr	r0, [pc, #72]	@ (8001508 <MFRC522_Init+0x54>)
 80014be:	f001 f9a7 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2101      	movs	r1, #1
 80014c6:	4811      	ldr	r0, [pc, #68]	@ (800150c <MFRC522_Init+0x58>)
 80014c8:	f001 f9a2 	bl	8002810 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80014cc:	f7ff ffea 	bl	80014a4 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80014d0:	218d      	movs	r1, #141	@ 0x8d
 80014d2:	202a      	movs	r0, #42	@ 0x2a
 80014d4:	f7ff ff52 	bl	800137c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80014d8:	213e      	movs	r1, #62	@ 0x3e
 80014da:	202b      	movs	r0, #43	@ 0x2b
 80014dc:	f7ff ff4e 	bl	800137c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80014e0:	211e      	movs	r1, #30
 80014e2:	202d      	movs	r0, #45	@ 0x2d
 80014e4:	f7ff ff4a 	bl	800137c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80014e8:	2100      	movs	r1, #0
 80014ea:	202c      	movs	r0, #44	@ 0x2c
 80014ec:	f7ff ff46 	bl	800137c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80014f0:	2140      	movs	r1, #64	@ 0x40
 80014f2:	2015      	movs	r0, #21
 80014f4:	f7ff ff42 	bl	800137c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80014f8:	213d      	movs	r1, #61	@ 0x3d
 80014fa:	2011      	movs	r0, #17
 80014fc:	f7ff ff3e 	bl	800137c <Write_MFRC522>

	AntennaOn();
 8001500:	f7ff ffc5 	bl	800148e <AntennaOn>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400

08001510 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	4613      	mov	r3, r2
 8001520:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001522:	2302      	movs	r3, #2
 8001524:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800152a:	2300      	movs	r3, #0
 800152c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d006      	beq.n	8001542 <MFRC522_ToCard+0x32>
 8001534:	2b0e      	cmp	r3, #14
 8001536:	d109      	bne.n	800154c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001538:	2312      	movs	r3, #18
 800153a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 800153c:	2310      	movs	r3, #16
 800153e:	777b      	strb	r3, [r7, #29]
			break;
 8001540:	e005      	b.n	800154e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001542:	2377      	movs	r3, #119	@ 0x77
 8001544:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001546:	2330      	movs	r3, #48	@ 0x30
 8001548:	777b      	strb	r3, [r7, #29]
			break;
 800154a:	e000      	b.n	800154e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800154c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800154e:	7fbb      	ldrb	r3, [r7, #30]
 8001550:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4619      	mov	r1, r3
 8001558:	2002      	movs	r0, #2
 800155a:	f7ff ff0f 	bl	800137c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800155e:	2180      	movs	r1, #128	@ 0x80
 8001560:	2004      	movs	r0, #4
 8001562:	f7ff ff74 	bl	800144e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	200a      	movs	r0, #10
 800156a:	f7ff ff55 	bl	8001418 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800156e:	2100      	movs	r1, #0
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff ff03 	bl	800137c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	e00a      	b.n	8001592 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	2009      	movs	r0, #9
 8001588:	f7ff fef8 	bl	800137c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	3301      	adds	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	429a      	cmp	r2, r3
 8001598:	d3f0      	bcc.n	800157c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4619      	mov	r1, r3
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff feec 	bl	800137c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d103      	bne.n	80015b2 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80015aa:	2180      	movs	r1, #128	@ 0x80
 80015ac:	200d      	movs	r0, #13
 80015ae:	f7ff ff33 	bl	8001418 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80015b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015b6:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80015b8:	2004      	movs	r0, #4
 80015ba:	f7ff ff05 	bl	80013c8 <Read_MFRC522>
 80015be:	4603      	mov	r3, r0
 80015c0:	773b      	strb	r3, [r7, #28]
        i--;
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00a      	beq.n	80015e4 <MFRC522_ToCard+0xd4>
 80015ce:	7f3b      	ldrb	r3, [r7, #28]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d105      	bne.n	80015e4 <MFRC522_ToCard+0xd4>
 80015d8:	7f3a      	ldrb	r2, [r7, #28]
 80015da:	7f7b      	ldrb	r3, [r7, #29]
 80015dc:	4013      	ands	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0e9      	beq.n	80015b8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80015e4:	2180      	movs	r1, #128	@ 0x80
 80015e6:	200d      	movs	r0, #13
 80015e8:	f7ff ff31 	bl	800144e <ClearBitMask>

    if (i != 0)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d052      	beq.n	8001698 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80015f2:	2006      	movs	r0, #6
 80015f4:	f7ff fee8 	bl	80013c8 <Read_MFRC522>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f003 031b 	and.w	r3, r3, #27
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d148      	bne.n	8001694 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001606:	7f3a      	ldrb	r2, [r7, #28]
 8001608:	7fbb      	ldrb	r3, [r7, #30]
 800160a:	4013      	ands	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8001616:	2301      	movs	r3, #1
 8001618:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d13b      	bne.n	8001698 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001620:	200a      	movs	r0, #10
 8001622:	f7ff fed1 	bl	80013c8 <Read_MFRC522>
 8001626:	4603      	mov	r3, r0
 8001628:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800162a:	200c      	movs	r0, #12
 800162c:	f7ff fecc 	bl	80013c8 <Read_MFRC522>
 8001630:	4603      	mov	r3, r0
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 800163e:	7f3b      	ldrb	r3, [r7, #28]
 8001640:	3b01      	subs	r3, #1
 8001642:	00da      	lsls	r2, r3, #3
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	4413      	add	r3, r2
 8001648:	461a      	mov	r2, r3
 800164a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e004      	b.n	800165a <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001650:	7f3b      	ldrb	r3, [r7, #28]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	461a      	mov	r2, r3
 8001656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001658:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800165a:	7f3b      	ldrb	r3, [r7, #28]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001660:	2301      	movs	r3, #1
 8001662:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001664:	7f3b      	ldrb	r3, [r7, #28]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d901      	bls.n	800166e <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 800166a:	2310      	movs	r3, #16
 800166c:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	e00a      	b.n	800168a <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	18d4      	adds	r4, r2, r3
 800167a:	2009      	movs	r0, #9
 800167c:	f7ff fea4 	bl	80013c8 <Read_MFRC522>
 8001680:	4603      	mov	r3, r0
 8001682:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	3301      	adds	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	7f3b      	ldrb	r3, [r7, #28]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3f0      	bcc.n	8001674 <MFRC522_ToCard+0x164>
 8001692:	e001      	b.n	8001698 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8001694:	2302      	movs	r3, #2
 8001696:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001698:	7ffb      	ldrb	r3, [r7, #31]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}

080016a2 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af02      	add	r7, sp, #8
 80016a8:	4603      	mov	r3, r0
 80016aa:	6039      	str	r1, [r7, #0]
 80016ac:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80016ae:	2107      	movs	r1, #7
 80016b0:	200d      	movs	r0, #13
 80016b2:	f7ff fe63 	bl	800137c <Write_MFRC522>

	TagType[0] = reqMode;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	79fa      	ldrb	r2, [r7, #7]
 80016ba:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2201      	movs	r2, #1
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	200c      	movs	r0, #12
 80016ca:	f7ff ff21 	bl	8001510 <MFRC522_ToCard>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <MFRC522_Request+0x3c>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d001      	beq.n	80016e2 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80016de:	2302      	movs	r3, #2
 80016e0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80016f8:	2100      	movs	r1, #0
 80016fa:	200d      	movs	r0, #13
 80016fc:	f7ff fe3e 	bl	800137c <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2293      	movs	r2, #147	@ 0x93
 8001704:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3301      	adds	r3, #1
 800170a:	2220      	movs	r2, #32
 800170c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	200c      	movs	r0, #12
 800171c:	f7ff fef8 	bl	8001510 <MFRC522_ToCard>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800172a:	2300      	movs	r3, #0
 800172c:	73bb      	strb	r3, [r7, #14]
 800172e:	e009      	b.n	8001744 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	7b7b      	ldrb	r3, [r7, #13]
 800173a:	4053      	eors	r3, r2
 800173c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	3301      	adds	r3, #1
 8001742:	73bb      	strb	r3, [r7, #14]
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d9f2      	bls.n	8001730 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	7b7a      	ldrb	r2, [r7, #13]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001758:	2302      	movs	r3, #2
 800175a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800176c:	f000 fd40 	bl	80021f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001770:	f000 f860 	bl	8001834 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001774:	f000 f998 	bl	8001aa8 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001778:	f000 f8ea 	bl	8001950 <MX_SPI1_Init>
	MX_I2C1_Init();
 800177c:	f000 f8ba 	bl	80018f4 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001780:	f000 f91c 	bl	80019bc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	MFRC522_Init();
 8001784:	f7ff fe96 	bl	80014b4 <MFRC522_Init>
	I2C_LCD_Init(I2C_LCD_1);
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff fc97 	bl	80010bc <I2C_LCD_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //piezo PWM
 800178e:	2104      	movs	r1, #4
 8001790:	4824      	ldr	r0, [pc, #144]	@ (8001824 <main+0xbc>)
 8001792:	f002 fdf9 	bl	8004388 <HAL_TIM_PWM_Start>
	I2C_WELCOME();
 8001796:	f000 fa31 	bl	8001bfc <I2C_WELCOME>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Attempt to detect a card
		status = MFRC522_Request(PICC_REQIDL, str);
 800179a:	4923      	ldr	r1, [pc, #140]	@ (8001828 <main+0xc0>)
 800179c:	2026      	movs	r0, #38	@ 0x26
 800179e:	f7ff ff80 	bl	80016a2 <MFRC522_Request>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b21      	ldr	r3, [pc, #132]	@ (800182c <main+0xc4>)
 80017a8:	701a      	strb	r2, [r3, #0]
		if (status == MI_OK) {
 80017aa:	4b20      	ldr	r3, [pc, #128]	@ (800182c <main+0xc4>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f3      	bne.n	800179a <main+0x32>
			// Card detected, now perform anti-collision to get UID
			status = MFRC522_Anticoll(str);
 80017b2:	481d      	ldr	r0, [pc, #116]	@ (8001828 <main+0xc0>)
 80017b4:	f7ff ff9a 	bl	80016ec <MFRC522_Anticoll>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <main+0xc4>)
 80017be:	701a      	strb	r2, [r3, #0]
			if (status == MI_OK) {
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <main+0xc4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1e8      	bne.n	800179a <main+0x32>
				memcpy(sNum, str, 5); // Copy UID to sNum for further processing
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <main+0xc8>)
 80017ca:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <main+0xc0>)
 80017cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017d0:	6018      	str	r0, [r3, #0]
 80017d2:	3304      	adds	r3, #4
 80017d4:	7019      	strb	r1, [r3, #0]
				HAL_Delay(100);
 80017d6:	2064      	movs	r0, #100	@ 0x64
 80017d8:	f000 fd7c 	bl	80022d4 <HAL_Delay>
				if ((str[0] == 75) && (str[1] == 161) && (str[2] == 169)
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <main+0xc0>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b4b      	cmp	r3, #75	@ 0x4b
 80017e2:	d117      	bne.n	8001814 <main+0xac>
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <main+0xc0>)
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	2ba1      	cmp	r3, #161	@ 0xa1
 80017ea:	d113      	bne.n	8001814 <main+0xac>
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <main+0xc0>)
 80017ee:	789b      	ldrb	r3, [r3, #2]
 80017f0:	2ba9      	cmp	r3, #169	@ 0xa9
 80017f2:	d10f      	bne.n	8001814 <main+0xac>
						&& (str[3] == 195) && (str[4] == 128)) {
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <main+0xc0>)
 80017f6:	78db      	ldrb	r3, [r3, #3]
 80017f8:	2bc3      	cmp	r3, #195	@ 0xc3
 80017fa:	d10b      	bne.n	8001814 <main+0xac>
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <main+0xc0>)
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	2b80      	cmp	r3, #128	@ 0x80
 8001802:	d107      	bne.n	8001814 <main+0xac>
					I2C_CARD((uint8_t*) str);
 8001804:	4808      	ldr	r0, [pc, #32]	@ (8001828 <main+0xc0>)
 8001806:	f000 fa17 	bl	8001c38 <I2C_CARD>
					I2C_GRANTED();
 800180a:	f000 f9cd 	bl	8001ba8 <I2C_GRANTED>
					I2C_WELCOME();
 800180e:	f000 f9f5 	bl	8001bfc <I2C_WELCOME>
 8001812:	e006      	b.n	8001822 <main+0xba>
				} else {
					I2C_CARD((uint8_t*) str);     // Display the string on LCD
 8001814:	4804      	ldr	r0, [pc, #16]	@ (8001828 <main+0xc0>)
 8001816:	f000 fa0f 	bl	8001c38 <I2C_CARD>
					I2C_DENIED();
 800181a:	f000 f9ad 	bl	8001b78 <I2C_DENIED>
					I2C_WELCOME();
 800181e:	f000 f9ed 	bl	8001bfc <I2C_WELCOME>
		status = MFRC522_Request(PICC_REQIDL, str);
 8001822:	e7ba      	b.n	800179a <main+0x32>
 8001824:	200002a0 	.word	0x200002a0
 8001828:	200002ec 	.word	0x200002ec
 800182c:	200002e8 	.word	0x200002e8
 8001830:	200002fc 	.word	0x200002fc

08001834 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	@ 0x50
 8001838:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	2234      	movs	r2, #52	@ 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f004 f98b 	bl	8005b5e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <SystemClock_Config+0xb8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	4a22      	ldr	r2, [pc, #136]	@ (80018ec <SystemClock_Config+0xb8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	@ 0x40
 8001868:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <SystemClock_Config+0xb8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001874:	2300      	movs	r3, #0
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <SystemClock_Config+0xbc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <SystemClock_Config+0xbc>)
 8001882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <SystemClock_Config+0xbc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001894:	2302      	movs	r3, #2
 8001896:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001898:	2301      	movs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189c:	2310      	movs	r3, #16
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 ff19 	bl	80036e0 <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x84>
		Error_Handler();
 80018b4:	f000 fa54 	bl	8001d60 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 fc54 	bl	8003180 <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xae>
		Error_Handler();
 80018de:	f000 fa3f 	bl	8001d60 <Error_Handler>
	}
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	@ 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <MX_I2C1_Init+0x50>)
 80018fa:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <MX_I2C1_Init+0x54>)
 80018fc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001900:	4a12      	ldr	r2, [pc, #72]	@ (800194c <MX_I2C1_Init+0x58>)
 8001902:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <MX_I2C1_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001912:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001916:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <MX_I2C1_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <MX_I2C1_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001932:	f000 ff87 	bl	8002844 <HAL_I2C_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800193c:	f000 fa10 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200001f4 	.word	0x200001f4
 8001948:	40005400 	.word	0x40005400
 800194c:	000186a0 	.word	0x000186a0

08001950 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001954:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <MX_SPI1_Init+0x64>)
 8001956:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <MX_SPI1_Init+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <MX_SPI1_Init+0x64>)
 800195c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001960:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_SPI1_Init+0x64>)
 800197c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001980:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_SPI1_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001988:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <MX_SPI1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_SPI1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_SPI1_Init+0x64>)
 800199c:	220a      	movs	r2, #10
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80019a0:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <MX_SPI1_Init+0x64>)
 80019a2:	f002 f93b 	bl	8003c1c <HAL_SPI_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_SPI1_Init+0x60>
		Error_Handler();
 80019ac:	f000 f9d8 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000248 	.word	0x20000248
 80019b8:	40013000 	.word	0x40013000

080019bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	@ 0x38
 80019c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80019ec:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 80019f4:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 80019f6:	2210      	movs	r2, #16
 80019f8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a06:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001a14:	4823      	ldr	r0, [pc, #140]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a16:	f002 fc0f 	bl	8004238 <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x68>
		Error_Handler();
 8001a20:	f000 f99e 	bl	8001d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001a2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481c      	ldr	r0, [pc, #112]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a32:	f002 fea3 	bl	800477c <HAL_TIM_ConfigClockSource>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0x84>
		Error_Handler();
 8001a3c:	f000 f990 	bl	8001d60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001a40:	4818      	ldr	r0, [pc, #96]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a42:	f002 fc48 	bl	80042d6 <HAL_TIM_PWM_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM2_Init+0x94>
		Error_Handler();
 8001a4c:	f000 f988 	bl	8001d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001a58:	f107 0320 	add.w	r3, r7, #32
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4811      	ldr	r0, [pc, #68]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a60:	f003 fa70 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001a6a:	f000 f979 	bl	8001d60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6e:	2360      	movs	r3, #96	@ 0x60
 8001a70:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2204      	movs	r2, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4807      	ldr	r0, [pc, #28]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a86:	f002 fdb7 	bl	80045f8 <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001a90:	f000 f966 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001a94:	4803      	ldr	r0, [pc, #12]	@ (8001aa4 <MX_TIM2_Init+0xe8>)
 8001a96:	f000 fa41 	bl	8001f1c <HAL_TIM_MspPostInit>

}
 8001a9a:	bf00      	nop
 8001a9c:	3738      	adds	r7, #56	@ 0x38
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200002a0 	.word	0x200002a0

08001aa8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <MX_GPIO_Init+0xc4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a29      	ldr	r2, [pc, #164]	@ (8001b6c <MX_GPIO_Init+0xc4>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <MX_GPIO_Init+0xc4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <MX_GPIO_Init+0xc4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a22      	ldr	r2, [pc, #136]	@ (8001b6c <MX_GPIO_Init+0xc4>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <MX_GPIO_Init+0xc4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_8, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001afc:	481c      	ldr	r0, [pc, #112]	@ (8001b70 <MX_GPIO_Init+0xc8>)
 8001afe:	f000 fe87 	bl	8002810 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	481b      	ldr	r0, [pc, #108]	@ (8001b74 <MX_GPIO_Init+0xcc>)
 8001b08:	f000 fe82 	bl	8002810 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	4813      	ldr	r0, [pc, #76]	@ (8001b70 <MX_GPIO_Init+0xc8>)
 8001b24:	f000 fce0 	bl	80024e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <MX_GPIO_Init+0xcc>)
 8001b40:	f000 fcd2 	bl	80024e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <MX_GPIO_Init+0xc8>)
 8001b5e:	f000 fcc3 	bl	80024e8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001b62:	bf00      	nop
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400

08001b78 <I2C_DENIED>:
	HAL_Delay(50);
	HAL_GPIO_WritePin(RC522_RST_PORT, RC522_RST_PIN, GPIO_PIN_SET);
	HAL_Delay(50);
}

void I2C_DENIED(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	GenerateTone(300, 800);
 8001b7c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001b80:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b84:	f000 f8c6 	bl	8001d14 <GenerateTone>
	I2C_LCD_Clear(I2C_LCD_1);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fb49 	bl	8001220 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(I2C_LCD_1, 5, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2105      	movs	r1, #5
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff fb80 	bl	8001298 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(I2C_LCD_1, "DENIED");
 8001b98:	4902      	ldr	r1, [pc, #8]	@ (8001ba4 <I2C_DENIED+0x2c>)
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fbbe 	bl	800131c <I2C_LCD_WriteString>

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	08007d38 	.word	0x08007d38

08001ba8 <I2C_GRANTED>:
void I2C_GRANTED(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	GenerateTone(500, 300);
 8001bac:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001bb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bb4:	f000 f8ae 	bl	8001d14 <GenerateTone>
	HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bbe:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <I2C_GRANTED+0x4c>)
 8001bc0:	f000 fe26 	bl	8002810 <HAL_GPIO_WritePin>
	I2C_LCD_Clear(I2C_LCD_1);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff fb2b 	bl	8001220 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff fb62 	bl	8001298 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(I2C_LCD_1, "GRANTED");
 8001bd4:	4908      	ldr	r1, [pc, #32]	@ (8001bf8 <I2C_GRANTED+0x50>)
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fba0 	bl	800131c <I2C_LCD_WriteString>

	HAL_Delay(5000);
 8001bdc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001be0:	f000 fb78 	bl	80022d4 <HAL_Delay>
	HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bea:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <I2C_GRANTED+0x4c>)
 8001bec:	f000 fe10 	bl	8002810 <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	08007d40 	.word	0x08007d40

08001bfc <I2C_WELCOME>:
void I2C_WELCOME(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	I2C_LCD_Clear(I2C_LCD_1);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fb0d 	bl	8001220 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(I2C_LCD_1, 3, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2103      	movs	r1, #3
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fb44 	bl	8001298 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(I2C_LCD_1, "PRISLONITE");
 8001c10:	4907      	ldr	r1, [pc, #28]	@ (8001c30 <I2C_WELCOME+0x34>)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fb82 	bl	800131c <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(I2C_LCD_1, 4, 1);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff fb3b 	bl	8001298 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(I2C_LCD_1, "KARTICU");
 8001c22:	4904      	ldr	r1, [pc, #16]	@ (8001c34 <I2C_WELCOME+0x38>)
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fb79 	bl	800131c <I2C_LCD_WriteString>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	08007d48 	.word	0x08007d48
 8001c34:	08007d54 	.word	0x08007d54

08001c38 <I2C_CARD>:
void I2C_CARD(uint8_t *data) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b096      	sub	sp, #88	@ 0x58
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	char buffer[64] = { 0 };               // Buffer for formatted ASCII numbers
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	223c      	movs	r2, #60	@ 0x3c
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 ff86 	bl	8005b5e <memset>
	char temp[6];                        // Temporary buffer for each number

	I2C_LCD_Clear(I2C_LCD_1);            // Clear the LCD screen
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fae4 	bl	8001220 <I2C_LCD_Clear>

	// Print the first row
	I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);  // Set cursor to the first row
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff fb1b 	bl	8001298 <I2C_LCD_SetCursor>
	for (int i = 0; i < 3; i++) {       // Print first 3 values
 8001c62:	2300      	movs	r3, #0
 8001c64:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c66:	e014      	b.n	8001c92 <I2C_CARD+0x5a>
		snprintf(temp, sizeof(temp), "%d ", data[i]);
 8001c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f107 0008 	add.w	r0, r7, #8
 8001c74:	4a26      	ldr	r2, [pc, #152]	@ (8001d10 <I2C_CARD+0xd8>)
 8001c76:	2106      	movs	r1, #6
 8001c78:	f003 fefa 	bl	8005a70 <sniprintf>
		strcat(buffer, temp);
 8001c7c:	f107 0208 	add.w	r2, r7, #8
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 ff71 	bl	8005b6e <strcat>
	for (int i = 0; i < 3; i++) {       // Print first 3 values
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8e:	3301      	adds	r3, #1
 8001c90:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	dde7      	ble.n	8001c68 <I2C_CARD+0x30>
	}
	I2C_LCD_WriteString(I2C_LCD_1, buffer);  // Display the first row data
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fb3c 	bl	800131c <I2C_LCD_WriteString>

	// Clear buffer for second row
	memset(buffer, 0, sizeof(buffer));
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	2240      	movs	r2, #64	@ 0x40
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 ff56 	bl	8005b5e <memset>

	// Print the second row
	I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);  // Set cursor to the second row
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff faee 	bl	8001298 <I2C_LCD_SetCursor>
	for (int i = 3; i < 5; i++) {       // Print last 2 values
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cc0:	e014      	b.n	8001cec <I2C_CARD+0xb4>
		snprintf(temp, sizeof(temp), "%d ", data[i]);
 8001cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	f107 0008 	add.w	r0, r7, #8
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <I2C_CARD+0xd8>)
 8001cd0:	2106      	movs	r1, #6
 8001cd2:	f003 fecd 	bl	8005a70 <sniprintf>
		strcat(buffer, temp);
 8001cd6:	f107 0208 	add.w	r2, r7, #8
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 ff44 	bl	8005b6e <strcat>
	for (int i = 3; i < 5; i++) {       // Print last 2 values
 8001ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ce8:	3301      	adds	r3, #1
 8001cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	dde7      	ble.n	8001cc2 <I2C_CARD+0x8a>
	}
	I2C_LCD_WriteString(I2C_LCD_1, buffer);  // Display the second row data
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fb0f 	bl	800131c <I2C_LCD_WriteString>

	HAL_Delay(3000);  // Delay for readability
 8001cfe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001d02:	f000 fae7 	bl	80022d4 <HAL_Delay>
}
 8001d06:	bf00      	nop
 8001d08:	3758      	adds	r7, #88	@ 0x58
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	08007d5c 	.word	0x08007d5c

08001d14 <GenerateTone>:
void GenerateTone(int tone, int duration_ms) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);                     // Pokreni PWM
 8001d1e:	2104      	movs	r1, #4
 8001d20:	480e      	ldr	r0, [pc, #56]	@ (8001d5c <GenerateTone+0x48>)
 8001d22:	f002 fb31 	bl	8004388 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_AUTORELOAD(&htim2, tone * 2); // Postavi period timera (ARR) autoreload registra
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	005a      	lsls	r2, r3, #1
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <GenerateTone+0x48>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <GenerateTone+0x48>)
 8001d38:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, tone); // Postavi duty cycle na 50%
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <GenerateTone+0x48>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(duration_ms);                 // Generiraj ton na određeno vrijeme
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fac5 	bl	80022d4 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);                     // Zaustavi PWM
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <GenerateTone+0x48>)
 8001d4e:	f002 fbe3 	bl	8004518 <HAL_TIM_PWM_Stop>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200002a0 	.word	0x200002a0

08001d60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <Error_Handler+0x8>

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_I2C_MspInit+0x84>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12c      	bne.n	8001e38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e00:	2312      	movs	r3, #18
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <HAL_I2C_MspInit+0x8c>)
 8001e18:	f000 fb66 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	@ 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40005400 	.word	0x40005400
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020400 	.word	0x40020400

08001e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_SPI_MspInit+0x84>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d12b      	bne.n	8001ec6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ea6:	23e0      	movs	r3, #224	@ 0xe0
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001ec2:	f000 fb11 	bl	80024e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	@ 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40013000 	.word	0x40013000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000

08001edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eec:	d10d      	bne.n	8001f0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_TIM_Base_MspInit+0x3c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_TIM_Base_MspInit+0x3c>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_TIM_Base_MspInit+0x3c>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3c:	d11d      	bne.n	8001f7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_TIM_MspPostInit+0x68>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a0f      	ldr	r2, [pc, #60]	@ (8001f84 <HAL_TIM_MspPostInit+0x68>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <HAL_TIM_MspPostInit+0x68>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4619      	mov	r1, r3
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <HAL_TIM_MspPostInit+0x6c>)
 8001f76:	f000 fab7 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020000 	.word	0x40020000

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <NMI_Handler+0x4>

08001f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe2:	f000 f957 	bl	8002294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  return 1;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_kill>:

int _kill(int pid, int sig)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002004:	f003 fe0c 	bl	8005c20 <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	2216      	movs	r2, #22
 800200c:	601a      	str	r2, [r3, #0]
  return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_exit>:

void _exit (int status)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002022:	f04f 31ff 	mov.w	r1, #4294967295
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffe7 	bl	8001ffa <_kill>
  while (1) {}    /* Make sure we hang here */
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <_exit+0x12>

08002030 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e00a      	b.n	8002058 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002042:	f3af 8000 	nop.w
 8002046:	4601      	mov	r1, r0
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	60ba      	str	r2, [r7, #8]
 800204e:	b2ca      	uxtb	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf0      	blt.n	8002042 <_read+0x12>
  }

  return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e009      	b.n	8002090 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	60ba      	str	r2, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	dbf1      	blt.n	800207c <_write+0x12>
  }
  return len;
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_close>:

int _close(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ca:	605a      	str	r2, [r3, #4]
  return 0;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_isatty>:

int _isatty(int file)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002114:	4a14      	ldr	r2, [pc, #80]	@ (8002168 <_sbrk+0x5c>)
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <_sbrk+0x60>)
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <_sbrk+0x64>)
 800212a:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <_sbrk+0x68>)
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	429a      	cmp	r2, r3
 800213a:	d207      	bcs.n	800214c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800213c:	f003 fd70 	bl	8005c20 <__errno>
 8002140:	4603      	mov	r3, r0
 8002142:	220c      	movs	r2, #12
 8002144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	e009      	b.n	8002160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <_sbrk+0x64>)
 800215c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215e:	68fb      	ldr	r3, [r7, #12]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20020000 	.word	0x20020000
 800216c:	00000400 	.word	0x00000400
 8002170:	20000304 	.word	0x20000304
 8002174:	20000458 	.word	0x20000458

08002178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <SystemInit+0x20>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <SystemInit+0x20>)
 8002184:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002188:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800219c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021a0:	f7ff ffea 	bl	8002178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a4:	480c      	ldr	r0, [pc, #48]	@ (80021d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a6:	490d      	ldr	r1, [pc, #52]	@ (80021dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021bc:	4c0a      	ldr	r4, [pc, #40]	@ (80021e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ca:	f003 fd2f 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ce:	f7ff facb 	bl	8001768 <main>
  bx  lr    
 80021d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021e0:	08008108 	.word	0x08008108
  ldr r2, =_sbss
 80021e4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021e8:	20000458 	.word	0x20000458

080021ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC_IRQHandler>
	...

080021f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002230 <HAL_Init+0x40>)
 80021fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <HAL_Init+0x40>)
 8002206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a07      	ldr	r2, [pc, #28]	@ (8002230 <HAL_Init+0x40>)
 8002212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002218:	2003      	movs	r0, #3
 800221a:	f000 f931 	bl	8002480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221e:	200f      	movs	r0, #15
 8002220:	f000 f808 	bl	8002234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002224:	f7ff fda2 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023c00 	.word	0x40023c00

08002234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_InitTick+0x54>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_InitTick+0x58>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224a:	fbb3 f3f1 	udiv	r3, r3, r1
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f93b 	bl	80024ce <HAL_SYSTICK_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e00e      	b.n	8002280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d80a      	bhi.n	800227e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f000 f911 	bl	8002496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002274:	4a06      	ldr	r2, [pc, #24]	@ (8002290 <HAL_InitTick+0x5c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000000 	.word	0x20000000
 800228c:	20000008 	.word	0x20000008
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_IncTick+0x20>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_IncTick+0x24>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <HAL_IncTick+0x24>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000008 	.word	0x20000008
 80022b8:	20000308 	.word	0x20000308

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_GetTick+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000308 	.word	0x20000308

080022d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff ffee 	bl	80022bc <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d005      	beq.n	80022fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_Delay+0x44>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022fa:	bf00      	nop
 80022fc:	f7ff ffde 	bl	80022bc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d8f7      	bhi.n	80022fc <HAL_Delay+0x28>
  {
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000008 	.word	0x20000008

0800231c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800234c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234e:	4a04      	ldr	r2, [pc, #16]	@ (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002368:	4b04      	ldr	r3, [pc, #16]	@ (800237c <__NVIC_GetPriorityGrouping+0x18>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0307 	and.w	r3, r3, #7
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	@ (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	@ (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	@ 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	@ 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800244c:	d301      	bcc.n	8002452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244e:	2301      	movs	r3, #1
 8002450:	e00f      	b.n	8002472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <SysTick_Config+0x40>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245a:	210f      	movs	r1, #15
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f7ff ff8e 	bl	8002380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <SysTick_Config+0x40>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246a:	4b04      	ldr	r3, [pc, #16]	@ (800247c <SysTick_Config+0x40>)
 800246c:	2207      	movs	r2, #7
 800246e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	e000e010 	.word	0xe000e010

08002480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff47 	bl	800231c <__NVIC_SetPriorityGrouping>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a8:	f7ff ff5c 	bl	8002364 <__NVIC_GetPriorityGrouping>
 80024ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f7ff ff8e 	bl	80023d4 <NVIC_EncodePriority>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff5d 	bl	8002380 <__NVIC_SetPriority>
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffb0 	bl	800243c <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e165      	b.n	80027d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 8154 	bne.w	80027ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d005      	beq.n	800253a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	2b02      	cmp	r3, #2
 8002538:	d130      	bne.n	800259c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0201 	and.w	r2, r3, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d017      	beq.n	80025d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d123      	bne.n	800262c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80ae 	beq.w	80027ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b5d      	ldr	r3, [pc, #372]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	4a5c      	ldr	r2, [pc, #368]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267c:	6453      	str	r3, [r2, #68]	@ 0x44
 800267e:	4b5a      	ldr	r3, [pc, #360]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a58      	ldr	r2, [pc, #352]	@ (80027ec <HAL_GPIO_Init+0x304>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4f      	ldr	r2, [pc, #316]	@ (80027f0 <HAL_GPIO_Init+0x308>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d025      	beq.n	8002702 <HAL_GPIO_Init+0x21a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4e      	ldr	r2, [pc, #312]	@ (80027f4 <HAL_GPIO_Init+0x30c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01f      	beq.n	80026fe <HAL_GPIO_Init+0x216>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4d      	ldr	r2, [pc, #308]	@ (80027f8 <HAL_GPIO_Init+0x310>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d019      	beq.n	80026fa <HAL_GPIO_Init+0x212>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4c      	ldr	r2, [pc, #304]	@ (80027fc <HAL_GPIO_Init+0x314>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_GPIO_Init+0x20e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002800 <HAL_GPIO_Init+0x318>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00d      	beq.n	80026f2 <HAL_GPIO_Init+0x20a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002804 <HAL_GPIO_Init+0x31c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <HAL_GPIO_Init+0x206>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a49      	ldr	r2, [pc, #292]	@ (8002808 <HAL_GPIO_Init+0x320>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_GPIO_Init+0x202>
 80026e6:	2306      	movs	r3, #6
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x21c>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x21c>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x21c>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x21c>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x21c>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x21c>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x21c>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	@ (80027ec <HAL_GPIO_Init+0x304>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3a      	ldr	r3, [pc, #232]	@ (800280c <HAL_GPIO_Init+0x324>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a31      	ldr	r2, [pc, #196]	@ (800280c <HAL_GPIO_Init+0x324>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <HAL_GPIO_Init+0x324>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a26      	ldr	r2, [pc, #152]	@ (800280c <HAL_GPIO_Init+0x324>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b25      	ldr	r3, [pc, #148]	@ (800280c <HAL_GPIO_Init+0x324>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1c      	ldr	r2, [pc, #112]	@ (800280c <HAL_GPIO_Init+0x324>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <HAL_GPIO_Init+0x324>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a11      	ldr	r2, [pc, #68]	@ (800280c <HAL_GPIO_Init+0x324>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae96 	bls.w	8002504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	@ 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002820:	787b      	ldrb	r3, [r7, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800282c:	e003      	b.n	8002836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	041a      	lsls	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	619a      	str	r2, [r3, #24]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e12b      	b.n	8002aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff faa6 	bl	8001dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	@ 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a8:	f000 fd5c 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 80028ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a81      	ldr	r2, [pc, #516]	@ (8002ab8 <HAL_I2C_Init+0x274>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d807      	bhi.n	80028c8 <HAL_I2C_Init+0x84>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a80      	ldr	r2, [pc, #512]	@ (8002abc <HAL_I2C_Init+0x278>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf94      	ite	ls
 80028c0:	2301      	movls	r3, #1
 80028c2:	2300      	movhi	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e006      	b.n	80028d6 <HAL_I2C_Init+0x92>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a7d      	ldr	r2, [pc, #500]	@ (8002ac0 <HAL_I2C_Init+0x27c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0e7      	b.n	8002aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a78      	ldr	r2, [pc, #480]	@ (8002ac4 <HAL_I2C_Init+0x280>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ab8 <HAL_I2C_Init+0x274>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d802      	bhi.n	8002918 <HAL_I2C_Init+0xd4>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3301      	adds	r3, #1
 8002916:	e009      	b.n	800292c <HAL_I2C_Init+0xe8>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	4a69      	ldr	r2, [pc, #420]	@ (8002ac8 <HAL_I2C_Init+0x284>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	3301      	adds	r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800293e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	495c      	ldr	r1, [pc, #368]	@ (8002ab8 <HAL_I2C_Init+0x274>)
 8002948:	428b      	cmp	r3, r1
 800294a:	d819      	bhi.n	8002980 <HAL_I2C_Init+0x13c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e59      	subs	r1, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fbb1 f3f3 	udiv	r3, r1, r3
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002960:	400b      	ands	r3, r1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_I2C_Init+0x138>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e59      	subs	r1, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fbb1 f3f3 	udiv	r3, r1, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297a:	e051      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 800297c:	2304      	movs	r3, #4
 800297e:	e04f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d111      	bne.n	80029ac <HAL_I2C_Init+0x168>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e012      	b.n	80029d2 <HAL_I2C_Init+0x18e>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	0099      	lsls	r1, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Init+0x196>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e022      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10e      	bne.n	8002a00 <HAL_I2C_Init+0x1bc>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e58      	subs	r0, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029fe:	e00f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	0099      	lsls	r1, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6809      	ldr	r1, [r1, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6911      	ldr	r1, [r2, #16]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	000186a0 	.word	0x000186a0
 8002abc:	001e847f 	.word	0x001e847f
 8002ac0:	003d08ff 	.word	0x003d08ff
 8002ac4:	431bde83 	.word	0x431bde83
 8002ac8:	10624dd3 	.word	0x10624dd3

08002acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	817b      	strh	r3, [r7, #10]
 8002adc:	4613      	mov	r3, r2
 8002ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff fbec 	bl	80022bc <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	f040 80e0 	bne.w	8002cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	4970      	ldr	r1, [pc, #448]	@ (8002cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f964 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0d3      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2C_Master_Transmit+0x50>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d007      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2221      	movs	r2, #33	@ 0x21
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a50      	ldr	r2, [pc, #320]	@ (8002cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f89c 	bl	8002cc8 <I2C_MasterRequestWrite>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e08d      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bb0:	e066      	b.n	8002c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6a39      	ldr	r1, [r7, #32]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fa22 	bl	8003000 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06b      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d11b      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x188>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d017      	beq.n	8002c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	6a39      	ldr	r1, [r7, #32]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fa19 	bl	8003090 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d107      	bne.n	8002c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e01a      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d194      	bne.n	8002bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	00100002 	.word	0x00100002
 8002cc4:	ffff0000 	.word	0xffff0000

08002cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d006      	beq.n	8002cf2 <I2C_MasterRequestWrite+0x2a>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d003      	beq.n	8002cf2 <I2C_MasterRequestWrite+0x2a>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e00b      	b.n	8002d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	2b12      	cmp	r3, #18
 8002d0a:	d107      	bne.n	8002d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f84f 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d42:	d103      	bne.n	8002d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e035      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	e01b      	b.n	8002da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	11db      	asrs	r3, r3, #7
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0306 	and.w	r3, r3, #6
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f063 030f 	orn	r3, r3, #15
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	490e      	ldr	r1, [pc, #56]	@ (8002dc4 <I2C_MasterRequestWrite+0xfc>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f898 	bl	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e010      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4907      	ldr	r1, [pc, #28]	@ (8002dc8 <I2C_MasterRequestWrite+0x100>)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f888 	bl	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	00010008 	.word	0x00010008
 8002dc8:	00010002 	.word	0x00010002

08002dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	e048      	b.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d044      	beq.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7ff fa69 	bl	80022bc <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d139      	bne.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10d      	bne.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4013      	ands	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	e00c      	b.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d116      	bne.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e023      	b.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10d      	bne.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	43da      	mvns	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	e00c      	b.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d093      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ece:	e071      	b.n	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ede:	d123      	bne.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f043 0204 	orr.w	r2, r3, #4
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e067      	b.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d041      	beq.n	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f30:	f7ff f9c4 	bl	80022bc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d302      	bcc.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d136      	bne.n	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10c      	bne.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	e00b      	b.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d016      	beq.n	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e021      	b.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	0c1b      	lsrs	r3, r3, #16
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10c      	bne.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e00b      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f47f af6d 	bne.w	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300c:	e034      	b.n	8003078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f886 	bl	8003120 <I2C_IsAcknowledgeFailed>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e034      	b.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d028      	beq.n	8003078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7ff f949 	bl	80022bc <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11d      	bne.n	8003078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003046:	2b80      	cmp	r3, #128	@ 0x80
 8003048:	d016      	beq.n	8003078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b80      	cmp	r3, #128	@ 0x80
 8003084:	d1c3      	bne.n	800300e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800309c:	e034      	b.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f83e 	bl	8003120 <I2C_IsAcknowledgeFailed>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e034      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d028      	beq.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7ff f901 	bl	80022bc <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11d      	bne.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d016      	beq.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e007      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d1c3      	bne.n	800309e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003136:	d11b      	bne.n	8003170 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003140:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0cc      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003194:	4b68      	ldr	r3, [pc, #416]	@ (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d90c      	bls.n	80031bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b65      	ldr	r3, [pc, #404]	@ (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b63      	ldr	r3, [pc, #396]	@ (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0b8      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d4:	4b59      	ldr	r3, [pc, #356]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4a58      	ldr	r2, [pc, #352]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ec:	4b53      	ldr	r3, [pc, #332]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a52      	ldr	r2, [pc, #328]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b50      	ldr	r3, [pc, #320]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	494d      	ldr	r1, [pc, #308]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d044      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	4b47      	ldr	r3, [pc, #284]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d119      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e07f      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d003      	beq.n	800323e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323a:	2b03      	cmp	r3, #3
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323e:	4b3f      	ldr	r3, [pc, #252]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06f      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	4b3b      	ldr	r3, [pc, #236]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e067      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325e:	4b37      	ldr	r3, [pc, #220]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4934      	ldr	r1, [pc, #208]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003270:	f7ff f824 	bl	80022bc <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	e00a      	b.n	800328e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003278:	f7ff f820 	bl	80022bc <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e04f      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	4b2b      	ldr	r3, [pc, #172]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 020c 	and.w	r2, r3, #12
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	429a      	cmp	r2, r3
 800329e:	d1eb      	bne.n	8003278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a0:	4b25      	ldr	r3, [pc, #148]	@ (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d20c      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b22      	ldr	r3, [pc, #136]	@ (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e032      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d4:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4916      	ldr	r1, [pc, #88]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f2:	4b12      	ldr	r3, [pc, #72]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	490e      	ldr	r1, [pc, #56]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003306:	f000 f841 	bl	800338c <HAL_RCC_GetSysClockFreq>
 800330a:	4602      	mov	r2, r0
 800330c:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	490a      	ldr	r1, [pc, #40]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	5ccb      	ldrb	r3, [r1, r3]
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	4a09      	ldr	r2, [pc, #36]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe ff84 	bl	8002234 <HAL_InitTick>

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023c00 	.word	0x40023c00
 800333c:	40023800 	.word	0x40023800
 8003340:	08007d6c 	.word	0x08007d6c
 8003344:	20000000 	.word	0x20000000
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b03      	ldr	r3, [pc, #12]	@ (8003360 <HAL_RCC_GetHCLKFreq+0x14>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000000 	.word	0x20000000

08003364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003368:	f7ff fff0 	bl	800334c <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0a9b      	lsrs	r3, r3, #10
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4903      	ldr	r1, [pc, #12]	@ (8003388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	08007d7c 	.word	0x08007d7c

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b0a6      	sub	sp, #152	@ 0x98
 8003392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b2:	4bc8      	ldr	r3, [pc, #800]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	f200 817e 	bhi.w	80036bc <HAL_RCC_GetSysClockFreq+0x330>
 80033c0:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033fd 	.word	0x080033fd
 80033cc:	080036bd 	.word	0x080036bd
 80033d0:	080036bd 	.word	0x080036bd
 80033d4:	080036bd 	.word	0x080036bd
 80033d8:	08003405 	.word	0x08003405
 80033dc:	080036bd 	.word	0x080036bd
 80033e0:	080036bd 	.word	0x080036bd
 80033e4:	080036bd 	.word	0x080036bd
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	080036bd 	.word	0x080036bd
 80033f0:	080036bd 	.word	0x080036bd
 80033f4:	080036bd 	.word	0x080036bd
 80033f8:	08003577 	.word	0x08003577
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4bb6      	ldr	r3, [pc, #728]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80033fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003402:	e15f      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003404:	4bb5      	ldr	r3, [pc, #724]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x350>)
 8003406:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800340a:	e15b      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800340c:	4bb1      	ldr	r3, [pc, #708]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003414:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003418:	4bae      	ldr	r3, [pc, #696]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d031      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003424:	4bab      	ldr	r3, [pc, #684]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	2200      	movs	r2, #0
 800342c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800342e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003430:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	663b      	str	r3, [r7, #96]	@ 0x60
 8003438:	2300      	movs	r3, #0
 800343a:	667b      	str	r3, [r7, #100]	@ 0x64
 800343c:	4ba7      	ldr	r3, [pc, #668]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x350>)
 800343e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003442:	462a      	mov	r2, r5
 8003444:	fb03 f202 	mul.w	r2, r3, r2
 8003448:	2300      	movs	r3, #0
 800344a:	4621      	mov	r1, r4
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	4aa2      	ldr	r2, [pc, #648]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x350>)
 8003454:	4621      	mov	r1, r4
 8003456:	fba1 1202 	umull	r1, r2, r1, r2
 800345a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800345c:	460a      	mov	r2, r1
 800345e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003460:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003462:	4413      	add	r3, r2
 8003464:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800346a:	2200      	movs	r2, #0
 800346c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800346e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003470:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003474:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003478:	f7fd fbb6 	bl	8000be8 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4613      	mov	r3, r2
 8003482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003486:	e064      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003488:	4b92      	ldr	r3, [pc, #584]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	2200      	movs	r2, #0
 8003490:	653b      	str	r3, [r7, #80]	@ 0x50
 8003492:	657a      	str	r2, [r7, #84]	@ 0x54
 8003494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800349c:	2300      	movs	r3, #0
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80034a4:	4622      	mov	r2, r4
 80034a6:	462b      	mov	r3, r5
 80034a8:	f04f 0000 	mov.w	r0, #0
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	0159      	lsls	r1, r3, #5
 80034b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b6:	0150      	lsls	r0, r2, #5
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4621      	mov	r1, r4
 80034be:	1a51      	subs	r1, r2, r1
 80034c0:	6139      	str	r1, [r7, #16]
 80034c2:	4629      	mov	r1, r5
 80034c4:	eb63 0301 	sbc.w	r3, r3, r1
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d6:	4659      	mov	r1, fp
 80034d8:	018b      	lsls	r3, r1, #6
 80034da:	4651      	mov	r1, sl
 80034dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e0:	4651      	mov	r1, sl
 80034e2:	018a      	lsls	r2, r1, #6
 80034e4:	4651      	mov	r1, sl
 80034e6:	ebb2 0801 	subs.w	r8, r2, r1
 80034ea:	4659      	mov	r1, fp
 80034ec:	eb63 0901 	sbc.w	r9, r3, r1
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003500:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003504:	4690      	mov	r8, r2
 8003506:	4699      	mov	r9, r3
 8003508:	4623      	mov	r3, r4
 800350a:	eb18 0303 	adds.w	r3, r8, r3
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	462b      	mov	r3, r5
 8003512:	eb49 0303 	adc.w	r3, r9, r3
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003524:	4629      	mov	r1, r5
 8003526:	028b      	lsls	r3, r1, #10
 8003528:	4621      	mov	r1, r4
 800352a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800352e:	4621      	mov	r1, r4
 8003530:	028a      	lsls	r2, r1, #10
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800353a:	2200      	movs	r2, #0
 800353c:	643b      	str	r3, [r7, #64]	@ 0x40
 800353e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003540:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003544:	f7fd fb50 	bl	8000be8 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4613      	mov	r3, r2
 800354e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003552:	4b60      	ldr	r3, [pc, #384]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	3301      	adds	r3, #1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003564:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003574:	e0a6      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003576:	4b57      	ldr	r3, [pc, #348]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800357e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003582:	4b54      	ldr	r3, [pc, #336]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d02a      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b51      	ldr	r3, [pc, #324]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003598:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035a0:	2100      	movs	r1, #0
 80035a2:	4b4e      	ldr	r3, [pc, #312]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x350>)
 80035a4:	fb03 f201 	mul.w	r2, r3, r1
 80035a8:	2300      	movs	r3, #0
 80035aa:	fb00 f303 	mul.w	r3, r0, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	4a4a      	ldr	r2, [pc, #296]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x350>)
 80035b2:	fba0 1202 	umull	r1, r2, r0, r2
 80035b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80035b8:	460a      	mov	r2, r1
 80035ba:	673a      	str	r2, [r7, #112]	@ 0x70
 80035bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035be:	4413      	add	r3, r2
 80035c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80035c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c6:	2200      	movs	r2, #0
 80035c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ca:	637a      	str	r2, [r7, #52]	@ 0x34
 80035cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80035d0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80035d4:	f7fd fb08 	bl	8000be8 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4613      	mov	r3, r2
 80035de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035e2:	e05b      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e4:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	2200      	movs	r2, #0
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003600:	4642      	mov	r2, r8
 8003602:	464b      	mov	r3, r9
 8003604:	f04f 0000 	mov.w	r0, #0
 8003608:	f04f 0100 	mov.w	r1, #0
 800360c:	0159      	lsls	r1, r3, #5
 800360e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003612:	0150      	lsls	r0, r2, #5
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4641      	mov	r1, r8
 800361a:	ebb2 0a01 	subs.w	sl, r2, r1
 800361e:	4649      	mov	r1, r9
 8003620:	eb63 0b01 	sbc.w	fp, r3, r1
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003638:	ebb2 040a 	subs.w	r4, r2, sl
 800363c:	eb63 050b 	sbc.w	r5, r3, fp
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	00eb      	lsls	r3, r5, #3
 800364a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364e:	00e2      	lsls	r2, r4, #3
 8003650:	4614      	mov	r4, r2
 8003652:	461d      	mov	r5, r3
 8003654:	4643      	mov	r3, r8
 8003656:	18e3      	adds	r3, r4, r3
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	464b      	mov	r3, r9
 800365c:	eb45 0303 	adc.w	r3, r5, r3
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800366e:	4629      	mov	r1, r5
 8003670:	028b      	lsls	r3, r1, #10
 8003672:	4621      	mov	r1, r4
 8003674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003678:	4621      	mov	r1, r4
 800367a:	028a      	lsls	r2, r1, #10
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003684:	2200      	movs	r2, #0
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	61fa      	str	r2, [r7, #28]
 800368a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800368e:	f7fd faab 	bl	8000be8 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4613      	mov	r3, r2
 8003698:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800369c:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	0f1b      	lsrs	r3, r3, #28
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80036aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80036ba:	e003      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80036be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80036c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3798      	adds	r7, #152	@ 0x98
 80036cc:	46bd      	mov	sp, r7
 80036ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	017d7840 	.word	0x017d7840

080036e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e28d      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8083 	beq.w	8003806 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003700:	4b94      	ldr	r3, [pc, #592]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b04      	cmp	r3, #4
 800370a:	d019      	beq.n	8003740 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800370c:	4b91      	ldr	r3, [pc, #580]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
        || \
 8003714:	2b08      	cmp	r3, #8
 8003716:	d106      	bne.n	8003726 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003718:	4b8e      	ldr	r3, [pc, #568]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003724:	d00c      	beq.n	8003740 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003726:	4b8b      	ldr	r3, [pc, #556]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d112      	bne.n	8003758 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003732:	4b88      	ldr	r3, [pc, #544]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	4b84      	ldr	r3, [pc, #528]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d05b      	beq.n	8003804 <HAL_RCC_OscConfig+0x124>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d157      	bne.n	8003804 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e25a      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x90>
 8003762:	4b7c      	ldr	r3, [pc, #496]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a7b      	ldr	r2, [pc, #492]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e01d      	b.n	80037ac <HAL_RCC_OscConfig+0xcc>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0xb4>
 800377a:	4b76      	ldr	r3, [pc, #472]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a75      	ldr	r2, [pc, #468]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b73      	ldr	r3, [pc, #460]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a72      	ldr	r2, [pc, #456]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0xcc>
 8003794:	4b6f      	ldr	r3, [pc, #444]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a6e      	ldr	r2, [pc, #440]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe fd82 	bl	80022bc <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fe fd7e 	bl	80022bc <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	@ 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e21f      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b61      	ldr	r3, [pc, #388]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0xdc>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe fd6e 	bl	80022bc <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe fd6a 	bl	80022bc <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	@ 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e20b      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	4b57      	ldr	r3, [pc, #348]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x104>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d06f      	beq.n	80038f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003812:	4b50      	ldr	r3, [pc, #320]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800381e:	4b4d      	ldr	r3, [pc, #308]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
        || \
 8003826:	2b08      	cmp	r3, #8
 8003828:	d105      	bne.n	8003836 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800382a:	4b4a      	ldr	r3, [pc, #296]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003836:	4b47      	ldr	r3, [pc, #284]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d11c      	bne.n	800387c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b44      	ldr	r3, [pc, #272]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	4b41      	ldr	r3, [pc, #260]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_RCC_OscConfig+0x186>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e1d3      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003866:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4937      	ldr	r1, [pc, #220]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	e03a      	b.n	80038f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003884:	4b34      	ldr	r3, [pc, #208]	@ (8003958 <HAL_RCC_OscConfig+0x278>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fe fd17 	bl	80022bc <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003892:	f7fe fd13 	bl	80022bc <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e1b4      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b28      	ldr	r3, [pc, #160]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4925      	ldr	r1, [pc, #148]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]
 80038c4:	e015      	b.n	80038f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c6:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_RCC_OscConfig+0x278>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fcf6 	bl	80022bc <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d4:	f7fe fcf2 	bl	80022bc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e193      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d036      	beq.n	800396c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d016      	beq.n	8003934 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003906:	4b15      	ldr	r3, [pc, #84]	@ (800395c <HAL_RCC_OscConfig+0x27c>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe fcd6 	bl	80022bc <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003914:	f7fe fcd2 	bl	80022bc <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e173      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x234>
 8003932:	e01b      	b.n	800396c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003934:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_RCC_OscConfig+0x27c>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fe fcbf 	bl	80022bc <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003940:	e00e      	b.n	8003960 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003942:	f7fe fcbb 	bl	80022bc <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d907      	bls.n	8003960 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e15c      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
 8003954:	40023800 	.word	0x40023800
 8003958:	42470000 	.word	0x42470000
 800395c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	4b8a      	ldr	r3, [pc, #552]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ea      	bne.n	8003942 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8097 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397e:	4b83      	ldr	r3, [pc, #524]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	4a7e      	ldr	r2, [pc, #504]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003998:	6413      	str	r3, [r2, #64]	@ 0x40
 800399a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	4b79      	ldr	r3, [pc, #484]	@ (8003b90 <HAL_RCC_OscConfig+0x4b0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d118      	bne.n	80039e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b6:	4b76      	ldr	r3, [pc, #472]	@ (8003b90 <HAL_RCC_OscConfig+0x4b0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a75      	ldr	r2, [pc, #468]	@ (8003b90 <HAL_RCC_OscConfig+0x4b0>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7fe fc7b 	bl	80022bc <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fe fc77 	bl	80022bc <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e118      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b90 <HAL_RCC_OscConfig+0x4b0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x31e>
 80039f0:	4b66      	ldr	r3, [pc, #408]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f4:	4a65      	ldr	r2, [pc, #404]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80039fc:	e01c      	b.n	8003a38 <HAL_RCC_OscConfig+0x358>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x340>
 8003a06:	4b61      	ldr	r3, [pc, #388]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	4a60      	ldr	r2, [pc, #384]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a12:	4b5e      	ldr	r3, [pc, #376]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a16:	4a5d      	ldr	r2, [pc, #372]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0x358>
 8003a20:	4b5a      	ldr	r3, [pc, #360]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a24:	4a59      	ldr	r2, [pc, #356]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2c:	4b57      	ldr	r3, [pc, #348]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a30:	4a56      	ldr	r2, [pc, #344]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a32:	f023 0304 	bic.w	r3, r3, #4
 8003a36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fe fc3c 	bl	80022bc <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fe fc38 	bl	80022bc <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0d7      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ee      	beq.n	8003a48 <HAL_RCC_OscConfig+0x368>
 8003a6a:	e014      	b.n	8003a96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe fc26 	bl	80022bc <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fe fc22 	bl	80022bc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0c1      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	4b40      	ldr	r3, [pc, #256]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ee      	bne.n	8003a74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	4a3a      	ldr	r2, [pc, #232]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80ad 	beq.w	8003c0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab2:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d060      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d145      	bne.n	8003b52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	4b33      	ldr	r3, [pc, #204]	@ (8003b94 <HAL_RCC_OscConfig+0x4b4>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe fbf6 	bl	80022bc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fe fbf2 	bl	80022bc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e093      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	4b29      	ldr	r3, [pc, #164]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	019b      	lsls	r3, r3, #6
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	041b      	lsls	r3, r3, #16
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	071b      	lsls	r3, r3, #28
 8003b1e:	491b      	ldr	r1, [pc, #108]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b24:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_RCC_OscConfig+0x4b4>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fbc7 	bl	80022bc <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fe fbc3 	bl	80022bc <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e064      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b44:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x452>
 8003b50:	e05c      	b.n	8003c0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b52:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_RCC_OscConfig+0x4b4>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe fbb0 	bl	80022bc <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe fbac 	bl	80022bc <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e04d      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x480>
 8003b7e:	e045      	b.n	8003c0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d107      	bne.n	8003b98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e040      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40007000 	.word	0x40007000
 8003b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b98:	4b1f      	ldr	r3, [pc, #124]	@ (8003c18 <HAL_RCC_OscConfig+0x538>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d030      	beq.n	8003c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d129      	bne.n	8003c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d122      	bne.n	8003c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bc8:	4013      	ands	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d119      	bne.n	8003c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	3b01      	subs	r3, #1
 8003be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d10f      	bne.n	8003c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800

08003c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e07b      	b.n	8003d26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c3e:	d009      	beq.n	8003c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
 8003c46:	e005      	b.n	8003c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe f8ec 	bl	8001e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd8:	ea42 0103 	orr.w	r1, r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	f003 0104 	and.w	r1, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	f003 0210 	and.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08a      	sub	sp, #40	@ 0x28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d40:	f7fe fabc 	bl	80022bc <HAL_GetTick>
 8003d44:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d4c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d58:	7ffb      	ldrb	r3, [r7, #31]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d00c      	beq.n	8003d78 <HAL_SPI_TransmitReceive+0x4a>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d64:	d106      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x46>
 8003d6e:	7ffb      	ldrb	r3, [r7, #31]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d001      	beq.n	8003d78 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
 8003d76:	e17f      	b.n	8004078 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x5c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x5c>
 8003d84:	887b      	ldrh	r3, [r7, #2]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e174      	b.n	8004078 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x6e>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e16d      	b.n	8004078 <HAL_SPI_TransmitReceive+0x34a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d003      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2205      	movs	r2, #5
 8003db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	887a      	ldrh	r2, [r7, #2]
 8003dce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	887a      	ldrh	r2, [r7, #2]
 8003dda:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d007      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e14:	d17e      	bne.n	8003f14 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_SPI_TransmitReceive+0xf6>
 8003e1e:	8afb      	ldrh	r3, [r7, #22]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d16c      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e48:	e059      	b.n	8003efe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d11b      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x162>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0x162>
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d113      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d119      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x1a4>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d014      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb2:	b292      	uxth	r2, r2
 8003eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ed2:	f7fe f9f3 	bl	80022bc <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d80d      	bhi.n	8003efe <HAL_SPI_TransmitReceive+0x1d0>
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d009      	beq.n	8003efe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0bc      	b.n	8004078 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1a0      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x11c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d19b      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x11c>
 8003f12:	e082      	b.n	800401a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x1f4>
 8003f1c:	8afb      	ldrh	r3, [r7, #22]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d171      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	7812      	ldrb	r2, [r2, #0]
 8003f2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f48:	e05d      	b.n	8004006 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d11c      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x264>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d017      	beq.n	8003f92 <HAL_SPI_TransmitReceive+0x264>
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d114      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	7812      	ldrb	r2, [r2, #0]
 8003f74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d119      	bne.n	8003fd4 <HAL_SPI_TransmitReceive+0x2a6>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d014      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fd4:	f7fe f972 	bl	80022bc <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d803      	bhi.n	8003fec <HAL_SPI_TransmitReceive+0x2be>
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d102      	bne.n	8003ff2 <HAL_SPI_TransmitReceive+0x2c4>
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e038      	b.n	8004078 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d19c      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x21c>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d197      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401a:	6a3a      	ldr	r2, [r7, #32]
 800401c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f8b6 	bl	8004190 <SPI_EndRxTxTransaction>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e01d      	b.n	8004078 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004076:	2300      	movs	r3, #0
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3728      	adds	r7, #40	@ 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004090:	f7fe f914 	bl	80022bc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4413      	add	r3, r2
 800409e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040a0:	f7fe f90c 	bl	80022bc <HAL_GetTick>
 80040a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040a6:	4b39      	ldr	r3, [pc, #228]	@ (800418c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	015b      	lsls	r3, r3, #5
 80040ac:	0d1b      	lsrs	r3, r3, #20
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b6:	e054      	b.n	8004162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	d050      	beq.n	8004162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c0:	f7fe f8fc 	bl	80022bc <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d902      	bls.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d13d      	bne.n	8004152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ee:	d111      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f8:	d004      	beq.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004102:	d107      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800411c:	d10f      	bne.n	800413e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800413c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e017      	b.n	8004182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3b01      	subs	r3, #1
 8004160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	429a      	cmp	r2, r3
 800417e:	d19b      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000000 	.word	0x20000000

08004190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2201      	movs	r2, #1
 80041a4:	2102      	movs	r1, #2
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff ff6a 	bl	8004080 <SPI_WaitFlagStateUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e032      	b.n	8004228 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <SPI_EndRxTxTransaction+0xa0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <SPI_EndRxTxTransaction+0xa4>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	0d5b      	lsrs	r3, r3, #21
 80041ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041e0:	d112      	bne.n	8004208 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2180      	movs	r1, #128	@ 0x80
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff ff47 	bl	8004080 <SPI_WaitFlagStateUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d016      	beq.n	8004226 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e00f      	b.n	8004228 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3b01      	subs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421e:	2b80      	cmp	r3, #128	@ 0x80
 8004220:	d0f2      	beq.n	8004208 <SPI_EndRxTxTransaction+0x78>
 8004222:	e000      	b.n	8004226 <SPI_EndRxTxTransaction+0x96>
        break;
 8004224:	bf00      	nop
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000000 	.word	0x20000000
 8004234:	165e9f81 	.word	0x165e9f81

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e041      	b.n	80042ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd fe3c 	bl	8001edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 fb48 	bl	800490c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e041      	b.n	800436c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f839 	bl	8004374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f000 faf9 	bl	800490c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <HAL_TIM_PWM_Start+0x24>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e022      	b.n	80043f2 <HAL_TIM_PWM_Start+0x6a>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d109      	bne.n	80043c6 <HAL_TIM_PWM_Start+0x3e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e015      	b.n	80043f2 <HAL_TIM_PWM_Start+0x6a>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d109      	bne.n	80043e0 <HAL_TIM_PWM_Start+0x58>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e008      	b.n	80043f2 <HAL_TIM_PWM_Start+0x6a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e07c      	b.n	80044f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d104      	bne.n	800440a <HAL_TIM_PWM_Start+0x82>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004408:	e013      	b.n	8004432 <HAL_TIM_PWM_Start+0xaa>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Start+0x92>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004418:	e00b      	b.n	8004432 <HAL_TIM_PWM_Start+0xaa>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Start+0xa2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004428:	e003      	b.n	8004432 <HAL_TIM_PWM_Start+0xaa>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2201      	movs	r2, #1
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd5c 	bl	8004ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2d      	ldr	r2, [pc, #180]	@ (80044fc <HAL_TIM_PWM_Start+0x174>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_PWM_Start+0xcc>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2c      	ldr	r2, [pc, #176]	@ (8004500 <HAL_TIM_PWM_Start+0x178>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_TIM_PWM_Start+0xd0>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_TIM_PWM_Start+0xd2>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a22      	ldr	r2, [pc, #136]	@ (80044fc <HAL_TIM_PWM_Start+0x174>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d022      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004480:	d01d      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1f      	ldr	r2, [pc, #124]	@ (8004504 <HAL_TIM_PWM_Start+0x17c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d018      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1d      	ldr	r2, [pc, #116]	@ (8004508 <HAL_TIM_PWM_Start+0x180>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1c      	ldr	r2, [pc, #112]	@ (800450c <HAL_TIM_PWM_Start+0x184>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a16      	ldr	r2, [pc, #88]	@ (8004500 <HAL_TIM_PWM_Start+0x178>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a18      	ldr	r2, [pc, #96]	@ (8004510 <HAL_TIM_PWM_Start+0x188>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a16      	ldr	r2, [pc, #88]	@ (8004514 <HAL_TIM_PWM_Start+0x18c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d111      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	d010      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e0:	e007      	b.n	80044f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40014000 	.word	0x40014000
 8004514:	40001800 	.word	0x40001800

08004518 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fce4 	bl	8004ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a2e      	ldr	r2, [pc, #184]	@ (80045f0 <HAL_TIM_PWM_Stop+0xd8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_TIM_PWM_Stop+0x2c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a2d      	ldr	r2, [pc, #180]	@ (80045f4 <HAL_TIM_PWM_Stop+0xdc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d101      	bne.n	8004548 <HAL_TIM_PWM_Stop+0x30>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_TIM_PWM_Stop+0x32>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d017      	beq.n	800457e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <HAL_TIM_PWM_Stop+0x66>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	f240 4344 	movw	r3, #1092	@ 0x444
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <HAL_TIM_PWM_Stop+0x66>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a1a      	ldr	r2, [r3, #32]
 8004584:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <HAL_TIM_PWM_Stop+0x96>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	f240 4344 	movw	r3, #1092	@ 0x444
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <HAL_TIM_PWM_Stop+0x96>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0201 	bic.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Stop+0xa6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045bc:	e013      	b.n	80045e6 <HAL_TIM_PWM_Stop+0xce>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Stop+0xb6>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045cc:	e00b      	b.n	80045e6 <HAL_TIM_PWM_Stop+0xce>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Stop+0xc6>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045dc:	e003      	b.n	80045e6 <HAL_TIM_PWM_Stop+0xce>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40010400 	.word	0x40010400

080045f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004612:	2302      	movs	r3, #2
 8004614:	e0ae      	b.n	8004774 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b0c      	cmp	r3, #12
 8004622:	f200 809f 	bhi.w	8004764 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004626:	a201      	add	r2, pc, #4	@ (adr r2, 800462c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	08004661 	.word	0x08004661
 8004630:	08004765 	.word	0x08004765
 8004634:	08004765 	.word	0x08004765
 8004638:	08004765 	.word	0x08004765
 800463c:	080046a1 	.word	0x080046a1
 8004640:	08004765 	.word	0x08004765
 8004644:	08004765 	.word	0x08004765
 8004648:	08004765 	.word	0x08004765
 800464c:	080046e3 	.word	0x080046e3
 8004650:	08004765 	.word	0x08004765
 8004654:	08004765 	.word	0x08004765
 8004658:	08004765 	.word	0x08004765
 800465c:	08004723 	.word	0x08004723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f9fc 	bl	8004a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0208 	orr.w	r2, r2, #8
 800467a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0204 	bic.w	r2, r2, #4
 800468a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6999      	ldr	r1, [r3, #24]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	619a      	str	r2, [r3, #24]
      break;
 800469e:	e064      	b.n	800476a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fa4c 	bl	8004b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6999      	ldr	r1, [r3, #24]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	021a      	lsls	r2, r3, #8
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	619a      	str	r2, [r3, #24]
      break;
 80046e0:	e043      	b.n	800476a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 faa1 	bl	8004c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0208 	orr.w	r2, r2, #8
 80046fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0204 	bic.w	r2, r2, #4
 800470c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69d9      	ldr	r1, [r3, #28]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	61da      	str	r2, [r3, #28]
      break;
 8004720:	e023      	b.n	800476a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 faf5 	bl	8004d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69d9      	ldr	r1, [r3, #28]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	021a      	lsls	r2, r3, #8
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	61da      	str	r2, [r3, #28]
      break;
 8004762:	e002      	b.n	800476a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	75fb      	strb	r3, [r7, #23]
      break;
 8004768:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIM_ConfigClockSource+0x1c>
 8004794:	2302      	movs	r3, #2
 8004796:	e0b4      	b.n	8004902 <HAL_TIM_ConfigClockSource+0x186>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d0:	d03e      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0xd4>
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d6:	f200 8087 	bhi.w	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047de:	f000 8086 	beq.w	80048ee <HAL_TIM_ConfigClockSource+0x172>
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e6:	d87f      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b70      	cmp	r3, #112	@ 0x70
 80047ea:	d01a      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0xa6>
 80047ec:	2b70      	cmp	r3, #112	@ 0x70
 80047ee:	d87b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b60      	cmp	r3, #96	@ 0x60
 80047f2:	d050      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x11a>
 80047f4:	2b60      	cmp	r3, #96	@ 0x60
 80047f6:	d877      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b50      	cmp	r3, #80	@ 0x50
 80047fa:	d03c      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0xfa>
 80047fc:	2b50      	cmp	r3, #80	@ 0x50
 80047fe:	d873      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b40      	cmp	r3, #64	@ 0x40
 8004802:	d058      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004804:	2b40      	cmp	r3, #64	@ 0x40
 8004806:	d86f      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b30      	cmp	r3, #48	@ 0x30
 800480a:	d064      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	2b30      	cmp	r3, #48	@ 0x30
 800480e:	d86b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d060      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004814:	2b20      	cmp	r3, #32
 8004816:	d867      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d05c      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15a>
 800481c:	2b10      	cmp	r3, #16
 800481e:	d05a      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004820:	e062      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004832:	f000 fb41 	bl	8004eb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	609a      	str	r2, [r3, #8]
      break;
 800484e:	e04f      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004860:	f000 fb2a 	bl	8004eb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004872:	609a      	str	r2, [r3, #8]
      break;
 8004874:	e03c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004882:	461a      	mov	r2, r3
 8004884:	f000 fa9e 	bl	8004dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2150      	movs	r1, #80	@ 0x50
 800488e:	4618      	mov	r0, r3
 8004890:	f000 faf7 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004894:	e02c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 fabd 	bl	8004e22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2160      	movs	r1, #96	@ 0x60
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fae7 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 80048b4:	e01c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	461a      	mov	r2, r3
 80048c4:	f000 fa7e 	bl	8004dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2140      	movs	r1, #64	@ 0x40
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fad7 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 80048d4:	e00c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 face 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 80048e6:	e003      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
      break;
 80048ec:	e000      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a46      	ldr	r2, [pc, #280]	@ (8004a38 <TIM_Base_SetConfig+0x12c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492a:	d00f      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a43      	ldr	r2, [pc, #268]	@ (8004a3c <TIM_Base_SetConfig+0x130>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a42      	ldr	r2, [pc, #264]	@ (8004a40 <TIM_Base_SetConfig+0x134>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a41      	ldr	r2, [pc, #260]	@ (8004a44 <TIM_Base_SetConfig+0x138>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a40      	ldr	r2, [pc, #256]	@ (8004a48 <TIM_Base_SetConfig+0x13c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d108      	bne.n	800495e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a35      	ldr	r2, [pc, #212]	@ (8004a38 <TIM_Base_SetConfig+0x12c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d02b      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496c:	d027      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a32      	ldr	r2, [pc, #200]	@ (8004a3c <TIM_Base_SetConfig+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d023      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a31      	ldr	r2, [pc, #196]	@ (8004a40 <TIM_Base_SetConfig+0x134>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01f      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a30      	ldr	r2, [pc, #192]	@ (8004a44 <TIM_Base_SetConfig+0x138>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01b      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2f      	ldr	r2, [pc, #188]	@ (8004a48 <TIM_Base_SetConfig+0x13c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d017      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2e      	ldr	r2, [pc, #184]	@ (8004a4c <TIM_Base_SetConfig+0x140>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <TIM_Base_SetConfig+0x144>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00f      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <TIM_Base_SetConfig+0x148>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <TIM_Base_SetConfig+0x14c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a5c <TIM_Base_SetConfig+0x150>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a29      	ldr	r2, [pc, #164]	@ (8004a60 <TIM_Base_SetConfig+0x154>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d108      	bne.n	80049d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a10      	ldr	r2, [pc, #64]	@ (8004a38 <TIM_Base_SetConfig+0x12c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a12      	ldr	r2, [pc, #72]	@ (8004a48 <TIM_Base_SetConfig+0x13c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d103      	bne.n	8004a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d105      	bne.n	8004a2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f023 0201 	bic.w	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40010400 	.word	0x40010400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800
 8004a58:	40001800 	.word	0x40001800
 8004a5c:	40001c00 	.word	0x40001c00
 8004a60:	40002000 	.word	0x40002000

08004a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f023 0201 	bic.w	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0303 	bic.w	r3, r3, #3
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 0302 	bic.w	r3, r3, #2
 8004aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a20      	ldr	r2, [pc, #128]	@ (8004b3c <TIM_OC1_SetConfig+0xd8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_OC1_SetConfig+0x64>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <TIM_OC1_SetConfig+0xdc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10c      	bne.n	8004ae2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0308 	bic.w	r3, r3, #8
 8004ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 0304 	bic.w	r3, r3, #4
 8004ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a15      	ldr	r2, [pc, #84]	@ (8004b3c <TIM_OC1_SetConfig+0xd8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_OC1_SetConfig+0x8e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a14      	ldr	r2, [pc, #80]	@ (8004b40 <TIM_OC1_SetConfig+0xdc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d111      	bne.n	8004b16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	621a      	str	r2, [r3, #32]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40010400 	.word	0x40010400

08004b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f023 0210 	bic.w	r2, r3, #16
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0320 	bic.w	r3, r3, #32
 8004b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <TIM_OC2_SetConfig+0xe4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_OC2_SetConfig+0x68>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a21      	ldr	r2, [pc, #132]	@ (8004c2c <TIM_OC2_SetConfig+0xe8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d10d      	bne.n	8004bc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a17      	ldr	r2, [pc, #92]	@ (8004c28 <TIM_OC2_SetConfig+0xe4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_OC2_SetConfig+0x94>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a16      	ldr	r2, [pc, #88]	@ (8004c2c <TIM_OC2_SetConfig+0xe8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d113      	bne.n	8004c00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40010400 	.word	0x40010400

08004c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a21      	ldr	r2, [pc, #132]	@ (8004d10 <TIM_OC3_SetConfig+0xe0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_OC3_SetConfig+0x66>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a20      	ldr	r2, [pc, #128]	@ (8004d14 <TIM_OC3_SetConfig+0xe4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10d      	bne.n	8004cb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a16      	ldr	r2, [pc, #88]	@ (8004d10 <TIM_OC3_SetConfig+0xe0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d003      	beq.n	8004cc2 <TIM_OC3_SetConfig+0x92>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a15      	ldr	r2, [pc, #84]	@ (8004d14 <TIM_OC3_SetConfig+0xe4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d113      	bne.n	8004cea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40010400 	.word	0x40010400

08004d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a12      	ldr	r2, [pc, #72]	@ (8004dbc <TIM_OC4_SetConfig+0xa4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_OC4_SetConfig+0x68>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <TIM_OC4_SetConfig+0xa8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d109      	bne.n	8004d94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	019b      	lsls	r3, r3, #6
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40010400 	.word	0x40010400

08004dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 030a 	bic.w	r3, r3, #10
 8004e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b087      	sub	sp, #28
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f023 0210 	bic.w	r2, r3, #16
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	031b      	lsls	r3, r3, #12
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f043 0307 	orr.w	r3, r3, #7
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	609a      	str	r2, [r3, #8]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	021a      	lsls	r2, r3, #8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1a      	ldr	r2, [r3, #32]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	401a      	ands	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1a      	ldr	r2, [r3, #32]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f30:	431a      	orrs	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e05a      	b.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a21      	ldr	r2, [pc, #132]	@ (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d022      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1d      	ldr	r2, [pc, #116]	@ (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d018      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a18      	ldr	r2, [pc, #96]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a17      	ldr	r2, [pc, #92]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a15      	ldr	r2, [pc, #84]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10c      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40010400 	.word	0x40010400
 8005034:	40014000 	.word	0x40014000
 8005038:	40001800 	.word	0x40001800

0800503c <__cvt>:
 800503c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005040:	ec57 6b10 	vmov	r6, r7, d0
 8005044:	2f00      	cmp	r7, #0
 8005046:	460c      	mov	r4, r1
 8005048:	4619      	mov	r1, r3
 800504a:	463b      	mov	r3, r7
 800504c:	bfbb      	ittet	lt
 800504e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005052:	461f      	movlt	r7, r3
 8005054:	2300      	movge	r3, #0
 8005056:	232d      	movlt	r3, #45	@ 0x2d
 8005058:	700b      	strb	r3, [r1, #0]
 800505a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800505c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005060:	4691      	mov	r9, r2
 8005062:	f023 0820 	bic.w	r8, r3, #32
 8005066:	bfbc      	itt	lt
 8005068:	4632      	movlt	r2, r6
 800506a:	4616      	movlt	r6, r2
 800506c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005070:	d005      	beq.n	800507e <__cvt+0x42>
 8005072:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005076:	d100      	bne.n	800507a <__cvt+0x3e>
 8005078:	3401      	adds	r4, #1
 800507a:	2102      	movs	r1, #2
 800507c:	e000      	b.n	8005080 <__cvt+0x44>
 800507e:	2103      	movs	r1, #3
 8005080:	ab03      	add	r3, sp, #12
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	ab02      	add	r3, sp, #8
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	ec47 6b10 	vmov	d0, r6, r7
 800508c:	4653      	mov	r3, sl
 800508e:	4622      	mov	r2, r4
 8005090:	f000 fe7e 	bl	8005d90 <_dtoa_r>
 8005094:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005098:	4605      	mov	r5, r0
 800509a:	d119      	bne.n	80050d0 <__cvt+0x94>
 800509c:	f019 0f01 	tst.w	r9, #1
 80050a0:	d00e      	beq.n	80050c0 <__cvt+0x84>
 80050a2:	eb00 0904 	add.w	r9, r0, r4
 80050a6:	2200      	movs	r2, #0
 80050a8:	2300      	movs	r3, #0
 80050aa:	4630      	mov	r0, r6
 80050ac:	4639      	mov	r1, r7
 80050ae:	f7fb fd2b 	bl	8000b08 <__aeabi_dcmpeq>
 80050b2:	b108      	cbz	r0, 80050b8 <__cvt+0x7c>
 80050b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80050b8:	2230      	movs	r2, #48	@ 0x30
 80050ba:	9b03      	ldr	r3, [sp, #12]
 80050bc:	454b      	cmp	r3, r9
 80050be:	d31e      	bcc.n	80050fe <__cvt+0xc2>
 80050c0:	9b03      	ldr	r3, [sp, #12]
 80050c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050c4:	1b5b      	subs	r3, r3, r5
 80050c6:	4628      	mov	r0, r5
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	b004      	add	sp, #16
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050d4:	eb00 0904 	add.w	r9, r0, r4
 80050d8:	d1e5      	bne.n	80050a6 <__cvt+0x6a>
 80050da:	7803      	ldrb	r3, [r0, #0]
 80050dc:	2b30      	cmp	r3, #48	@ 0x30
 80050de:	d10a      	bne.n	80050f6 <__cvt+0xba>
 80050e0:	2200      	movs	r2, #0
 80050e2:	2300      	movs	r3, #0
 80050e4:	4630      	mov	r0, r6
 80050e6:	4639      	mov	r1, r7
 80050e8:	f7fb fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 80050ec:	b918      	cbnz	r0, 80050f6 <__cvt+0xba>
 80050ee:	f1c4 0401 	rsb	r4, r4, #1
 80050f2:	f8ca 4000 	str.w	r4, [sl]
 80050f6:	f8da 3000 	ldr.w	r3, [sl]
 80050fa:	4499      	add	r9, r3
 80050fc:	e7d3      	b.n	80050a6 <__cvt+0x6a>
 80050fe:	1c59      	adds	r1, r3, #1
 8005100:	9103      	str	r1, [sp, #12]
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e7d9      	b.n	80050ba <__cvt+0x7e>

08005106 <__exponent>:
 8005106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005108:	2900      	cmp	r1, #0
 800510a:	bfba      	itte	lt
 800510c:	4249      	neglt	r1, r1
 800510e:	232d      	movlt	r3, #45	@ 0x2d
 8005110:	232b      	movge	r3, #43	@ 0x2b
 8005112:	2909      	cmp	r1, #9
 8005114:	7002      	strb	r2, [r0, #0]
 8005116:	7043      	strb	r3, [r0, #1]
 8005118:	dd29      	ble.n	800516e <__exponent+0x68>
 800511a:	f10d 0307 	add.w	r3, sp, #7
 800511e:	461d      	mov	r5, r3
 8005120:	270a      	movs	r7, #10
 8005122:	461a      	mov	r2, r3
 8005124:	fbb1 f6f7 	udiv	r6, r1, r7
 8005128:	fb07 1416 	mls	r4, r7, r6, r1
 800512c:	3430      	adds	r4, #48	@ 0x30
 800512e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005132:	460c      	mov	r4, r1
 8005134:	2c63      	cmp	r4, #99	@ 0x63
 8005136:	f103 33ff 	add.w	r3, r3, #4294967295
 800513a:	4631      	mov	r1, r6
 800513c:	dcf1      	bgt.n	8005122 <__exponent+0x1c>
 800513e:	3130      	adds	r1, #48	@ 0x30
 8005140:	1e94      	subs	r4, r2, #2
 8005142:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005146:	1c41      	adds	r1, r0, #1
 8005148:	4623      	mov	r3, r4
 800514a:	42ab      	cmp	r3, r5
 800514c:	d30a      	bcc.n	8005164 <__exponent+0x5e>
 800514e:	f10d 0309 	add.w	r3, sp, #9
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	42ac      	cmp	r4, r5
 8005156:	bf88      	it	hi
 8005158:	2300      	movhi	r3, #0
 800515a:	3302      	adds	r3, #2
 800515c:	4403      	add	r3, r0
 800515e:	1a18      	subs	r0, r3, r0
 8005160:	b003      	add	sp, #12
 8005162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005164:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005168:	f801 6f01 	strb.w	r6, [r1, #1]!
 800516c:	e7ed      	b.n	800514a <__exponent+0x44>
 800516e:	2330      	movs	r3, #48	@ 0x30
 8005170:	3130      	adds	r1, #48	@ 0x30
 8005172:	7083      	strb	r3, [r0, #2]
 8005174:	70c1      	strb	r1, [r0, #3]
 8005176:	1d03      	adds	r3, r0, #4
 8005178:	e7f1      	b.n	800515e <__exponent+0x58>
	...

0800517c <_printf_float>:
 800517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	b08d      	sub	sp, #52	@ 0x34
 8005182:	460c      	mov	r4, r1
 8005184:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005188:	4616      	mov	r6, r2
 800518a:	461f      	mov	r7, r3
 800518c:	4605      	mov	r5, r0
 800518e:	f000 fcfd 	bl	8005b8c <_localeconv_r>
 8005192:	6803      	ldr	r3, [r0, #0]
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fb f88a 	bl	80002b0 <strlen>
 800519c:	2300      	movs	r3, #0
 800519e:	930a      	str	r3, [sp, #40]	@ 0x28
 80051a0:	f8d8 3000 	ldr.w	r3, [r8]
 80051a4:	9005      	str	r0, [sp, #20]
 80051a6:	3307      	adds	r3, #7
 80051a8:	f023 0307 	bic.w	r3, r3, #7
 80051ac:	f103 0208 	add.w	r2, r3, #8
 80051b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051b4:	f8d4 b000 	ldr.w	fp, [r4]
 80051b8:	f8c8 2000 	str.w	r2, [r8]
 80051bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051c4:	9307      	str	r3, [sp, #28]
 80051c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80051ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005444 <_printf_float+0x2c8>)
 80051d4:	f04f 32ff 	mov.w	r2, #4294967295
 80051d8:	f7fb fcc8 	bl	8000b6c <__aeabi_dcmpun>
 80051dc:	bb70      	cbnz	r0, 800523c <_printf_float+0xc0>
 80051de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051e2:	4b98      	ldr	r3, [pc, #608]	@ (8005444 <_printf_float+0x2c8>)
 80051e4:	f04f 32ff 	mov.w	r2, #4294967295
 80051e8:	f7fb fca2 	bl	8000b30 <__aeabi_dcmple>
 80051ec:	bb30      	cbnz	r0, 800523c <_printf_float+0xc0>
 80051ee:	2200      	movs	r2, #0
 80051f0:	2300      	movs	r3, #0
 80051f2:	4640      	mov	r0, r8
 80051f4:	4649      	mov	r1, r9
 80051f6:	f7fb fc91 	bl	8000b1c <__aeabi_dcmplt>
 80051fa:	b110      	cbz	r0, 8005202 <_printf_float+0x86>
 80051fc:	232d      	movs	r3, #45	@ 0x2d
 80051fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005202:	4a91      	ldr	r2, [pc, #580]	@ (8005448 <_printf_float+0x2cc>)
 8005204:	4b91      	ldr	r3, [pc, #580]	@ (800544c <_printf_float+0x2d0>)
 8005206:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800520a:	bf94      	ite	ls
 800520c:	4690      	movls	r8, r2
 800520e:	4698      	movhi	r8, r3
 8005210:	2303      	movs	r3, #3
 8005212:	6123      	str	r3, [r4, #16]
 8005214:	f02b 0304 	bic.w	r3, fp, #4
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	f04f 0900 	mov.w	r9, #0
 800521e:	9700      	str	r7, [sp, #0]
 8005220:	4633      	mov	r3, r6
 8005222:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005224:	4621      	mov	r1, r4
 8005226:	4628      	mov	r0, r5
 8005228:	f000 f9d2 	bl	80055d0 <_printf_common>
 800522c:	3001      	adds	r0, #1
 800522e:	f040 808d 	bne.w	800534c <_printf_float+0x1d0>
 8005232:	f04f 30ff 	mov.w	r0, #4294967295
 8005236:	b00d      	add	sp, #52	@ 0x34
 8005238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	4640      	mov	r0, r8
 8005242:	4649      	mov	r1, r9
 8005244:	f7fb fc92 	bl	8000b6c <__aeabi_dcmpun>
 8005248:	b140      	cbz	r0, 800525c <_printf_float+0xe0>
 800524a:	464b      	mov	r3, r9
 800524c:	2b00      	cmp	r3, #0
 800524e:	bfbc      	itt	lt
 8005250:	232d      	movlt	r3, #45	@ 0x2d
 8005252:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005256:	4a7e      	ldr	r2, [pc, #504]	@ (8005450 <_printf_float+0x2d4>)
 8005258:	4b7e      	ldr	r3, [pc, #504]	@ (8005454 <_printf_float+0x2d8>)
 800525a:	e7d4      	b.n	8005206 <_printf_float+0x8a>
 800525c:	6863      	ldr	r3, [r4, #4]
 800525e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005262:	9206      	str	r2, [sp, #24]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	d13b      	bne.n	80052e0 <_printf_float+0x164>
 8005268:	2306      	movs	r3, #6
 800526a:	6063      	str	r3, [r4, #4]
 800526c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005270:	2300      	movs	r3, #0
 8005272:	6022      	str	r2, [r4, #0]
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	ab0a      	add	r3, sp, #40	@ 0x28
 8005278:	e9cd a301 	strd	sl, r3, [sp, #4]
 800527c:	ab09      	add	r3, sp, #36	@ 0x24
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	ec49 8b10 	vmov	d0, r8, r9
 8005286:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800528a:	4628      	mov	r0, r5
 800528c:	f7ff fed6 	bl	800503c <__cvt>
 8005290:	9b06      	ldr	r3, [sp, #24]
 8005292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005294:	2b47      	cmp	r3, #71	@ 0x47
 8005296:	4680      	mov	r8, r0
 8005298:	d129      	bne.n	80052ee <_printf_float+0x172>
 800529a:	1cc8      	adds	r0, r1, #3
 800529c:	db02      	blt.n	80052a4 <_printf_float+0x128>
 800529e:	6863      	ldr	r3, [r4, #4]
 80052a0:	4299      	cmp	r1, r3
 80052a2:	dd41      	ble.n	8005328 <_printf_float+0x1ac>
 80052a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80052a8:	fa5f fa8a 	uxtb.w	sl, sl
 80052ac:	3901      	subs	r1, #1
 80052ae:	4652      	mov	r2, sl
 80052b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80052b6:	f7ff ff26 	bl	8005106 <__exponent>
 80052ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052bc:	1813      	adds	r3, r2, r0
 80052be:	2a01      	cmp	r2, #1
 80052c0:	4681      	mov	r9, r0
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	dc02      	bgt.n	80052cc <_printf_float+0x150>
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	07d2      	lsls	r2, r2, #31
 80052ca:	d501      	bpl.n	80052d0 <_printf_float+0x154>
 80052cc:	3301      	adds	r3, #1
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0a2      	beq.n	800521e <_printf_float+0xa2>
 80052d8:	232d      	movs	r3, #45	@ 0x2d
 80052da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052de:	e79e      	b.n	800521e <_printf_float+0xa2>
 80052e0:	9a06      	ldr	r2, [sp, #24]
 80052e2:	2a47      	cmp	r2, #71	@ 0x47
 80052e4:	d1c2      	bne.n	800526c <_printf_float+0xf0>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1c0      	bne.n	800526c <_printf_float+0xf0>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e7bd      	b.n	800526a <_printf_float+0xee>
 80052ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052f2:	d9db      	bls.n	80052ac <_printf_float+0x130>
 80052f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052f8:	d118      	bne.n	800532c <_printf_float+0x1b0>
 80052fa:	2900      	cmp	r1, #0
 80052fc:	6863      	ldr	r3, [r4, #4]
 80052fe:	dd0b      	ble.n	8005318 <_printf_float+0x19c>
 8005300:	6121      	str	r1, [r4, #16]
 8005302:	b913      	cbnz	r3, 800530a <_printf_float+0x18e>
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	07d0      	lsls	r0, r2, #31
 8005308:	d502      	bpl.n	8005310 <_printf_float+0x194>
 800530a:	3301      	adds	r3, #1
 800530c:	440b      	add	r3, r1
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005312:	f04f 0900 	mov.w	r9, #0
 8005316:	e7db      	b.n	80052d0 <_printf_float+0x154>
 8005318:	b913      	cbnz	r3, 8005320 <_printf_float+0x1a4>
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	07d2      	lsls	r2, r2, #31
 800531e:	d501      	bpl.n	8005324 <_printf_float+0x1a8>
 8005320:	3302      	adds	r3, #2
 8005322:	e7f4      	b.n	800530e <_printf_float+0x192>
 8005324:	2301      	movs	r3, #1
 8005326:	e7f2      	b.n	800530e <_printf_float+0x192>
 8005328:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800532c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800532e:	4299      	cmp	r1, r3
 8005330:	db05      	blt.n	800533e <_printf_float+0x1c2>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	6121      	str	r1, [r4, #16]
 8005336:	07d8      	lsls	r0, r3, #31
 8005338:	d5ea      	bpl.n	8005310 <_printf_float+0x194>
 800533a:	1c4b      	adds	r3, r1, #1
 800533c:	e7e7      	b.n	800530e <_printf_float+0x192>
 800533e:	2900      	cmp	r1, #0
 8005340:	bfd4      	ite	le
 8005342:	f1c1 0202 	rsble	r2, r1, #2
 8005346:	2201      	movgt	r2, #1
 8005348:	4413      	add	r3, r2
 800534a:	e7e0      	b.n	800530e <_printf_float+0x192>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	055a      	lsls	r2, r3, #21
 8005350:	d407      	bmi.n	8005362 <_printf_float+0x1e6>
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	4642      	mov	r2, r8
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	d12b      	bne.n	80053b8 <_printf_float+0x23c>
 8005360:	e767      	b.n	8005232 <_printf_float+0xb6>
 8005362:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005366:	f240 80dd 	bls.w	8005524 <_printf_float+0x3a8>
 800536a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800536e:	2200      	movs	r2, #0
 8005370:	2300      	movs	r3, #0
 8005372:	f7fb fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 8005376:	2800      	cmp	r0, #0
 8005378:	d033      	beq.n	80053e2 <_printf_float+0x266>
 800537a:	4a37      	ldr	r2, [pc, #220]	@ (8005458 <_printf_float+0x2dc>)
 800537c:	2301      	movs	r3, #1
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	f43f af54 	beq.w	8005232 <_printf_float+0xb6>
 800538a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800538e:	4543      	cmp	r3, r8
 8005390:	db02      	blt.n	8005398 <_printf_float+0x21c>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	07d8      	lsls	r0, r3, #31
 8005396:	d50f      	bpl.n	80053b8 <_printf_float+0x23c>
 8005398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	f43f af45 	beq.w	8005232 <_printf_float+0xb6>
 80053a8:	f04f 0900 	mov.w	r9, #0
 80053ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80053b0:	f104 0a1a 	add.w	sl, r4, #26
 80053b4:	45c8      	cmp	r8, r9
 80053b6:	dc09      	bgt.n	80053cc <_printf_float+0x250>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	079b      	lsls	r3, r3, #30
 80053bc:	f100 8103 	bmi.w	80055c6 <_printf_float+0x44a>
 80053c0:	68e0      	ldr	r0, [r4, #12]
 80053c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053c4:	4298      	cmp	r0, r3
 80053c6:	bfb8      	it	lt
 80053c8:	4618      	movlt	r0, r3
 80053ca:	e734      	b.n	8005236 <_printf_float+0xba>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4652      	mov	r2, sl
 80053d0:	4631      	mov	r1, r6
 80053d2:	4628      	mov	r0, r5
 80053d4:	47b8      	blx	r7
 80053d6:	3001      	adds	r0, #1
 80053d8:	f43f af2b 	beq.w	8005232 <_printf_float+0xb6>
 80053dc:	f109 0901 	add.w	r9, r9, #1
 80053e0:	e7e8      	b.n	80053b4 <_printf_float+0x238>
 80053e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dc39      	bgt.n	800545c <_printf_float+0x2e0>
 80053e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005458 <_printf_float+0x2dc>)
 80053ea:	2301      	movs	r3, #1
 80053ec:	4631      	mov	r1, r6
 80053ee:	4628      	mov	r0, r5
 80053f0:	47b8      	blx	r7
 80053f2:	3001      	adds	r0, #1
 80053f4:	f43f af1d 	beq.w	8005232 <_printf_float+0xb6>
 80053f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80053fc:	ea59 0303 	orrs.w	r3, r9, r3
 8005400:	d102      	bne.n	8005408 <_printf_float+0x28c>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	07d9      	lsls	r1, r3, #31
 8005406:	d5d7      	bpl.n	80053b8 <_printf_float+0x23c>
 8005408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	f43f af0d 	beq.w	8005232 <_printf_float+0xb6>
 8005418:	f04f 0a00 	mov.w	sl, #0
 800541c:	f104 0b1a 	add.w	fp, r4, #26
 8005420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005422:	425b      	negs	r3, r3
 8005424:	4553      	cmp	r3, sl
 8005426:	dc01      	bgt.n	800542c <_printf_float+0x2b0>
 8005428:	464b      	mov	r3, r9
 800542a:	e793      	b.n	8005354 <_printf_float+0x1d8>
 800542c:	2301      	movs	r3, #1
 800542e:	465a      	mov	r2, fp
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f aefb 	beq.w	8005232 <_printf_float+0xb6>
 800543c:	f10a 0a01 	add.w	sl, sl, #1
 8005440:	e7ee      	b.n	8005420 <_printf_float+0x2a4>
 8005442:	bf00      	nop
 8005444:	7fefffff 	.word	0x7fefffff
 8005448:	08007d84 	.word	0x08007d84
 800544c:	08007d88 	.word	0x08007d88
 8005450:	08007d8c 	.word	0x08007d8c
 8005454:	08007d90 	.word	0x08007d90
 8005458:	08007d94 	.word	0x08007d94
 800545c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800545e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005462:	4553      	cmp	r3, sl
 8005464:	bfa8      	it	ge
 8005466:	4653      	movge	r3, sl
 8005468:	2b00      	cmp	r3, #0
 800546a:	4699      	mov	r9, r3
 800546c:	dc36      	bgt.n	80054dc <_printf_float+0x360>
 800546e:	f04f 0b00 	mov.w	fp, #0
 8005472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005476:	f104 021a 	add.w	r2, r4, #26
 800547a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800547c:	9306      	str	r3, [sp, #24]
 800547e:	eba3 0309 	sub.w	r3, r3, r9
 8005482:	455b      	cmp	r3, fp
 8005484:	dc31      	bgt.n	80054ea <_printf_float+0x36e>
 8005486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005488:	459a      	cmp	sl, r3
 800548a:	dc3a      	bgt.n	8005502 <_printf_float+0x386>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	07da      	lsls	r2, r3, #31
 8005490:	d437      	bmi.n	8005502 <_printf_float+0x386>
 8005492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005494:	ebaa 0903 	sub.w	r9, sl, r3
 8005498:	9b06      	ldr	r3, [sp, #24]
 800549a:	ebaa 0303 	sub.w	r3, sl, r3
 800549e:	4599      	cmp	r9, r3
 80054a0:	bfa8      	it	ge
 80054a2:	4699      	movge	r9, r3
 80054a4:	f1b9 0f00 	cmp.w	r9, #0
 80054a8:	dc33      	bgt.n	8005512 <_printf_float+0x396>
 80054aa:	f04f 0800 	mov.w	r8, #0
 80054ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054b2:	f104 0b1a 	add.w	fp, r4, #26
 80054b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054b8:	ebaa 0303 	sub.w	r3, sl, r3
 80054bc:	eba3 0309 	sub.w	r3, r3, r9
 80054c0:	4543      	cmp	r3, r8
 80054c2:	f77f af79 	ble.w	80053b8 <_printf_float+0x23c>
 80054c6:	2301      	movs	r3, #1
 80054c8:	465a      	mov	r2, fp
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	f43f aeae 	beq.w	8005232 <_printf_float+0xb6>
 80054d6:	f108 0801 	add.w	r8, r8, #1
 80054da:	e7ec      	b.n	80054b6 <_printf_float+0x33a>
 80054dc:	4642      	mov	r2, r8
 80054de:	4631      	mov	r1, r6
 80054e0:	4628      	mov	r0, r5
 80054e2:	47b8      	blx	r7
 80054e4:	3001      	adds	r0, #1
 80054e6:	d1c2      	bne.n	800546e <_printf_float+0x2f2>
 80054e8:	e6a3      	b.n	8005232 <_printf_float+0xb6>
 80054ea:	2301      	movs	r3, #1
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	9206      	str	r2, [sp, #24]
 80054f2:	47b8      	blx	r7
 80054f4:	3001      	adds	r0, #1
 80054f6:	f43f ae9c 	beq.w	8005232 <_printf_float+0xb6>
 80054fa:	9a06      	ldr	r2, [sp, #24]
 80054fc:	f10b 0b01 	add.w	fp, fp, #1
 8005500:	e7bb      	b.n	800547a <_printf_float+0x2fe>
 8005502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	d1c0      	bne.n	8005492 <_printf_float+0x316>
 8005510:	e68f      	b.n	8005232 <_printf_float+0xb6>
 8005512:	9a06      	ldr	r2, [sp, #24]
 8005514:	464b      	mov	r3, r9
 8005516:	4442      	add	r2, r8
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	d1c3      	bne.n	80054aa <_printf_float+0x32e>
 8005522:	e686      	b.n	8005232 <_printf_float+0xb6>
 8005524:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005528:	f1ba 0f01 	cmp.w	sl, #1
 800552c:	dc01      	bgt.n	8005532 <_printf_float+0x3b6>
 800552e:	07db      	lsls	r3, r3, #31
 8005530:	d536      	bpl.n	80055a0 <_printf_float+0x424>
 8005532:	2301      	movs	r3, #1
 8005534:	4642      	mov	r2, r8
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	47b8      	blx	r7
 800553c:	3001      	adds	r0, #1
 800553e:	f43f ae78 	beq.w	8005232 <_printf_float+0xb6>
 8005542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	f43f ae70 	beq.w	8005232 <_printf_float+0xb6>
 8005552:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005556:	2200      	movs	r2, #0
 8005558:	2300      	movs	r3, #0
 800555a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800555e:	f7fb fad3 	bl	8000b08 <__aeabi_dcmpeq>
 8005562:	b9c0      	cbnz	r0, 8005596 <_printf_float+0x41a>
 8005564:	4653      	mov	r3, sl
 8005566:	f108 0201 	add.w	r2, r8, #1
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	d10c      	bne.n	800558e <_printf_float+0x412>
 8005574:	e65d      	b.n	8005232 <_printf_float+0xb6>
 8005576:	2301      	movs	r3, #1
 8005578:	465a      	mov	r2, fp
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	f43f ae56 	beq.w	8005232 <_printf_float+0xb6>
 8005586:	f108 0801 	add.w	r8, r8, #1
 800558a:	45d0      	cmp	r8, sl
 800558c:	dbf3      	blt.n	8005576 <_printf_float+0x3fa>
 800558e:	464b      	mov	r3, r9
 8005590:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005594:	e6df      	b.n	8005356 <_printf_float+0x1da>
 8005596:	f04f 0800 	mov.w	r8, #0
 800559a:	f104 0b1a 	add.w	fp, r4, #26
 800559e:	e7f4      	b.n	800558a <_printf_float+0x40e>
 80055a0:	2301      	movs	r3, #1
 80055a2:	4642      	mov	r2, r8
 80055a4:	e7e1      	b.n	800556a <_printf_float+0x3ee>
 80055a6:	2301      	movs	r3, #1
 80055a8:	464a      	mov	r2, r9
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b8      	blx	r7
 80055b0:	3001      	adds	r0, #1
 80055b2:	f43f ae3e 	beq.w	8005232 <_printf_float+0xb6>
 80055b6:	f108 0801 	add.w	r8, r8, #1
 80055ba:	68e3      	ldr	r3, [r4, #12]
 80055bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80055be:	1a5b      	subs	r3, r3, r1
 80055c0:	4543      	cmp	r3, r8
 80055c2:	dcf0      	bgt.n	80055a6 <_printf_float+0x42a>
 80055c4:	e6fc      	b.n	80053c0 <_printf_float+0x244>
 80055c6:	f04f 0800 	mov.w	r8, #0
 80055ca:	f104 0919 	add.w	r9, r4, #25
 80055ce:	e7f4      	b.n	80055ba <_printf_float+0x43e>

080055d0 <_printf_common>:
 80055d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d4:	4616      	mov	r6, r2
 80055d6:	4698      	mov	r8, r3
 80055d8:	688a      	ldr	r2, [r1, #8]
 80055da:	690b      	ldr	r3, [r1, #16]
 80055dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055e0:	4293      	cmp	r3, r2
 80055e2:	bfb8      	it	lt
 80055e4:	4613      	movlt	r3, r2
 80055e6:	6033      	str	r3, [r6, #0]
 80055e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055ec:	4607      	mov	r7, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	b10a      	cbz	r2, 80055f6 <_printf_common+0x26>
 80055f2:	3301      	adds	r3, #1
 80055f4:	6033      	str	r3, [r6, #0]
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	0699      	lsls	r1, r3, #26
 80055fa:	bf42      	ittt	mi
 80055fc:	6833      	ldrmi	r3, [r6, #0]
 80055fe:	3302      	addmi	r3, #2
 8005600:	6033      	strmi	r3, [r6, #0]
 8005602:	6825      	ldr	r5, [r4, #0]
 8005604:	f015 0506 	ands.w	r5, r5, #6
 8005608:	d106      	bne.n	8005618 <_printf_common+0x48>
 800560a:	f104 0a19 	add.w	sl, r4, #25
 800560e:	68e3      	ldr	r3, [r4, #12]
 8005610:	6832      	ldr	r2, [r6, #0]
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	42ab      	cmp	r3, r5
 8005616:	dc26      	bgt.n	8005666 <_printf_common+0x96>
 8005618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	3b00      	subs	r3, #0
 8005620:	bf18      	it	ne
 8005622:	2301      	movne	r3, #1
 8005624:	0692      	lsls	r2, r2, #26
 8005626:	d42b      	bmi.n	8005680 <_printf_common+0xb0>
 8005628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800562c:	4641      	mov	r1, r8
 800562e:	4638      	mov	r0, r7
 8005630:	47c8      	blx	r9
 8005632:	3001      	adds	r0, #1
 8005634:	d01e      	beq.n	8005674 <_printf_common+0xa4>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	6922      	ldr	r2, [r4, #16]
 800563a:	f003 0306 	and.w	r3, r3, #6
 800563e:	2b04      	cmp	r3, #4
 8005640:	bf02      	ittt	eq
 8005642:	68e5      	ldreq	r5, [r4, #12]
 8005644:	6833      	ldreq	r3, [r6, #0]
 8005646:	1aed      	subeq	r5, r5, r3
 8005648:	68a3      	ldr	r3, [r4, #8]
 800564a:	bf0c      	ite	eq
 800564c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005650:	2500      	movne	r5, #0
 8005652:	4293      	cmp	r3, r2
 8005654:	bfc4      	itt	gt
 8005656:	1a9b      	subgt	r3, r3, r2
 8005658:	18ed      	addgt	r5, r5, r3
 800565a:	2600      	movs	r6, #0
 800565c:	341a      	adds	r4, #26
 800565e:	42b5      	cmp	r5, r6
 8005660:	d11a      	bne.n	8005698 <_printf_common+0xc8>
 8005662:	2000      	movs	r0, #0
 8005664:	e008      	b.n	8005678 <_printf_common+0xa8>
 8005666:	2301      	movs	r3, #1
 8005668:	4652      	mov	r2, sl
 800566a:	4641      	mov	r1, r8
 800566c:	4638      	mov	r0, r7
 800566e:	47c8      	blx	r9
 8005670:	3001      	adds	r0, #1
 8005672:	d103      	bne.n	800567c <_printf_common+0xac>
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567c:	3501      	adds	r5, #1
 800567e:	e7c6      	b.n	800560e <_printf_common+0x3e>
 8005680:	18e1      	adds	r1, r4, r3
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	2030      	movs	r0, #48	@ 0x30
 8005686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800568a:	4422      	add	r2, r4
 800568c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005694:	3302      	adds	r3, #2
 8005696:	e7c7      	b.n	8005628 <_printf_common+0x58>
 8005698:	2301      	movs	r3, #1
 800569a:	4622      	mov	r2, r4
 800569c:	4641      	mov	r1, r8
 800569e:	4638      	mov	r0, r7
 80056a0:	47c8      	blx	r9
 80056a2:	3001      	adds	r0, #1
 80056a4:	d0e6      	beq.n	8005674 <_printf_common+0xa4>
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7d9      	b.n	800565e <_printf_common+0x8e>
	...

080056ac <_printf_i>:
 80056ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	7e0f      	ldrb	r7, [r1, #24]
 80056b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056b4:	2f78      	cmp	r7, #120	@ 0x78
 80056b6:	4691      	mov	r9, r2
 80056b8:	4680      	mov	r8, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	469a      	mov	sl, r3
 80056be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056c2:	d807      	bhi.n	80056d4 <_printf_i+0x28>
 80056c4:	2f62      	cmp	r7, #98	@ 0x62
 80056c6:	d80a      	bhi.n	80056de <_printf_i+0x32>
 80056c8:	2f00      	cmp	r7, #0
 80056ca:	f000 80d2 	beq.w	8005872 <_printf_i+0x1c6>
 80056ce:	2f58      	cmp	r7, #88	@ 0x58
 80056d0:	f000 80b9 	beq.w	8005846 <_printf_i+0x19a>
 80056d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056dc:	e03a      	b.n	8005754 <_printf_i+0xa8>
 80056de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056e2:	2b15      	cmp	r3, #21
 80056e4:	d8f6      	bhi.n	80056d4 <_printf_i+0x28>
 80056e6:	a101      	add	r1, pc, #4	@ (adr r1, 80056ec <_printf_i+0x40>)
 80056e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005759 	.word	0x08005759
 80056f4:	080056d5 	.word	0x080056d5
 80056f8:	080056d5 	.word	0x080056d5
 80056fc:	080056d5 	.word	0x080056d5
 8005700:	080056d5 	.word	0x080056d5
 8005704:	08005759 	.word	0x08005759
 8005708:	080056d5 	.word	0x080056d5
 800570c:	080056d5 	.word	0x080056d5
 8005710:	080056d5 	.word	0x080056d5
 8005714:	080056d5 	.word	0x080056d5
 8005718:	08005859 	.word	0x08005859
 800571c:	08005783 	.word	0x08005783
 8005720:	08005813 	.word	0x08005813
 8005724:	080056d5 	.word	0x080056d5
 8005728:	080056d5 	.word	0x080056d5
 800572c:	0800587b 	.word	0x0800587b
 8005730:	080056d5 	.word	0x080056d5
 8005734:	08005783 	.word	0x08005783
 8005738:	080056d5 	.word	0x080056d5
 800573c:	080056d5 	.word	0x080056d5
 8005740:	0800581b 	.word	0x0800581b
 8005744:	6833      	ldr	r3, [r6, #0]
 8005746:	1d1a      	adds	r2, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6032      	str	r2, [r6, #0]
 800574c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005754:	2301      	movs	r3, #1
 8005756:	e09d      	b.n	8005894 <_printf_i+0x1e8>
 8005758:	6833      	ldr	r3, [r6, #0]
 800575a:	6820      	ldr	r0, [r4, #0]
 800575c:	1d19      	adds	r1, r3, #4
 800575e:	6031      	str	r1, [r6, #0]
 8005760:	0606      	lsls	r6, r0, #24
 8005762:	d501      	bpl.n	8005768 <_printf_i+0xbc>
 8005764:	681d      	ldr	r5, [r3, #0]
 8005766:	e003      	b.n	8005770 <_printf_i+0xc4>
 8005768:	0645      	lsls	r5, r0, #25
 800576a:	d5fb      	bpl.n	8005764 <_printf_i+0xb8>
 800576c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005770:	2d00      	cmp	r5, #0
 8005772:	da03      	bge.n	800577c <_printf_i+0xd0>
 8005774:	232d      	movs	r3, #45	@ 0x2d
 8005776:	426d      	negs	r5, r5
 8005778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800577c:	4859      	ldr	r0, [pc, #356]	@ (80058e4 <_printf_i+0x238>)
 800577e:	230a      	movs	r3, #10
 8005780:	e011      	b.n	80057a6 <_printf_i+0xfa>
 8005782:	6821      	ldr	r1, [r4, #0]
 8005784:	6833      	ldr	r3, [r6, #0]
 8005786:	0608      	lsls	r0, r1, #24
 8005788:	f853 5b04 	ldr.w	r5, [r3], #4
 800578c:	d402      	bmi.n	8005794 <_printf_i+0xe8>
 800578e:	0649      	lsls	r1, r1, #25
 8005790:	bf48      	it	mi
 8005792:	b2ad      	uxthmi	r5, r5
 8005794:	2f6f      	cmp	r7, #111	@ 0x6f
 8005796:	4853      	ldr	r0, [pc, #332]	@ (80058e4 <_printf_i+0x238>)
 8005798:	6033      	str	r3, [r6, #0]
 800579a:	bf14      	ite	ne
 800579c:	230a      	movne	r3, #10
 800579e:	2308      	moveq	r3, #8
 80057a0:	2100      	movs	r1, #0
 80057a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057a6:	6866      	ldr	r6, [r4, #4]
 80057a8:	60a6      	str	r6, [r4, #8]
 80057aa:	2e00      	cmp	r6, #0
 80057ac:	bfa2      	ittt	ge
 80057ae:	6821      	ldrge	r1, [r4, #0]
 80057b0:	f021 0104 	bicge.w	r1, r1, #4
 80057b4:	6021      	strge	r1, [r4, #0]
 80057b6:	b90d      	cbnz	r5, 80057bc <_printf_i+0x110>
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	d04b      	beq.n	8005854 <_printf_i+0x1a8>
 80057bc:	4616      	mov	r6, r2
 80057be:	fbb5 f1f3 	udiv	r1, r5, r3
 80057c2:	fb03 5711 	mls	r7, r3, r1, r5
 80057c6:	5dc7      	ldrb	r7, [r0, r7]
 80057c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057cc:	462f      	mov	r7, r5
 80057ce:	42bb      	cmp	r3, r7
 80057d0:	460d      	mov	r5, r1
 80057d2:	d9f4      	bls.n	80057be <_printf_i+0x112>
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d10b      	bne.n	80057f0 <_printf_i+0x144>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	07df      	lsls	r7, r3, #31
 80057dc:	d508      	bpl.n	80057f0 <_printf_i+0x144>
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	6861      	ldr	r1, [r4, #4]
 80057e2:	4299      	cmp	r1, r3
 80057e4:	bfde      	ittt	le
 80057e6:	2330      	movle	r3, #48	@ 0x30
 80057e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057f0:	1b92      	subs	r2, r2, r6
 80057f2:	6122      	str	r2, [r4, #16]
 80057f4:	f8cd a000 	str.w	sl, [sp]
 80057f8:	464b      	mov	r3, r9
 80057fa:	aa03      	add	r2, sp, #12
 80057fc:	4621      	mov	r1, r4
 80057fe:	4640      	mov	r0, r8
 8005800:	f7ff fee6 	bl	80055d0 <_printf_common>
 8005804:	3001      	adds	r0, #1
 8005806:	d14a      	bne.n	800589e <_printf_i+0x1f2>
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	b004      	add	sp, #16
 800580e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	f043 0320 	orr.w	r3, r3, #32
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	4833      	ldr	r0, [pc, #204]	@ (80058e8 <_printf_i+0x23c>)
 800581c:	2778      	movs	r7, #120	@ 0x78
 800581e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	6831      	ldr	r1, [r6, #0]
 8005826:	061f      	lsls	r7, r3, #24
 8005828:	f851 5b04 	ldr.w	r5, [r1], #4
 800582c:	d402      	bmi.n	8005834 <_printf_i+0x188>
 800582e:	065f      	lsls	r7, r3, #25
 8005830:	bf48      	it	mi
 8005832:	b2ad      	uxthmi	r5, r5
 8005834:	6031      	str	r1, [r6, #0]
 8005836:	07d9      	lsls	r1, r3, #31
 8005838:	bf44      	itt	mi
 800583a:	f043 0320 	orrmi.w	r3, r3, #32
 800583e:	6023      	strmi	r3, [r4, #0]
 8005840:	b11d      	cbz	r5, 800584a <_printf_i+0x19e>
 8005842:	2310      	movs	r3, #16
 8005844:	e7ac      	b.n	80057a0 <_printf_i+0xf4>
 8005846:	4827      	ldr	r0, [pc, #156]	@ (80058e4 <_printf_i+0x238>)
 8005848:	e7e9      	b.n	800581e <_printf_i+0x172>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	f023 0320 	bic.w	r3, r3, #32
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	e7f6      	b.n	8005842 <_printf_i+0x196>
 8005854:	4616      	mov	r6, r2
 8005856:	e7bd      	b.n	80057d4 <_printf_i+0x128>
 8005858:	6833      	ldr	r3, [r6, #0]
 800585a:	6825      	ldr	r5, [r4, #0]
 800585c:	6961      	ldr	r1, [r4, #20]
 800585e:	1d18      	adds	r0, r3, #4
 8005860:	6030      	str	r0, [r6, #0]
 8005862:	062e      	lsls	r6, r5, #24
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	d501      	bpl.n	800586c <_printf_i+0x1c0>
 8005868:	6019      	str	r1, [r3, #0]
 800586a:	e002      	b.n	8005872 <_printf_i+0x1c6>
 800586c:	0668      	lsls	r0, r5, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0x1bc>
 8005870:	8019      	strh	r1, [r3, #0]
 8005872:	2300      	movs	r3, #0
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	4616      	mov	r6, r2
 8005878:	e7bc      	b.n	80057f4 <_printf_i+0x148>
 800587a:	6833      	ldr	r3, [r6, #0]
 800587c:	1d1a      	adds	r2, r3, #4
 800587e:	6032      	str	r2, [r6, #0]
 8005880:	681e      	ldr	r6, [r3, #0]
 8005882:	6862      	ldr	r2, [r4, #4]
 8005884:	2100      	movs	r1, #0
 8005886:	4630      	mov	r0, r6
 8005888:	f7fa fcc2 	bl	8000210 <memchr>
 800588c:	b108      	cbz	r0, 8005892 <_printf_i+0x1e6>
 800588e:	1b80      	subs	r0, r0, r6
 8005890:	6060      	str	r0, [r4, #4]
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	2300      	movs	r3, #0
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800589c:	e7aa      	b.n	80057f4 <_printf_i+0x148>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	4632      	mov	r2, r6
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	47d0      	blx	sl
 80058a8:	3001      	adds	r0, #1
 80058aa:	d0ad      	beq.n	8005808 <_printf_i+0x15c>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	079b      	lsls	r3, r3, #30
 80058b0:	d413      	bmi.n	80058da <_printf_i+0x22e>
 80058b2:	68e0      	ldr	r0, [r4, #12]
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	4298      	cmp	r0, r3
 80058b8:	bfb8      	it	lt
 80058ba:	4618      	movlt	r0, r3
 80058bc:	e7a6      	b.n	800580c <_printf_i+0x160>
 80058be:	2301      	movs	r3, #1
 80058c0:	4632      	mov	r2, r6
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d09d      	beq.n	8005808 <_printf_i+0x15c>
 80058cc:	3501      	adds	r5, #1
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	9903      	ldr	r1, [sp, #12]
 80058d2:	1a5b      	subs	r3, r3, r1
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dcf2      	bgt.n	80058be <_printf_i+0x212>
 80058d8:	e7eb      	b.n	80058b2 <_printf_i+0x206>
 80058da:	2500      	movs	r5, #0
 80058dc:	f104 0619 	add.w	r6, r4, #25
 80058e0:	e7f5      	b.n	80058ce <_printf_i+0x222>
 80058e2:	bf00      	nop
 80058e4:	08007d96 	.word	0x08007d96
 80058e8:	08007da7 	.word	0x08007da7

080058ec <std>:
 80058ec:	2300      	movs	r3, #0
 80058ee:	b510      	push	{r4, lr}
 80058f0:	4604      	mov	r4, r0
 80058f2:	e9c0 3300 	strd	r3, r3, [r0]
 80058f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058fa:	6083      	str	r3, [r0, #8]
 80058fc:	8181      	strh	r1, [r0, #12]
 80058fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005900:	81c2      	strh	r2, [r0, #14]
 8005902:	6183      	str	r3, [r0, #24]
 8005904:	4619      	mov	r1, r3
 8005906:	2208      	movs	r2, #8
 8005908:	305c      	adds	r0, #92	@ 0x5c
 800590a:	f000 f928 	bl	8005b5e <memset>
 800590e:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <std+0x58>)
 8005910:	6263      	str	r3, [r4, #36]	@ 0x24
 8005912:	4b0d      	ldr	r3, [pc, #52]	@ (8005948 <std+0x5c>)
 8005914:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005916:	4b0d      	ldr	r3, [pc, #52]	@ (800594c <std+0x60>)
 8005918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800591a:	4b0d      	ldr	r3, [pc, #52]	@ (8005950 <std+0x64>)
 800591c:	6323      	str	r3, [r4, #48]	@ 0x30
 800591e:	4b0d      	ldr	r3, [pc, #52]	@ (8005954 <std+0x68>)
 8005920:	6224      	str	r4, [r4, #32]
 8005922:	429c      	cmp	r4, r3
 8005924:	d006      	beq.n	8005934 <std+0x48>
 8005926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800592a:	4294      	cmp	r4, r2
 800592c:	d002      	beq.n	8005934 <std+0x48>
 800592e:	33d0      	adds	r3, #208	@ 0xd0
 8005930:	429c      	cmp	r4, r3
 8005932:	d105      	bne.n	8005940 <std+0x54>
 8005934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800593c:	f000 b99a 	b.w	8005c74 <__retarget_lock_init_recursive>
 8005940:	bd10      	pop	{r4, pc}
 8005942:	bf00      	nop
 8005944:	08005ad9 	.word	0x08005ad9
 8005948:	08005afb 	.word	0x08005afb
 800594c:	08005b33 	.word	0x08005b33
 8005950:	08005b57 	.word	0x08005b57
 8005954:	2000030c 	.word	0x2000030c

08005958 <stdio_exit_handler>:
 8005958:	4a02      	ldr	r2, [pc, #8]	@ (8005964 <stdio_exit_handler+0xc>)
 800595a:	4903      	ldr	r1, [pc, #12]	@ (8005968 <stdio_exit_handler+0x10>)
 800595c:	4803      	ldr	r0, [pc, #12]	@ (800596c <stdio_exit_handler+0x14>)
 800595e:	f000 b869 	b.w	8005a34 <_fwalk_sglue>
 8005962:	bf00      	nop
 8005964:	2000000c 	.word	0x2000000c
 8005968:	080075d5 	.word	0x080075d5
 800596c:	2000001c 	.word	0x2000001c

08005970 <cleanup_stdio>:
 8005970:	6841      	ldr	r1, [r0, #4]
 8005972:	4b0c      	ldr	r3, [pc, #48]	@ (80059a4 <cleanup_stdio+0x34>)
 8005974:	4299      	cmp	r1, r3
 8005976:	b510      	push	{r4, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	d001      	beq.n	8005980 <cleanup_stdio+0x10>
 800597c:	f001 fe2a 	bl	80075d4 <_fflush_r>
 8005980:	68a1      	ldr	r1, [r4, #8]
 8005982:	4b09      	ldr	r3, [pc, #36]	@ (80059a8 <cleanup_stdio+0x38>)
 8005984:	4299      	cmp	r1, r3
 8005986:	d002      	beq.n	800598e <cleanup_stdio+0x1e>
 8005988:	4620      	mov	r0, r4
 800598a:	f001 fe23 	bl	80075d4 <_fflush_r>
 800598e:	68e1      	ldr	r1, [r4, #12]
 8005990:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <cleanup_stdio+0x3c>)
 8005992:	4299      	cmp	r1, r3
 8005994:	d004      	beq.n	80059a0 <cleanup_stdio+0x30>
 8005996:	4620      	mov	r0, r4
 8005998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599c:	f001 be1a 	b.w	80075d4 <_fflush_r>
 80059a0:	bd10      	pop	{r4, pc}
 80059a2:	bf00      	nop
 80059a4:	2000030c 	.word	0x2000030c
 80059a8:	20000374 	.word	0x20000374
 80059ac:	200003dc 	.word	0x200003dc

080059b0 <global_stdio_init.part.0>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <global_stdio_init.part.0+0x30>)
 80059b4:	4c0b      	ldr	r4, [pc, #44]	@ (80059e4 <global_stdio_init.part.0+0x34>)
 80059b6:	4a0c      	ldr	r2, [pc, #48]	@ (80059e8 <global_stdio_init.part.0+0x38>)
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	4620      	mov	r0, r4
 80059bc:	2200      	movs	r2, #0
 80059be:	2104      	movs	r1, #4
 80059c0:	f7ff ff94 	bl	80058ec <std>
 80059c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059c8:	2201      	movs	r2, #1
 80059ca:	2109      	movs	r1, #9
 80059cc:	f7ff ff8e 	bl	80058ec <std>
 80059d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059d4:	2202      	movs	r2, #2
 80059d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059da:	2112      	movs	r1, #18
 80059dc:	f7ff bf86 	b.w	80058ec <std>
 80059e0:	20000444 	.word	0x20000444
 80059e4:	2000030c 	.word	0x2000030c
 80059e8:	08005959 	.word	0x08005959

080059ec <__sfp_lock_acquire>:
 80059ec:	4801      	ldr	r0, [pc, #4]	@ (80059f4 <__sfp_lock_acquire+0x8>)
 80059ee:	f000 b942 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 80059f2:	bf00      	nop
 80059f4:	2000044d 	.word	0x2000044d

080059f8 <__sfp_lock_release>:
 80059f8:	4801      	ldr	r0, [pc, #4]	@ (8005a00 <__sfp_lock_release+0x8>)
 80059fa:	f000 b93d 	b.w	8005c78 <__retarget_lock_release_recursive>
 80059fe:	bf00      	nop
 8005a00:	2000044d 	.word	0x2000044d

08005a04 <__sinit>:
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4604      	mov	r4, r0
 8005a08:	f7ff fff0 	bl	80059ec <__sfp_lock_acquire>
 8005a0c:	6a23      	ldr	r3, [r4, #32]
 8005a0e:	b11b      	cbz	r3, 8005a18 <__sinit+0x14>
 8005a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a14:	f7ff bff0 	b.w	80059f8 <__sfp_lock_release>
 8005a18:	4b04      	ldr	r3, [pc, #16]	@ (8005a2c <__sinit+0x28>)
 8005a1a:	6223      	str	r3, [r4, #32]
 8005a1c:	4b04      	ldr	r3, [pc, #16]	@ (8005a30 <__sinit+0x2c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f5      	bne.n	8005a10 <__sinit+0xc>
 8005a24:	f7ff ffc4 	bl	80059b0 <global_stdio_init.part.0>
 8005a28:	e7f2      	b.n	8005a10 <__sinit+0xc>
 8005a2a:	bf00      	nop
 8005a2c:	08005971 	.word	0x08005971
 8005a30:	20000444 	.word	0x20000444

08005a34 <_fwalk_sglue>:
 8005a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a38:	4607      	mov	r7, r0
 8005a3a:	4688      	mov	r8, r1
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	2600      	movs	r6, #0
 8005a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a44:	f1b9 0901 	subs.w	r9, r9, #1
 8005a48:	d505      	bpl.n	8005a56 <_fwalk_sglue+0x22>
 8005a4a:	6824      	ldr	r4, [r4, #0]
 8005a4c:	2c00      	cmp	r4, #0
 8005a4e:	d1f7      	bne.n	8005a40 <_fwalk_sglue+0xc>
 8005a50:	4630      	mov	r0, r6
 8005a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a56:	89ab      	ldrh	r3, [r5, #12]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d907      	bls.n	8005a6c <_fwalk_sglue+0x38>
 8005a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a60:	3301      	adds	r3, #1
 8005a62:	d003      	beq.n	8005a6c <_fwalk_sglue+0x38>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c0      	blx	r8
 8005a6a:	4306      	orrs	r6, r0
 8005a6c:	3568      	adds	r5, #104	@ 0x68
 8005a6e:	e7e9      	b.n	8005a44 <_fwalk_sglue+0x10>

08005a70 <sniprintf>:
 8005a70:	b40c      	push	{r2, r3}
 8005a72:	b530      	push	{r4, r5, lr}
 8005a74:	4b17      	ldr	r3, [pc, #92]	@ (8005ad4 <sniprintf+0x64>)
 8005a76:	1e0c      	subs	r4, r1, #0
 8005a78:	681d      	ldr	r5, [r3, #0]
 8005a7a:	b09d      	sub	sp, #116	@ 0x74
 8005a7c:	da08      	bge.n	8005a90 <sniprintf+0x20>
 8005a7e:	238b      	movs	r3, #139	@ 0x8b
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	f04f 30ff 	mov.w	r0, #4294967295
 8005a86:	b01d      	add	sp, #116	@ 0x74
 8005a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a8c:	b002      	add	sp, #8
 8005a8e:	4770      	bx	lr
 8005a90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005a94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a98:	bf14      	ite	ne
 8005a9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a9e:	4623      	moveq	r3, r4
 8005aa0:	9304      	str	r3, [sp, #16]
 8005aa2:	9307      	str	r3, [sp, #28]
 8005aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005aa8:	9002      	str	r0, [sp, #8]
 8005aaa:	9006      	str	r0, [sp, #24]
 8005aac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ab0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ab2:	ab21      	add	r3, sp, #132	@ 0x84
 8005ab4:	a902      	add	r1, sp, #8
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	f001 fc0b 	bl	80072d4 <_svfiprintf_r>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	bfbc      	itt	lt
 8005ac2:	238b      	movlt	r3, #139	@ 0x8b
 8005ac4:	602b      	strlt	r3, [r5, #0]
 8005ac6:	2c00      	cmp	r4, #0
 8005ac8:	d0dd      	beq.n	8005a86 <sniprintf+0x16>
 8005aca:	9b02      	ldr	r3, [sp, #8]
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e7d9      	b.n	8005a86 <sniprintf+0x16>
 8005ad2:	bf00      	nop
 8005ad4:	20000018 	.word	0x20000018

08005ad8 <__sread>:
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	460c      	mov	r4, r1
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	f000 f87a 	bl	8005bd8 <_read_r>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	bfab      	itete	ge
 8005ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005aea:	89a3      	ldrhlt	r3, [r4, #12]
 8005aec:	181b      	addge	r3, r3, r0
 8005aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005af2:	bfac      	ite	ge
 8005af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005af6:	81a3      	strhlt	r3, [r4, #12]
 8005af8:	bd10      	pop	{r4, pc}

08005afa <__swrite>:
 8005afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afe:	461f      	mov	r7, r3
 8005b00:	898b      	ldrh	r3, [r1, #12]
 8005b02:	05db      	lsls	r3, r3, #23
 8005b04:	4605      	mov	r5, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	4616      	mov	r6, r2
 8005b0a:	d505      	bpl.n	8005b18 <__swrite+0x1e>
 8005b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b10:	2302      	movs	r3, #2
 8005b12:	2200      	movs	r2, #0
 8005b14:	f000 f84e 	bl	8005bb4 <_lseek_r>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	4632      	mov	r2, r6
 8005b26:	463b      	mov	r3, r7
 8005b28:	4628      	mov	r0, r5
 8005b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2e:	f000 b865 	b.w	8005bfc <_write_r>

08005b32 <__sseek>:
 8005b32:	b510      	push	{r4, lr}
 8005b34:	460c      	mov	r4, r1
 8005b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3a:	f000 f83b 	bl	8005bb4 <_lseek_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	bf15      	itete	ne
 8005b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b4e:	81a3      	strheq	r3, [r4, #12]
 8005b50:	bf18      	it	ne
 8005b52:	81a3      	strhne	r3, [r4, #12]
 8005b54:	bd10      	pop	{r4, pc}

08005b56 <__sclose>:
 8005b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5a:	f000 b81b 	b.w	8005b94 <_close_r>

08005b5e <memset>:
 8005b5e:	4402      	add	r2, r0
 8005b60:	4603      	mov	r3, r0
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d100      	bne.n	8005b68 <memset+0xa>
 8005b66:	4770      	bx	lr
 8005b68:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6c:	e7f9      	b.n	8005b62 <memset+0x4>

08005b6e <strcat>:
 8005b6e:	b510      	push	{r4, lr}
 8005b70:	4602      	mov	r2, r0
 8005b72:	7814      	ldrb	r4, [r2, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	3201      	adds	r2, #1
 8005b78:	2c00      	cmp	r4, #0
 8005b7a:	d1fa      	bne.n	8005b72 <strcat+0x4>
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	d1f9      	bne.n	8005b7e <strcat+0x10>
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <_localeconv_r>:
 8005b8c:	4800      	ldr	r0, [pc, #0]	@ (8005b90 <_localeconv_r+0x4>)
 8005b8e:	4770      	bx	lr
 8005b90:	20000158 	.word	0x20000158

08005b94 <_close_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d06      	ldr	r5, [pc, #24]	@ (8005bb0 <_close_r+0x1c>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	f7fc fa7f 	bl	80020a2 <_close>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_close_r+0x1a>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_close_r+0x1a>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000448 	.word	0x20000448

08005bb4 <_lseek_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	@ (8005bd4 <_lseek_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fc fa94 	bl	80020f0 <_lseek>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_lseek_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_lseek_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20000448 	.word	0x20000448

08005bd8 <_read_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d07      	ldr	r5, [pc, #28]	@ (8005bf8 <_read_r+0x20>)
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4608      	mov	r0, r1
 8005be0:	4611      	mov	r1, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7fc fa22 	bl	8002030 <_read>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_read_r+0x1e>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_read_r+0x1e>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	20000448 	.word	0x20000448

08005bfc <_write_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	@ (8005c1c <_write_r+0x20>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	4608      	mov	r0, r1
 8005c04:	4611      	mov	r1, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fc fa2d 	bl	800206a <_write>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_write_r+0x1e>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_write_r+0x1e>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	20000448 	.word	0x20000448

08005c20 <__errno>:
 8005c20:	4b01      	ldr	r3, [pc, #4]	@ (8005c28 <__errno+0x8>)
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000018 	.word	0x20000018

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	@ (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c70 <__libc_init_array+0x44>)
 8005c40:	f002 f866 	bl	8007d10 <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	08008100 	.word	0x08008100
 8005c68:	08008100 	.word	0x08008100
 8005c6c:	08008100 	.word	0x08008100
 8005c70:	08008104 	.word	0x08008104

08005c74 <__retarget_lock_init_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_acquire_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <__retarget_lock_release_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <quorem>:
 8005c7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7e:	6903      	ldr	r3, [r0, #16]
 8005c80:	690c      	ldr	r4, [r1, #16]
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	4607      	mov	r7, r0
 8005c86:	db7e      	blt.n	8005d86 <quorem+0x10c>
 8005c88:	3c01      	subs	r4, #1
 8005c8a:	f101 0814 	add.w	r8, r1, #20
 8005c8e:	00a3      	lsls	r3, r4, #2
 8005c90:	f100 0514 	add.w	r5, r0, #20
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cac:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cb0:	d32e      	bcc.n	8005d10 <quorem+0x96>
 8005cb2:	f04f 0a00 	mov.w	sl, #0
 8005cb6:	46c4      	mov	ip, r8
 8005cb8:	46ae      	mov	lr, r5
 8005cba:	46d3      	mov	fp, sl
 8005cbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005cc0:	b298      	uxth	r0, r3
 8005cc2:	fb06 a000 	mla	r0, r6, r0, sl
 8005cc6:	0c02      	lsrs	r2, r0, #16
 8005cc8:	0c1b      	lsrs	r3, r3, #16
 8005cca:	fb06 2303 	mla	r3, r6, r3, r2
 8005cce:	f8de 2000 	ldr.w	r2, [lr]
 8005cd2:	b280      	uxth	r0, r0
 8005cd4:	b292      	uxth	r2, r2
 8005cd6:	1a12      	subs	r2, r2, r0
 8005cd8:	445a      	add	r2, fp
 8005cda:	f8de 0000 	ldr.w	r0, [lr]
 8005cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ce8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005cec:	b292      	uxth	r2, r2
 8005cee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005cf2:	45e1      	cmp	r9, ip
 8005cf4:	f84e 2b04 	str.w	r2, [lr], #4
 8005cf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005cfc:	d2de      	bcs.n	8005cbc <quorem+0x42>
 8005cfe:	9b00      	ldr	r3, [sp, #0]
 8005d00:	58eb      	ldr	r3, [r5, r3]
 8005d02:	b92b      	cbnz	r3, 8005d10 <quorem+0x96>
 8005d04:	9b01      	ldr	r3, [sp, #4]
 8005d06:	3b04      	subs	r3, #4
 8005d08:	429d      	cmp	r5, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	d32f      	bcc.n	8005d6e <quorem+0xf4>
 8005d0e:	613c      	str	r4, [r7, #16]
 8005d10:	4638      	mov	r0, r7
 8005d12:	f001 f97b 	bl	800700c <__mcmp>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	db25      	blt.n	8005d66 <quorem+0xec>
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d22:	f8d1 c000 	ldr.w	ip, [r1]
 8005d26:	fa1f fe82 	uxth.w	lr, r2
 8005d2a:	fa1f f38c 	uxth.w	r3, ip
 8005d2e:	eba3 030e 	sub.w	r3, r3, lr
 8005d32:	4403      	add	r3, r0
 8005d34:	0c12      	lsrs	r2, r2, #16
 8005d36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d44:	45c1      	cmp	r9, r8
 8005d46:	f841 3b04 	str.w	r3, [r1], #4
 8005d4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d4e:	d2e6      	bcs.n	8005d1e <quorem+0xa4>
 8005d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d58:	b922      	cbnz	r2, 8005d64 <quorem+0xea>
 8005d5a:	3b04      	subs	r3, #4
 8005d5c:	429d      	cmp	r5, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	d30b      	bcc.n	8005d7a <quorem+0x100>
 8005d62:	613c      	str	r4, [r7, #16]
 8005d64:	3601      	adds	r6, #1
 8005d66:	4630      	mov	r0, r6
 8005d68:	b003      	add	sp, #12
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	3b04      	subs	r3, #4
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	d1cb      	bne.n	8005d0e <quorem+0x94>
 8005d76:	3c01      	subs	r4, #1
 8005d78:	e7c6      	b.n	8005d08 <quorem+0x8e>
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	3b04      	subs	r3, #4
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	d1ef      	bne.n	8005d62 <quorem+0xe8>
 8005d82:	3c01      	subs	r4, #1
 8005d84:	e7ea      	b.n	8005d5c <quorem+0xe2>
 8005d86:	2000      	movs	r0, #0
 8005d88:	e7ee      	b.n	8005d68 <quorem+0xee>
 8005d8a:	0000      	movs	r0, r0
 8005d8c:	0000      	movs	r0, r0
	...

08005d90 <_dtoa_r>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	69c7      	ldr	r7, [r0, #28]
 8005d96:	b099      	sub	sp, #100	@ 0x64
 8005d98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005d9c:	ec55 4b10 	vmov	r4, r5, d0
 8005da0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005da2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005da4:	4683      	mov	fp, r0
 8005da6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005da8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005daa:	b97f      	cbnz	r7, 8005dcc <_dtoa_r+0x3c>
 8005dac:	2010      	movs	r0, #16
 8005dae:	f000 fdfd 	bl	80069ac <malloc>
 8005db2:	4602      	mov	r2, r0
 8005db4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005db8:	b920      	cbnz	r0, 8005dc4 <_dtoa_r+0x34>
 8005dba:	4ba7      	ldr	r3, [pc, #668]	@ (8006058 <_dtoa_r+0x2c8>)
 8005dbc:	21ef      	movs	r1, #239	@ 0xef
 8005dbe:	48a7      	ldr	r0, [pc, #668]	@ (800605c <_dtoa_r+0x2cc>)
 8005dc0:	f001 fc68 	bl	8007694 <__assert_func>
 8005dc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005dc8:	6007      	str	r7, [r0, #0]
 8005dca:	60c7      	str	r7, [r0, #12]
 8005dcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005dd0:	6819      	ldr	r1, [r3, #0]
 8005dd2:	b159      	cbz	r1, 8005dec <_dtoa_r+0x5c>
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	604a      	str	r2, [r1, #4]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4093      	lsls	r3, r2
 8005ddc:	608b      	str	r3, [r1, #8]
 8005dde:	4658      	mov	r0, fp
 8005de0:	f000 feda 	bl	8006b98 <_Bfree>
 8005de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	1e2b      	subs	r3, r5, #0
 8005dee:	bfb9      	ittee	lt
 8005df0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005df4:	9303      	strlt	r3, [sp, #12]
 8005df6:	2300      	movge	r3, #0
 8005df8:	6033      	strge	r3, [r6, #0]
 8005dfa:	9f03      	ldr	r7, [sp, #12]
 8005dfc:	4b98      	ldr	r3, [pc, #608]	@ (8006060 <_dtoa_r+0x2d0>)
 8005dfe:	bfbc      	itt	lt
 8005e00:	2201      	movlt	r2, #1
 8005e02:	6032      	strlt	r2, [r6, #0]
 8005e04:	43bb      	bics	r3, r7
 8005e06:	d112      	bne.n	8005e2e <_dtoa_r+0x9e>
 8005e08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e14:	4323      	orrs	r3, r4
 8005e16:	f000 854d 	beq.w	80068b4 <_dtoa_r+0xb24>
 8005e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006074 <_dtoa_r+0x2e4>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 854f 	beq.w	80068c4 <_dtoa_r+0xb34>
 8005e26:	f10a 0303 	add.w	r3, sl, #3
 8005e2a:	f000 bd49 	b.w	80068c0 <_dtoa_r+0xb30>
 8005e2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e32:	2200      	movs	r2, #0
 8005e34:	ec51 0b17 	vmov	r0, r1, d7
 8005e38:	2300      	movs	r3, #0
 8005e3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005e3e:	f7fa fe63 	bl	8000b08 <__aeabi_dcmpeq>
 8005e42:	4680      	mov	r8, r0
 8005e44:	b158      	cbz	r0, 8005e5e <_dtoa_r+0xce>
 8005e46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e48:	2301      	movs	r3, #1
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e4e:	b113      	cbz	r3, 8005e56 <_dtoa_r+0xc6>
 8005e50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e52:	4b84      	ldr	r3, [pc, #528]	@ (8006064 <_dtoa_r+0x2d4>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006078 <_dtoa_r+0x2e8>
 8005e5a:	f000 bd33 	b.w	80068c4 <_dtoa_r+0xb34>
 8005e5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005e62:	aa16      	add	r2, sp, #88	@ 0x58
 8005e64:	a917      	add	r1, sp, #92	@ 0x5c
 8005e66:	4658      	mov	r0, fp
 8005e68:	f001 f980 	bl	800716c <__d2b>
 8005e6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e70:	4681      	mov	r9, r0
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	d077      	beq.n	8005f66 <_dtoa_r+0x1d6>
 8005e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e90:	4619      	mov	r1, r3
 8005e92:	2200      	movs	r2, #0
 8005e94:	4b74      	ldr	r3, [pc, #464]	@ (8006068 <_dtoa_r+0x2d8>)
 8005e96:	f7fa fa17 	bl	80002c8 <__aeabi_dsub>
 8005e9a:	a369      	add	r3, pc, #420	@ (adr r3, 8006040 <_dtoa_r+0x2b0>)
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f7fa fbca 	bl	8000638 <__aeabi_dmul>
 8005ea4:	a368      	add	r3, pc, #416	@ (adr r3, 8006048 <_dtoa_r+0x2b8>)
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f7fa fa0f 	bl	80002cc <__adddf3>
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	460d      	mov	r5, r1
 8005eb4:	f7fa fb56 	bl	8000564 <__aeabi_i2d>
 8005eb8:	a365      	add	r3, pc, #404	@ (adr r3, 8006050 <_dtoa_r+0x2c0>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa fbbb 	bl	8000638 <__aeabi_dmul>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f7fa f9ff 	bl	80002cc <__adddf3>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	460d      	mov	r5, r1
 8005ed2:	f7fa fe61 	bl	8000b98 <__aeabi_d2iz>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4607      	mov	r7, r0
 8005eda:	2300      	movs	r3, #0
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa fe1c 	bl	8000b1c <__aeabi_dcmplt>
 8005ee4:	b140      	cbz	r0, 8005ef8 <_dtoa_r+0x168>
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	f7fa fb3c 	bl	8000564 <__aeabi_i2d>
 8005eec:	4622      	mov	r2, r4
 8005eee:	462b      	mov	r3, r5
 8005ef0:	f7fa fe0a 	bl	8000b08 <__aeabi_dcmpeq>
 8005ef4:	b900      	cbnz	r0, 8005ef8 <_dtoa_r+0x168>
 8005ef6:	3f01      	subs	r7, #1
 8005ef8:	2f16      	cmp	r7, #22
 8005efa:	d851      	bhi.n	8005fa0 <_dtoa_r+0x210>
 8005efc:	4b5b      	ldr	r3, [pc, #364]	@ (800606c <_dtoa_r+0x2dc>)
 8005efe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f0a:	f7fa fe07 	bl	8000b1c <__aeabi_dcmplt>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d048      	beq.n	8005fa4 <_dtoa_r+0x214>
 8005f12:	3f01      	subs	r7, #1
 8005f14:	2300      	movs	r3, #0
 8005f16:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f1a:	1b9b      	subs	r3, r3, r6
 8005f1c:	1e5a      	subs	r2, r3, #1
 8005f1e:	bf44      	itt	mi
 8005f20:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f24:	2300      	movmi	r3, #0
 8005f26:	9208      	str	r2, [sp, #32]
 8005f28:	bf54      	ite	pl
 8005f2a:	f04f 0800 	movpl.w	r8, #0
 8005f2e:	9308      	strmi	r3, [sp, #32]
 8005f30:	2f00      	cmp	r7, #0
 8005f32:	db39      	blt.n	8005fa8 <_dtoa_r+0x218>
 8005f34:	9b08      	ldr	r3, [sp, #32]
 8005f36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005f38:	443b      	add	r3, r7
 8005f3a:	9308      	str	r3, [sp, #32]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f42:	2b09      	cmp	r3, #9
 8005f44:	d864      	bhi.n	8006010 <_dtoa_r+0x280>
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	bfc4      	itt	gt
 8005f4a:	3b04      	subgt	r3, #4
 8005f4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f50:	f1a3 0302 	sub.w	r3, r3, #2
 8005f54:	bfcc      	ite	gt
 8005f56:	2400      	movgt	r4, #0
 8005f58:	2401      	movle	r4, #1
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d863      	bhi.n	8006026 <_dtoa_r+0x296>
 8005f5e:	e8df f003 	tbb	[pc, r3]
 8005f62:	372a      	.short	0x372a
 8005f64:	5535      	.short	0x5535
 8005f66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005f6a:	441e      	add	r6, r3
 8005f6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	bfc1      	itttt	gt
 8005f74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f78:	409f      	lslgt	r7, r3
 8005f7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f82:	bfd6      	itet	le
 8005f84:	f1c3 0320 	rsble	r3, r3, #32
 8005f88:	ea47 0003 	orrgt.w	r0, r7, r3
 8005f8c:	fa04 f003 	lslle.w	r0, r4, r3
 8005f90:	f7fa fad8 	bl	8000544 <__aeabi_ui2d>
 8005f94:	2201      	movs	r2, #1
 8005f96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f9a:	3e01      	subs	r6, #1
 8005f9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005f9e:	e777      	b.n	8005e90 <_dtoa_r+0x100>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e7b8      	b.n	8005f16 <_dtoa_r+0x186>
 8005fa4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005fa6:	e7b7      	b.n	8005f18 <_dtoa_r+0x188>
 8005fa8:	427b      	negs	r3, r7
 8005faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fac:	2300      	movs	r3, #0
 8005fae:	eba8 0807 	sub.w	r8, r8, r7
 8005fb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005fb4:	e7c4      	b.n	8005f40 <_dtoa_r+0x1b0>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dc35      	bgt.n	800602c <_dtoa_r+0x29c>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	9307      	str	r3, [sp, #28]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fca:	e00b      	b.n	8005fe4 <_dtoa_r+0x254>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e7f3      	b.n	8005fb8 <_dtoa_r+0x228>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	9307      	str	r3, [sp, #28]
 8005fe0:	bfb8      	it	lt
 8005fe2:	2301      	movlt	r3, #1
 8005fe4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	2204      	movs	r2, #4
 8005fec:	f102 0514 	add.w	r5, r2, #20
 8005ff0:	429d      	cmp	r5, r3
 8005ff2:	d91f      	bls.n	8006034 <_dtoa_r+0x2a4>
 8005ff4:	6041      	str	r1, [r0, #4]
 8005ff6:	4658      	mov	r0, fp
 8005ff8:	f000 fd8e 	bl	8006b18 <_Balloc>
 8005ffc:	4682      	mov	sl, r0
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d13c      	bne.n	800607c <_dtoa_r+0x2ec>
 8006002:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <_dtoa_r+0x2e0>)
 8006004:	4602      	mov	r2, r0
 8006006:	f240 11af 	movw	r1, #431	@ 0x1af
 800600a:	e6d8      	b.n	8005dbe <_dtoa_r+0x2e>
 800600c:	2301      	movs	r3, #1
 800600e:	e7e0      	b.n	8005fd2 <_dtoa_r+0x242>
 8006010:	2401      	movs	r4, #1
 8006012:	2300      	movs	r3, #0
 8006014:	9309      	str	r3, [sp, #36]	@ 0x24
 8006016:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006018:	f04f 33ff 	mov.w	r3, #4294967295
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	9307      	str	r3, [sp, #28]
 8006020:	2200      	movs	r2, #0
 8006022:	2312      	movs	r3, #18
 8006024:	e7d0      	b.n	8005fc8 <_dtoa_r+0x238>
 8006026:	2301      	movs	r3, #1
 8006028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800602a:	e7f5      	b.n	8006018 <_dtoa_r+0x288>
 800602c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	9307      	str	r3, [sp, #28]
 8006032:	e7d7      	b.n	8005fe4 <_dtoa_r+0x254>
 8006034:	3101      	adds	r1, #1
 8006036:	0052      	lsls	r2, r2, #1
 8006038:	e7d8      	b.n	8005fec <_dtoa_r+0x25c>
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w
 8006040:	636f4361 	.word	0x636f4361
 8006044:	3fd287a7 	.word	0x3fd287a7
 8006048:	8b60c8b3 	.word	0x8b60c8b3
 800604c:	3fc68a28 	.word	0x3fc68a28
 8006050:	509f79fb 	.word	0x509f79fb
 8006054:	3fd34413 	.word	0x3fd34413
 8006058:	08007dc5 	.word	0x08007dc5
 800605c:	08007ddc 	.word	0x08007ddc
 8006060:	7ff00000 	.word	0x7ff00000
 8006064:	08007d95 	.word	0x08007d95
 8006068:	3ff80000 	.word	0x3ff80000
 800606c:	08007ed8 	.word	0x08007ed8
 8006070:	08007e34 	.word	0x08007e34
 8006074:	08007dc1 	.word	0x08007dc1
 8006078:	08007d94 	.word	0x08007d94
 800607c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006080:	6018      	str	r0, [r3, #0]
 8006082:	9b07      	ldr	r3, [sp, #28]
 8006084:	2b0e      	cmp	r3, #14
 8006086:	f200 80a4 	bhi.w	80061d2 <_dtoa_r+0x442>
 800608a:	2c00      	cmp	r4, #0
 800608c:	f000 80a1 	beq.w	80061d2 <_dtoa_r+0x442>
 8006090:	2f00      	cmp	r7, #0
 8006092:	dd33      	ble.n	80060fc <_dtoa_r+0x36c>
 8006094:	4bad      	ldr	r3, [pc, #692]	@ (800634c <_dtoa_r+0x5bc>)
 8006096:	f007 020f 	and.w	r2, r7, #15
 800609a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800609e:	ed93 7b00 	vldr	d7, [r3]
 80060a2:	05f8      	lsls	r0, r7, #23
 80060a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80060a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060ac:	d516      	bpl.n	80060dc <_dtoa_r+0x34c>
 80060ae:	4ba8      	ldr	r3, [pc, #672]	@ (8006350 <_dtoa_r+0x5c0>)
 80060b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060b8:	f7fa fbe8 	bl	800088c <__aeabi_ddiv>
 80060bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060c0:	f004 040f 	and.w	r4, r4, #15
 80060c4:	2603      	movs	r6, #3
 80060c6:	4da2      	ldr	r5, [pc, #648]	@ (8006350 <_dtoa_r+0x5c0>)
 80060c8:	b954      	cbnz	r4, 80060e0 <_dtoa_r+0x350>
 80060ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d2:	f7fa fbdb 	bl	800088c <__aeabi_ddiv>
 80060d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060da:	e028      	b.n	800612e <_dtoa_r+0x39e>
 80060dc:	2602      	movs	r6, #2
 80060de:	e7f2      	b.n	80060c6 <_dtoa_r+0x336>
 80060e0:	07e1      	lsls	r1, r4, #31
 80060e2:	d508      	bpl.n	80060f6 <_dtoa_r+0x366>
 80060e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060ec:	f7fa faa4 	bl	8000638 <__aeabi_dmul>
 80060f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060f4:	3601      	adds	r6, #1
 80060f6:	1064      	asrs	r4, r4, #1
 80060f8:	3508      	adds	r5, #8
 80060fa:	e7e5      	b.n	80060c8 <_dtoa_r+0x338>
 80060fc:	f000 80d2 	beq.w	80062a4 <_dtoa_r+0x514>
 8006100:	427c      	negs	r4, r7
 8006102:	4b92      	ldr	r3, [pc, #584]	@ (800634c <_dtoa_r+0x5bc>)
 8006104:	4d92      	ldr	r5, [pc, #584]	@ (8006350 <_dtoa_r+0x5c0>)
 8006106:	f004 020f 	and.w	r2, r4, #15
 800610a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006116:	f7fa fa8f 	bl	8000638 <__aeabi_dmul>
 800611a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800611e:	1124      	asrs	r4, r4, #4
 8006120:	2300      	movs	r3, #0
 8006122:	2602      	movs	r6, #2
 8006124:	2c00      	cmp	r4, #0
 8006126:	f040 80b2 	bne.w	800628e <_dtoa_r+0x4fe>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1d3      	bne.n	80060d6 <_dtoa_r+0x346>
 800612e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006130:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80b7 	beq.w	80062a8 <_dtoa_r+0x518>
 800613a:	4b86      	ldr	r3, [pc, #536]	@ (8006354 <_dtoa_r+0x5c4>)
 800613c:	2200      	movs	r2, #0
 800613e:	4620      	mov	r0, r4
 8006140:	4629      	mov	r1, r5
 8006142:	f7fa fceb 	bl	8000b1c <__aeabi_dcmplt>
 8006146:	2800      	cmp	r0, #0
 8006148:	f000 80ae 	beq.w	80062a8 <_dtoa_r+0x518>
 800614c:	9b07      	ldr	r3, [sp, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80aa 	beq.w	80062a8 <_dtoa_r+0x518>
 8006154:	9b00      	ldr	r3, [sp, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	dd37      	ble.n	80061ca <_dtoa_r+0x43a>
 800615a:	1e7b      	subs	r3, r7, #1
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	4620      	mov	r0, r4
 8006160:	4b7d      	ldr	r3, [pc, #500]	@ (8006358 <_dtoa_r+0x5c8>)
 8006162:	2200      	movs	r2, #0
 8006164:	4629      	mov	r1, r5
 8006166:	f7fa fa67 	bl	8000638 <__aeabi_dmul>
 800616a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800616e:	9c00      	ldr	r4, [sp, #0]
 8006170:	3601      	adds	r6, #1
 8006172:	4630      	mov	r0, r6
 8006174:	f7fa f9f6 	bl	8000564 <__aeabi_i2d>
 8006178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800617c:	f7fa fa5c 	bl	8000638 <__aeabi_dmul>
 8006180:	4b76      	ldr	r3, [pc, #472]	@ (800635c <_dtoa_r+0x5cc>)
 8006182:	2200      	movs	r2, #0
 8006184:	f7fa f8a2 	bl	80002cc <__adddf3>
 8006188:	4605      	mov	r5, r0
 800618a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800618e:	2c00      	cmp	r4, #0
 8006190:	f040 808d 	bne.w	80062ae <_dtoa_r+0x51e>
 8006194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006198:	4b71      	ldr	r3, [pc, #452]	@ (8006360 <_dtoa_r+0x5d0>)
 800619a:	2200      	movs	r2, #0
 800619c:	f7fa f894 	bl	80002c8 <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061a8:	462a      	mov	r2, r5
 80061aa:	4633      	mov	r3, r6
 80061ac:	f7fa fcd4 	bl	8000b58 <__aeabi_dcmpgt>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f040 828b 	bne.w	80066cc <_dtoa_r+0x93c>
 80061b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ba:	462a      	mov	r2, r5
 80061bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80061c0:	f7fa fcac 	bl	8000b1c <__aeabi_dcmplt>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f040 8128 	bne.w	800641a <_dtoa_r+0x68a>
 80061ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80061d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f2c0 815a 	blt.w	800648e <_dtoa_r+0x6fe>
 80061da:	2f0e      	cmp	r7, #14
 80061dc:	f300 8157 	bgt.w	800648e <_dtoa_r+0x6fe>
 80061e0:	4b5a      	ldr	r3, [pc, #360]	@ (800634c <_dtoa_r+0x5bc>)
 80061e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061e6:	ed93 7b00 	vldr	d7, [r3]
 80061ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	ed8d 7b00 	vstr	d7, [sp]
 80061f2:	da03      	bge.n	80061fc <_dtoa_r+0x46c>
 80061f4:	9b07      	ldr	r3, [sp, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f340 8101 	ble.w	80063fe <_dtoa_r+0x66e>
 80061fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006200:	4656      	mov	r6, sl
 8006202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7fa fb3f 	bl	800088c <__aeabi_ddiv>
 800620e:	f7fa fcc3 	bl	8000b98 <__aeabi_d2iz>
 8006212:	4680      	mov	r8, r0
 8006214:	f7fa f9a6 	bl	8000564 <__aeabi_i2d>
 8006218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800621c:	f7fa fa0c 	bl	8000638 <__aeabi_dmul>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800622c:	f7fa f84c 	bl	80002c8 <__aeabi_dsub>
 8006230:	f806 4b01 	strb.w	r4, [r6], #1
 8006234:	9d07      	ldr	r5, [sp, #28]
 8006236:	eba6 040a 	sub.w	r4, r6, sl
 800623a:	42a5      	cmp	r5, r4
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	f040 8117 	bne.w	8006472 <_dtoa_r+0x6e2>
 8006244:	f7fa f842 	bl	80002cc <__adddf3>
 8006248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800624c:	4604      	mov	r4, r0
 800624e:	460d      	mov	r5, r1
 8006250:	f7fa fc82 	bl	8000b58 <__aeabi_dcmpgt>
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 80f9 	bne.w	800644c <_dtoa_r+0x6bc>
 800625a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa fc51 	bl	8000b08 <__aeabi_dcmpeq>
 8006266:	b118      	cbz	r0, 8006270 <_dtoa_r+0x4e0>
 8006268:	f018 0f01 	tst.w	r8, #1
 800626c:	f040 80ee 	bne.w	800644c <_dtoa_r+0x6bc>
 8006270:	4649      	mov	r1, r9
 8006272:	4658      	mov	r0, fp
 8006274:	f000 fc90 	bl	8006b98 <_Bfree>
 8006278:	2300      	movs	r3, #0
 800627a:	7033      	strb	r3, [r6, #0]
 800627c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800627e:	3701      	adds	r7, #1
 8006280:	601f      	str	r7, [r3, #0]
 8006282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 831d 	beq.w	80068c4 <_dtoa_r+0xb34>
 800628a:	601e      	str	r6, [r3, #0]
 800628c:	e31a      	b.n	80068c4 <_dtoa_r+0xb34>
 800628e:	07e2      	lsls	r2, r4, #31
 8006290:	d505      	bpl.n	800629e <_dtoa_r+0x50e>
 8006292:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006296:	f7fa f9cf 	bl	8000638 <__aeabi_dmul>
 800629a:	3601      	adds	r6, #1
 800629c:	2301      	movs	r3, #1
 800629e:	1064      	asrs	r4, r4, #1
 80062a0:	3508      	adds	r5, #8
 80062a2:	e73f      	b.n	8006124 <_dtoa_r+0x394>
 80062a4:	2602      	movs	r6, #2
 80062a6:	e742      	b.n	800612e <_dtoa_r+0x39e>
 80062a8:	9c07      	ldr	r4, [sp, #28]
 80062aa:	9704      	str	r7, [sp, #16]
 80062ac:	e761      	b.n	8006172 <_dtoa_r+0x3e2>
 80062ae:	4b27      	ldr	r3, [pc, #156]	@ (800634c <_dtoa_r+0x5bc>)
 80062b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062ba:	4454      	add	r4, sl
 80062bc:	2900      	cmp	r1, #0
 80062be:	d053      	beq.n	8006368 <_dtoa_r+0x5d8>
 80062c0:	4928      	ldr	r1, [pc, #160]	@ (8006364 <_dtoa_r+0x5d4>)
 80062c2:	2000      	movs	r0, #0
 80062c4:	f7fa fae2 	bl	800088c <__aeabi_ddiv>
 80062c8:	4633      	mov	r3, r6
 80062ca:	462a      	mov	r2, r5
 80062cc:	f7f9 fffc 	bl	80002c8 <__aeabi_dsub>
 80062d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062d4:	4656      	mov	r6, sl
 80062d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062da:	f7fa fc5d 	bl	8000b98 <__aeabi_d2iz>
 80062de:	4605      	mov	r5, r0
 80062e0:	f7fa f940 	bl	8000564 <__aeabi_i2d>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ec:	f7f9 ffec 	bl	80002c8 <__aeabi_dsub>
 80062f0:	3530      	adds	r5, #48	@ 0x30
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062fa:	f806 5b01 	strb.w	r5, [r6], #1
 80062fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006302:	f7fa fc0b 	bl	8000b1c <__aeabi_dcmplt>
 8006306:	2800      	cmp	r0, #0
 8006308:	d171      	bne.n	80063ee <_dtoa_r+0x65e>
 800630a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800630e:	4911      	ldr	r1, [pc, #68]	@ (8006354 <_dtoa_r+0x5c4>)
 8006310:	2000      	movs	r0, #0
 8006312:	f7f9 ffd9 	bl	80002c8 <__aeabi_dsub>
 8006316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800631a:	f7fa fbff 	bl	8000b1c <__aeabi_dcmplt>
 800631e:	2800      	cmp	r0, #0
 8006320:	f040 8095 	bne.w	800644e <_dtoa_r+0x6be>
 8006324:	42a6      	cmp	r6, r4
 8006326:	f43f af50 	beq.w	80061ca <_dtoa_r+0x43a>
 800632a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800632e:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <_dtoa_r+0x5c8>)
 8006330:	2200      	movs	r2, #0
 8006332:	f7fa f981 	bl	8000638 <__aeabi_dmul>
 8006336:	4b08      	ldr	r3, [pc, #32]	@ (8006358 <_dtoa_r+0x5c8>)
 8006338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800633c:	2200      	movs	r2, #0
 800633e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006342:	f7fa f979 	bl	8000638 <__aeabi_dmul>
 8006346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800634a:	e7c4      	b.n	80062d6 <_dtoa_r+0x546>
 800634c:	08007ed8 	.word	0x08007ed8
 8006350:	08007eb0 	.word	0x08007eb0
 8006354:	3ff00000 	.word	0x3ff00000
 8006358:	40240000 	.word	0x40240000
 800635c:	401c0000 	.word	0x401c0000
 8006360:	40140000 	.word	0x40140000
 8006364:	3fe00000 	.word	0x3fe00000
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	f7fa f964 	bl	8000638 <__aeabi_dmul>
 8006370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006374:	9415      	str	r4, [sp, #84]	@ 0x54
 8006376:	4656      	mov	r6, sl
 8006378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800637c:	f7fa fc0c 	bl	8000b98 <__aeabi_d2iz>
 8006380:	4605      	mov	r5, r0
 8006382:	f7fa f8ef 	bl	8000564 <__aeabi_i2d>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800638e:	f7f9 ff9b 	bl	80002c8 <__aeabi_dsub>
 8006392:	3530      	adds	r5, #48	@ 0x30
 8006394:	f806 5b01 	strb.w	r5, [r6], #1
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	42a6      	cmp	r6, r4
 800639e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	d124      	bne.n	80063f2 <_dtoa_r+0x662>
 80063a8:	4bac      	ldr	r3, [pc, #688]	@ (800665c <_dtoa_r+0x8cc>)
 80063aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063ae:	f7f9 ff8d 	bl	80002cc <__adddf3>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ba:	f7fa fbcd 	bl	8000b58 <__aeabi_dcmpgt>
 80063be:	2800      	cmp	r0, #0
 80063c0:	d145      	bne.n	800644e <_dtoa_r+0x6be>
 80063c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063c6:	49a5      	ldr	r1, [pc, #660]	@ (800665c <_dtoa_r+0x8cc>)
 80063c8:	2000      	movs	r0, #0
 80063ca:	f7f9 ff7d 	bl	80002c8 <__aeabi_dsub>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d6:	f7fa fba1 	bl	8000b1c <__aeabi_dcmplt>
 80063da:	2800      	cmp	r0, #0
 80063dc:	f43f aef5 	beq.w	80061ca <_dtoa_r+0x43a>
 80063e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80063e2:	1e73      	subs	r3, r6, #1
 80063e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80063e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063ea:	2b30      	cmp	r3, #48	@ 0x30
 80063ec:	d0f8      	beq.n	80063e0 <_dtoa_r+0x650>
 80063ee:	9f04      	ldr	r7, [sp, #16]
 80063f0:	e73e      	b.n	8006270 <_dtoa_r+0x4e0>
 80063f2:	4b9b      	ldr	r3, [pc, #620]	@ (8006660 <_dtoa_r+0x8d0>)
 80063f4:	f7fa f920 	bl	8000638 <__aeabi_dmul>
 80063f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063fc:	e7bc      	b.n	8006378 <_dtoa_r+0x5e8>
 80063fe:	d10c      	bne.n	800641a <_dtoa_r+0x68a>
 8006400:	4b98      	ldr	r3, [pc, #608]	@ (8006664 <_dtoa_r+0x8d4>)
 8006402:	2200      	movs	r2, #0
 8006404:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006408:	f7fa f916 	bl	8000638 <__aeabi_dmul>
 800640c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006410:	f7fa fb98 	bl	8000b44 <__aeabi_dcmpge>
 8006414:	2800      	cmp	r0, #0
 8006416:	f000 8157 	beq.w	80066c8 <_dtoa_r+0x938>
 800641a:	2400      	movs	r4, #0
 800641c:	4625      	mov	r5, r4
 800641e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006420:	43db      	mvns	r3, r3
 8006422:	9304      	str	r3, [sp, #16]
 8006424:	4656      	mov	r6, sl
 8006426:	2700      	movs	r7, #0
 8006428:	4621      	mov	r1, r4
 800642a:	4658      	mov	r0, fp
 800642c:	f000 fbb4 	bl	8006b98 <_Bfree>
 8006430:	2d00      	cmp	r5, #0
 8006432:	d0dc      	beq.n	80063ee <_dtoa_r+0x65e>
 8006434:	b12f      	cbz	r7, 8006442 <_dtoa_r+0x6b2>
 8006436:	42af      	cmp	r7, r5
 8006438:	d003      	beq.n	8006442 <_dtoa_r+0x6b2>
 800643a:	4639      	mov	r1, r7
 800643c:	4658      	mov	r0, fp
 800643e:	f000 fbab 	bl	8006b98 <_Bfree>
 8006442:	4629      	mov	r1, r5
 8006444:	4658      	mov	r0, fp
 8006446:	f000 fba7 	bl	8006b98 <_Bfree>
 800644a:	e7d0      	b.n	80063ee <_dtoa_r+0x65e>
 800644c:	9704      	str	r7, [sp, #16]
 800644e:	4633      	mov	r3, r6
 8006450:	461e      	mov	r6, r3
 8006452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006456:	2a39      	cmp	r2, #57	@ 0x39
 8006458:	d107      	bne.n	800646a <_dtoa_r+0x6da>
 800645a:	459a      	cmp	sl, r3
 800645c:	d1f8      	bne.n	8006450 <_dtoa_r+0x6c0>
 800645e:	9a04      	ldr	r2, [sp, #16]
 8006460:	3201      	adds	r2, #1
 8006462:	9204      	str	r2, [sp, #16]
 8006464:	2230      	movs	r2, #48	@ 0x30
 8006466:	f88a 2000 	strb.w	r2, [sl]
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	3201      	adds	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	e7bd      	b.n	80063ee <_dtoa_r+0x65e>
 8006472:	4b7b      	ldr	r3, [pc, #492]	@ (8006660 <_dtoa_r+0x8d0>)
 8006474:	2200      	movs	r2, #0
 8006476:	f7fa f8df 	bl	8000638 <__aeabi_dmul>
 800647a:	2200      	movs	r2, #0
 800647c:	2300      	movs	r3, #0
 800647e:	4604      	mov	r4, r0
 8006480:	460d      	mov	r5, r1
 8006482:	f7fa fb41 	bl	8000b08 <__aeabi_dcmpeq>
 8006486:	2800      	cmp	r0, #0
 8006488:	f43f aebb 	beq.w	8006202 <_dtoa_r+0x472>
 800648c:	e6f0      	b.n	8006270 <_dtoa_r+0x4e0>
 800648e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006490:	2a00      	cmp	r2, #0
 8006492:	f000 80db 	beq.w	800664c <_dtoa_r+0x8bc>
 8006496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006498:	2a01      	cmp	r2, #1
 800649a:	f300 80bf 	bgt.w	800661c <_dtoa_r+0x88c>
 800649e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	f000 80b7 	beq.w	8006614 <_dtoa_r+0x884>
 80064a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064ac:	4646      	mov	r6, r8
 80064ae:	9a08      	ldr	r2, [sp, #32]
 80064b0:	2101      	movs	r1, #1
 80064b2:	441a      	add	r2, r3
 80064b4:	4658      	mov	r0, fp
 80064b6:	4498      	add	r8, r3
 80064b8:	9208      	str	r2, [sp, #32]
 80064ba:	f000 fc21 	bl	8006d00 <__i2b>
 80064be:	4605      	mov	r5, r0
 80064c0:	b15e      	cbz	r6, 80064da <_dtoa_r+0x74a>
 80064c2:	9b08      	ldr	r3, [sp, #32]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dd08      	ble.n	80064da <_dtoa_r+0x74a>
 80064c8:	42b3      	cmp	r3, r6
 80064ca:	9a08      	ldr	r2, [sp, #32]
 80064cc:	bfa8      	it	ge
 80064ce:	4633      	movge	r3, r6
 80064d0:	eba8 0803 	sub.w	r8, r8, r3
 80064d4:	1af6      	subs	r6, r6, r3
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	9308      	str	r3, [sp, #32]
 80064da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064dc:	b1f3      	cbz	r3, 800651c <_dtoa_r+0x78c>
 80064de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80b7 	beq.w	8006654 <_dtoa_r+0x8c4>
 80064e6:	b18c      	cbz	r4, 800650c <_dtoa_r+0x77c>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4622      	mov	r2, r4
 80064ec:	4658      	mov	r0, fp
 80064ee:	f000 fcc7 	bl	8006e80 <__pow5mult>
 80064f2:	464a      	mov	r2, r9
 80064f4:	4601      	mov	r1, r0
 80064f6:	4605      	mov	r5, r0
 80064f8:	4658      	mov	r0, fp
 80064fa:	f000 fc17 	bl	8006d2c <__multiply>
 80064fe:	4649      	mov	r1, r9
 8006500:	9004      	str	r0, [sp, #16]
 8006502:	4658      	mov	r0, fp
 8006504:	f000 fb48 	bl	8006b98 <_Bfree>
 8006508:	9b04      	ldr	r3, [sp, #16]
 800650a:	4699      	mov	r9, r3
 800650c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800650e:	1b1a      	subs	r2, r3, r4
 8006510:	d004      	beq.n	800651c <_dtoa_r+0x78c>
 8006512:	4649      	mov	r1, r9
 8006514:	4658      	mov	r0, fp
 8006516:	f000 fcb3 	bl	8006e80 <__pow5mult>
 800651a:	4681      	mov	r9, r0
 800651c:	2101      	movs	r1, #1
 800651e:	4658      	mov	r0, fp
 8006520:	f000 fbee 	bl	8006d00 <__i2b>
 8006524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006526:	4604      	mov	r4, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 81cf 	beq.w	80068cc <_dtoa_r+0xb3c>
 800652e:	461a      	mov	r2, r3
 8006530:	4601      	mov	r1, r0
 8006532:	4658      	mov	r0, fp
 8006534:	f000 fca4 	bl	8006e80 <__pow5mult>
 8006538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800653a:	2b01      	cmp	r3, #1
 800653c:	4604      	mov	r4, r0
 800653e:	f300 8095 	bgt.w	800666c <_dtoa_r+0x8dc>
 8006542:	9b02      	ldr	r3, [sp, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 8087 	bne.w	8006658 <_dtoa_r+0x8c8>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 8089 	bne.w	8006668 <_dtoa_r+0x8d8>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800655c:	0d1b      	lsrs	r3, r3, #20
 800655e:	051b      	lsls	r3, r3, #20
 8006560:	b12b      	cbz	r3, 800656e <_dtoa_r+0x7de>
 8006562:	9b08      	ldr	r3, [sp, #32]
 8006564:	3301      	adds	r3, #1
 8006566:	9308      	str	r3, [sp, #32]
 8006568:	f108 0801 	add.w	r8, r8, #1
 800656c:	2301      	movs	r3, #1
 800656e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 81b0 	beq.w	80068d8 <_dtoa_r+0xb48>
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800657e:	6918      	ldr	r0, [r3, #16]
 8006580:	f000 fb72 	bl	8006c68 <__hi0bits>
 8006584:	f1c0 0020 	rsb	r0, r0, #32
 8006588:	9b08      	ldr	r3, [sp, #32]
 800658a:	4418      	add	r0, r3
 800658c:	f010 001f 	ands.w	r0, r0, #31
 8006590:	d077      	beq.n	8006682 <_dtoa_r+0x8f2>
 8006592:	f1c0 0320 	rsb	r3, r0, #32
 8006596:	2b04      	cmp	r3, #4
 8006598:	dd6b      	ble.n	8006672 <_dtoa_r+0x8e2>
 800659a:	9b08      	ldr	r3, [sp, #32]
 800659c:	f1c0 001c 	rsb	r0, r0, #28
 80065a0:	4403      	add	r3, r0
 80065a2:	4480      	add	r8, r0
 80065a4:	4406      	add	r6, r0
 80065a6:	9308      	str	r3, [sp, #32]
 80065a8:	f1b8 0f00 	cmp.w	r8, #0
 80065ac:	dd05      	ble.n	80065ba <_dtoa_r+0x82a>
 80065ae:	4649      	mov	r1, r9
 80065b0:	4642      	mov	r2, r8
 80065b2:	4658      	mov	r0, fp
 80065b4:	f000 fcbe 	bl	8006f34 <__lshift>
 80065b8:	4681      	mov	r9, r0
 80065ba:	9b08      	ldr	r3, [sp, #32]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dd05      	ble.n	80065cc <_dtoa_r+0x83c>
 80065c0:	4621      	mov	r1, r4
 80065c2:	461a      	mov	r2, r3
 80065c4:	4658      	mov	r0, fp
 80065c6:	f000 fcb5 	bl	8006f34 <__lshift>
 80065ca:	4604      	mov	r4, r0
 80065cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d059      	beq.n	8006686 <_dtoa_r+0x8f6>
 80065d2:	4621      	mov	r1, r4
 80065d4:	4648      	mov	r0, r9
 80065d6:	f000 fd19 	bl	800700c <__mcmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	da53      	bge.n	8006686 <_dtoa_r+0x8f6>
 80065de:	1e7b      	subs	r3, r7, #1
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	4649      	mov	r1, r9
 80065e4:	2300      	movs	r3, #0
 80065e6:	220a      	movs	r2, #10
 80065e8:	4658      	mov	r0, fp
 80065ea:	f000 faf7 	bl	8006bdc <__multadd>
 80065ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065f0:	4681      	mov	r9, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8172 	beq.w	80068dc <_dtoa_r+0xb4c>
 80065f8:	2300      	movs	r3, #0
 80065fa:	4629      	mov	r1, r5
 80065fc:	220a      	movs	r2, #10
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 faec 	bl	8006bdc <__multadd>
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	4605      	mov	r5, r0
 800660a:	dc67      	bgt.n	80066dc <_dtoa_r+0x94c>
 800660c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800660e:	2b02      	cmp	r3, #2
 8006610:	dc41      	bgt.n	8006696 <_dtoa_r+0x906>
 8006612:	e063      	b.n	80066dc <_dtoa_r+0x94c>
 8006614:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006616:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800661a:	e746      	b.n	80064aa <_dtoa_r+0x71a>
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	1e5c      	subs	r4, r3, #1
 8006620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006622:	42a3      	cmp	r3, r4
 8006624:	bfbf      	itttt	lt
 8006626:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006628:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800662a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800662c:	1ae3      	sublt	r3, r4, r3
 800662e:	bfb4      	ite	lt
 8006630:	18d2      	addlt	r2, r2, r3
 8006632:	1b1c      	subge	r4, r3, r4
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	bfbc      	itt	lt
 8006638:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800663a:	2400      	movlt	r4, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	bfb5      	itete	lt
 8006640:	eba8 0603 	sublt.w	r6, r8, r3
 8006644:	9b07      	ldrge	r3, [sp, #28]
 8006646:	2300      	movlt	r3, #0
 8006648:	4646      	movge	r6, r8
 800664a:	e730      	b.n	80064ae <_dtoa_r+0x71e>
 800664c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800664e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006650:	4646      	mov	r6, r8
 8006652:	e735      	b.n	80064c0 <_dtoa_r+0x730>
 8006654:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006656:	e75c      	b.n	8006512 <_dtoa_r+0x782>
 8006658:	2300      	movs	r3, #0
 800665a:	e788      	b.n	800656e <_dtoa_r+0x7de>
 800665c:	3fe00000 	.word	0x3fe00000
 8006660:	40240000 	.word	0x40240000
 8006664:	40140000 	.word	0x40140000
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	e780      	b.n	800656e <_dtoa_r+0x7de>
 800666c:	2300      	movs	r3, #0
 800666e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006670:	e782      	b.n	8006578 <_dtoa_r+0x7e8>
 8006672:	d099      	beq.n	80065a8 <_dtoa_r+0x818>
 8006674:	9a08      	ldr	r2, [sp, #32]
 8006676:	331c      	adds	r3, #28
 8006678:	441a      	add	r2, r3
 800667a:	4498      	add	r8, r3
 800667c:	441e      	add	r6, r3
 800667e:	9208      	str	r2, [sp, #32]
 8006680:	e792      	b.n	80065a8 <_dtoa_r+0x818>
 8006682:	4603      	mov	r3, r0
 8006684:	e7f6      	b.n	8006674 <_dtoa_r+0x8e4>
 8006686:	9b07      	ldr	r3, [sp, #28]
 8006688:	9704      	str	r7, [sp, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	dc20      	bgt.n	80066d0 <_dtoa_r+0x940>
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006692:	2b02      	cmp	r3, #2
 8006694:	dd1e      	ble.n	80066d4 <_dtoa_r+0x944>
 8006696:	9b00      	ldr	r3, [sp, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f47f aec0 	bne.w	800641e <_dtoa_r+0x68e>
 800669e:	4621      	mov	r1, r4
 80066a0:	2205      	movs	r2, #5
 80066a2:	4658      	mov	r0, fp
 80066a4:	f000 fa9a 	bl	8006bdc <__multadd>
 80066a8:	4601      	mov	r1, r0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4648      	mov	r0, r9
 80066ae:	f000 fcad 	bl	800700c <__mcmp>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f77f aeb3 	ble.w	800641e <_dtoa_r+0x68e>
 80066b8:	4656      	mov	r6, sl
 80066ba:	2331      	movs	r3, #49	@ 0x31
 80066bc:	f806 3b01 	strb.w	r3, [r6], #1
 80066c0:	9b04      	ldr	r3, [sp, #16]
 80066c2:	3301      	adds	r3, #1
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	e6ae      	b.n	8006426 <_dtoa_r+0x696>
 80066c8:	9c07      	ldr	r4, [sp, #28]
 80066ca:	9704      	str	r7, [sp, #16]
 80066cc:	4625      	mov	r5, r4
 80066ce:	e7f3      	b.n	80066b8 <_dtoa_r+0x928>
 80066d0:	9b07      	ldr	r3, [sp, #28]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 8104 	beq.w	80068e4 <_dtoa_r+0xb54>
 80066dc:	2e00      	cmp	r6, #0
 80066de:	dd05      	ble.n	80066ec <_dtoa_r+0x95c>
 80066e0:	4629      	mov	r1, r5
 80066e2:	4632      	mov	r2, r6
 80066e4:	4658      	mov	r0, fp
 80066e6:	f000 fc25 	bl	8006f34 <__lshift>
 80066ea:	4605      	mov	r5, r0
 80066ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d05a      	beq.n	80067a8 <_dtoa_r+0xa18>
 80066f2:	6869      	ldr	r1, [r5, #4]
 80066f4:	4658      	mov	r0, fp
 80066f6:	f000 fa0f 	bl	8006b18 <_Balloc>
 80066fa:	4606      	mov	r6, r0
 80066fc:	b928      	cbnz	r0, 800670a <_dtoa_r+0x97a>
 80066fe:	4b84      	ldr	r3, [pc, #528]	@ (8006910 <_dtoa_r+0xb80>)
 8006700:	4602      	mov	r2, r0
 8006702:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006706:	f7ff bb5a 	b.w	8005dbe <_dtoa_r+0x2e>
 800670a:	692a      	ldr	r2, [r5, #16]
 800670c:	3202      	adds	r2, #2
 800670e:	0092      	lsls	r2, r2, #2
 8006710:	f105 010c 	add.w	r1, r5, #12
 8006714:	300c      	adds	r0, #12
 8006716:	f000 ffaf 	bl	8007678 <memcpy>
 800671a:	2201      	movs	r2, #1
 800671c:	4631      	mov	r1, r6
 800671e:	4658      	mov	r0, fp
 8006720:	f000 fc08 	bl	8006f34 <__lshift>
 8006724:	f10a 0301 	add.w	r3, sl, #1
 8006728:	9307      	str	r3, [sp, #28]
 800672a:	9b00      	ldr	r3, [sp, #0]
 800672c:	4453      	add	r3, sl
 800672e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006730:	9b02      	ldr	r3, [sp, #8]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	462f      	mov	r7, r5
 8006738:	930a      	str	r3, [sp, #40]	@ 0x28
 800673a:	4605      	mov	r5, r0
 800673c:	9b07      	ldr	r3, [sp, #28]
 800673e:	4621      	mov	r1, r4
 8006740:	3b01      	subs	r3, #1
 8006742:	4648      	mov	r0, r9
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	f7ff fa98 	bl	8005c7a <quorem>
 800674a:	4639      	mov	r1, r7
 800674c:	9002      	str	r0, [sp, #8]
 800674e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006752:	4648      	mov	r0, r9
 8006754:	f000 fc5a 	bl	800700c <__mcmp>
 8006758:	462a      	mov	r2, r5
 800675a:	9008      	str	r0, [sp, #32]
 800675c:	4621      	mov	r1, r4
 800675e:	4658      	mov	r0, fp
 8006760:	f000 fc70 	bl	8007044 <__mdiff>
 8006764:	68c2      	ldr	r2, [r0, #12]
 8006766:	4606      	mov	r6, r0
 8006768:	bb02      	cbnz	r2, 80067ac <_dtoa_r+0xa1c>
 800676a:	4601      	mov	r1, r0
 800676c:	4648      	mov	r0, r9
 800676e:	f000 fc4d 	bl	800700c <__mcmp>
 8006772:	4602      	mov	r2, r0
 8006774:	4631      	mov	r1, r6
 8006776:	4658      	mov	r0, fp
 8006778:	920e      	str	r2, [sp, #56]	@ 0x38
 800677a:	f000 fa0d 	bl	8006b98 <_Bfree>
 800677e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006780:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006782:	9e07      	ldr	r6, [sp, #28]
 8006784:	ea43 0102 	orr.w	r1, r3, r2
 8006788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800678a:	4319      	orrs	r1, r3
 800678c:	d110      	bne.n	80067b0 <_dtoa_r+0xa20>
 800678e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006792:	d029      	beq.n	80067e8 <_dtoa_r+0xa58>
 8006794:	9b08      	ldr	r3, [sp, #32]
 8006796:	2b00      	cmp	r3, #0
 8006798:	dd02      	ble.n	80067a0 <_dtoa_r+0xa10>
 800679a:	9b02      	ldr	r3, [sp, #8]
 800679c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067a0:	9b00      	ldr	r3, [sp, #0]
 80067a2:	f883 8000 	strb.w	r8, [r3]
 80067a6:	e63f      	b.n	8006428 <_dtoa_r+0x698>
 80067a8:	4628      	mov	r0, r5
 80067aa:	e7bb      	b.n	8006724 <_dtoa_r+0x994>
 80067ac:	2201      	movs	r2, #1
 80067ae:	e7e1      	b.n	8006774 <_dtoa_r+0x9e4>
 80067b0:	9b08      	ldr	r3, [sp, #32]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	db04      	blt.n	80067c0 <_dtoa_r+0xa30>
 80067b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067b8:	430b      	orrs	r3, r1
 80067ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067bc:	430b      	orrs	r3, r1
 80067be:	d120      	bne.n	8006802 <_dtoa_r+0xa72>
 80067c0:	2a00      	cmp	r2, #0
 80067c2:	dded      	ble.n	80067a0 <_dtoa_r+0xa10>
 80067c4:	4649      	mov	r1, r9
 80067c6:	2201      	movs	r2, #1
 80067c8:	4658      	mov	r0, fp
 80067ca:	f000 fbb3 	bl	8006f34 <__lshift>
 80067ce:	4621      	mov	r1, r4
 80067d0:	4681      	mov	r9, r0
 80067d2:	f000 fc1b 	bl	800700c <__mcmp>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	dc03      	bgt.n	80067e2 <_dtoa_r+0xa52>
 80067da:	d1e1      	bne.n	80067a0 <_dtoa_r+0xa10>
 80067dc:	f018 0f01 	tst.w	r8, #1
 80067e0:	d0de      	beq.n	80067a0 <_dtoa_r+0xa10>
 80067e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067e6:	d1d8      	bne.n	800679a <_dtoa_r+0xa0a>
 80067e8:	9a00      	ldr	r2, [sp, #0]
 80067ea:	2339      	movs	r3, #57	@ 0x39
 80067ec:	7013      	strb	r3, [r2, #0]
 80067ee:	4633      	mov	r3, r6
 80067f0:	461e      	mov	r6, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067f8:	2a39      	cmp	r2, #57	@ 0x39
 80067fa:	d052      	beq.n	80068a2 <_dtoa_r+0xb12>
 80067fc:	3201      	adds	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e612      	b.n	8006428 <_dtoa_r+0x698>
 8006802:	2a00      	cmp	r2, #0
 8006804:	dd07      	ble.n	8006816 <_dtoa_r+0xa86>
 8006806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800680a:	d0ed      	beq.n	80067e8 <_dtoa_r+0xa58>
 800680c:	9a00      	ldr	r2, [sp, #0]
 800680e:	f108 0301 	add.w	r3, r8, #1
 8006812:	7013      	strb	r3, [r2, #0]
 8006814:	e608      	b.n	8006428 <_dtoa_r+0x698>
 8006816:	9b07      	ldr	r3, [sp, #28]
 8006818:	9a07      	ldr	r2, [sp, #28]
 800681a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800681e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006820:	4293      	cmp	r3, r2
 8006822:	d028      	beq.n	8006876 <_dtoa_r+0xae6>
 8006824:	4649      	mov	r1, r9
 8006826:	2300      	movs	r3, #0
 8006828:	220a      	movs	r2, #10
 800682a:	4658      	mov	r0, fp
 800682c:	f000 f9d6 	bl	8006bdc <__multadd>
 8006830:	42af      	cmp	r7, r5
 8006832:	4681      	mov	r9, r0
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	f04f 020a 	mov.w	r2, #10
 800683c:	4639      	mov	r1, r7
 800683e:	4658      	mov	r0, fp
 8006840:	d107      	bne.n	8006852 <_dtoa_r+0xac2>
 8006842:	f000 f9cb 	bl	8006bdc <__multadd>
 8006846:	4607      	mov	r7, r0
 8006848:	4605      	mov	r5, r0
 800684a:	9b07      	ldr	r3, [sp, #28]
 800684c:	3301      	adds	r3, #1
 800684e:	9307      	str	r3, [sp, #28]
 8006850:	e774      	b.n	800673c <_dtoa_r+0x9ac>
 8006852:	f000 f9c3 	bl	8006bdc <__multadd>
 8006856:	4629      	mov	r1, r5
 8006858:	4607      	mov	r7, r0
 800685a:	2300      	movs	r3, #0
 800685c:	220a      	movs	r2, #10
 800685e:	4658      	mov	r0, fp
 8006860:	f000 f9bc 	bl	8006bdc <__multadd>
 8006864:	4605      	mov	r5, r0
 8006866:	e7f0      	b.n	800684a <_dtoa_r+0xaba>
 8006868:	9b00      	ldr	r3, [sp, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	bfcc      	ite	gt
 800686e:	461e      	movgt	r6, r3
 8006870:	2601      	movle	r6, #1
 8006872:	4456      	add	r6, sl
 8006874:	2700      	movs	r7, #0
 8006876:	4649      	mov	r1, r9
 8006878:	2201      	movs	r2, #1
 800687a:	4658      	mov	r0, fp
 800687c:	f000 fb5a 	bl	8006f34 <__lshift>
 8006880:	4621      	mov	r1, r4
 8006882:	4681      	mov	r9, r0
 8006884:	f000 fbc2 	bl	800700c <__mcmp>
 8006888:	2800      	cmp	r0, #0
 800688a:	dcb0      	bgt.n	80067ee <_dtoa_r+0xa5e>
 800688c:	d102      	bne.n	8006894 <_dtoa_r+0xb04>
 800688e:	f018 0f01 	tst.w	r8, #1
 8006892:	d1ac      	bne.n	80067ee <_dtoa_r+0xa5e>
 8006894:	4633      	mov	r3, r6
 8006896:	461e      	mov	r6, r3
 8006898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800689c:	2a30      	cmp	r2, #48	@ 0x30
 800689e:	d0fa      	beq.n	8006896 <_dtoa_r+0xb06>
 80068a0:	e5c2      	b.n	8006428 <_dtoa_r+0x698>
 80068a2:	459a      	cmp	sl, r3
 80068a4:	d1a4      	bne.n	80067f0 <_dtoa_r+0xa60>
 80068a6:	9b04      	ldr	r3, [sp, #16]
 80068a8:	3301      	adds	r3, #1
 80068aa:	9304      	str	r3, [sp, #16]
 80068ac:	2331      	movs	r3, #49	@ 0x31
 80068ae:	f88a 3000 	strb.w	r3, [sl]
 80068b2:	e5b9      	b.n	8006428 <_dtoa_r+0x698>
 80068b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006914 <_dtoa_r+0xb84>
 80068ba:	b11b      	cbz	r3, 80068c4 <_dtoa_r+0xb34>
 80068bc:	f10a 0308 	add.w	r3, sl, #8
 80068c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	4650      	mov	r0, sl
 80068c6:	b019      	add	sp, #100	@ 0x64
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	f77f ae37 	ble.w	8006542 <_dtoa_r+0x7b2>
 80068d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068d8:	2001      	movs	r0, #1
 80068da:	e655      	b.n	8006588 <_dtoa_r+0x7f8>
 80068dc:	9b00      	ldr	r3, [sp, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f77f aed6 	ble.w	8006690 <_dtoa_r+0x900>
 80068e4:	4656      	mov	r6, sl
 80068e6:	4621      	mov	r1, r4
 80068e8:	4648      	mov	r0, r9
 80068ea:	f7ff f9c6 	bl	8005c7a <quorem>
 80068ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068f2:	f806 8b01 	strb.w	r8, [r6], #1
 80068f6:	9b00      	ldr	r3, [sp, #0]
 80068f8:	eba6 020a 	sub.w	r2, r6, sl
 80068fc:	4293      	cmp	r3, r2
 80068fe:	ddb3      	ble.n	8006868 <_dtoa_r+0xad8>
 8006900:	4649      	mov	r1, r9
 8006902:	2300      	movs	r3, #0
 8006904:	220a      	movs	r2, #10
 8006906:	4658      	mov	r0, fp
 8006908:	f000 f968 	bl	8006bdc <__multadd>
 800690c:	4681      	mov	r9, r0
 800690e:	e7ea      	b.n	80068e6 <_dtoa_r+0xb56>
 8006910:	08007e34 	.word	0x08007e34
 8006914:	08007db8 	.word	0x08007db8

08006918 <_free_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4605      	mov	r5, r0
 800691c:	2900      	cmp	r1, #0
 800691e:	d041      	beq.n	80069a4 <_free_r+0x8c>
 8006920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006924:	1f0c      	subs	r4, r1, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	bfb8      	it	lt
 800692a:	18e4      	addlt	r4, r4, r3
 800692c:	f000 f8e8 	bl	8006b00 <__malloc_lock>
 8006930:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <_free_r+0x90>)
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	b933      	cbnz	r3, 8006944 <_free_r+0x2c>
 8006936:	6063      	str	r3, [r4, #4]
 8006938:	6014      	str	r4, [r2, #0]
 800693a:	4628      	mov	r0, r5
 800693c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006940:	f000 b8e4 	b.w	8006b0c <__malloc_unlock>
 8006944:	42a3      	cmp	r3, r4
 8006946:	d908      	bls.n	800695a <_free_r+0x42>
 8006948:	6820      	ldr	r0, [r4, #0]
 800694a:	1821      	adds	r1, r4, r0
 800694c:	428b      	cmp	r3, r1
 800694e:	bf01      	itttt	eq
 8006950:	6819      	ldreq	r1, [r3, #0]
 8006952:	685b      	ldreq	r3, [r3, #4]
 8006954:	1809      	addeq	r1, r1, r0
 8006956:	6021      	streq	r1, [r4, #0]
 8006958:	e7ed      	b.n	8006936 <_free_r+0x1e>
 800695a:	461a      	mov	r2, r3
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	b10b      	cbz	r3, 8006964 <_free_r+0x4c>
 8006960:	42a3      	cmp	r3, r4
 8006962:	d9fa      	bls.n	800695a <_free_r+0x42>
 8006964:	6811      	ldr	r1, [r2, #0]
 8006966:	1850      	adds	r0, r2, r1
 8006968:	42a0      	cmp	r0, r4
 800696a:	d10b      	bne.n	8006984 <_free_r+0x6c>
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	4401      	add	r1, r0
 8006970:	1850      	adds	r0, r2, r1
 8006972:	4283      	cmp	r3, r0
 8006974:	6011      	str	r1, [r2, #0]
 8006976:	d1e0      	bne.n	800693a <_free_r+0x22>
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	6053      	str	r3, [r2, #4]
 800697e:	4408      	add	r0, r1
 8006980:	6010      	str	r0, [r2, #0]
 8006982:	e7da      	b.n	800693a <_free_r+0x22>
 8006984:	d902      	bls.n	800698c <_free_r+0x74>
 8006986:	230c      	movs	r3, #12
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	e7d6      	b.n	800693a <_free_r+0x22>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	1821      	adds	r1, r4, r0
 8006990:	428b      	cmp	r3, r1
 8006992:	bf04      	itt	eq
 8006994:	6819      	ldreq	r1, [r3, #0]
 8006996:	685b      	ldreq	r3, [r3, #4]
 8006998:	6063      	str	r3, [r4, #4]
 800699a:	bf04      	itt	eq
 800699c:	1809      	addeq	r1, r1, r0
 800699e:	6021      	streq	r1, [r4, #0]
 80069a0:	6054      	str	r4, [r2, #4]
 80069a2:	e7ca      	b.n	800693a <_free_r+0x22>
 80069a4:	bd38      	pop	{r3, r4, r5, pc}
 80069a6:	bf00      	nop
 80069a8:	20000454 	.word	0x20000454

080069ac <malloc>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	@ (80069b8 <malloc+0xc>)
 80069ae:	4601      	mov	r1, r0
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	f000 b825 	b.w	8006a00 <_malloc_r>
 80069b6:	bf00      	nop
 80069b8:	20000018 	.word	0x20000018

080069bc <sbrk_aligned>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	4e0f      	ldr	r6, [pc, #60]	@ (80069fc <sbrk_aligned+0x40>)
 80069c0:	460c      	mov	r4, r1
 80069c2:	6831      	ldr	r1, [r6, #0]
 80069c4:	4605      	mov	r5, r0
 80069c6:	b911      	cbnz	r1, 80069ce <sbrk_aligned+0x12>
 80069c8:	f000 fe46 	bl	8007658 <_sbrk_r>
 80069cc:	6030      	str	r0, [r6, #0]
 80069ce:	4621      	mov	r1, r4
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 fe41 	bl	8007658 <_sbrk_r>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	d103      	bne.n	80069e2 <sbrk_aligned+0x26>
 80069da:	f04f 34ff 	mov.w	r4, #4294967295
 80069de:	4620      	mov	r0, r4
 80069e0:	bd70      	pop	{r4, r5, r6, pc}
 80069e2:	1cc4      	adds	r4, r0, #3
 80069e4:	f024 0403 	bic.w	r4, r4, #3
 80069e8:	42a0      	cmp	r0, r4
 80069ea:	d0f8      	beq.n	80069de <sbrk_aligned+0x22>
 80069ec:	1a21      	subs	r1, r4, r0
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 fe32 	bl	8007658 <_sbrk_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d1f2      	bne.n	80069de <sbrk_aligned+0x22>
 80069f8:	e7ef      	b.n	80069da <sbrk_aligned+0x1e>
 80069fa:	bf00      	nop
 80069fc:	20000450 	.word	0x20000450

08006a00 <_malloc_r>:
 8006a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a04:	1ccd      	adds	r5, r1, #3
 8006a06:	f025 0503 	bic.w	r5, r5, #3
 8006a0a:	3508      	adds	r5, #8
 8006a0c:	2d0c      	cmp	r5, #12
 8006a0e:	bf38      	it	cc
 8006a10:	250c      	movcc	r5, #12
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	4606      	mov	r6, r0
 8006a16:	db01      	blt.n	8006a1c <_malloc_r+0x1c>
 8006a18:	42a9      	cmp	r1, r5
 8006a1a:	d904      	bls.n	8006a26 <_malloc_r+0x26>
 8006a1c:	230c      	movs	r3, #12
 8006a1e:	6033      	str	r3, [r6, #0]
 8006a20:	2000      	movs	r0, #0
 8006a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006afc <_malloc_r+0xfc>
 8006a2a:	f000 f869 	bl	8006b00 <__malloc_lock>
 8006a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a32:	461c      	mov	r4, r3
 8006a34:	bb44      	cbnz	r4, 8006a88 <_malloc_r+0x88>
 8006a36:	4629      	mov	r1, r5
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff ffbf 	bl	80069bc <sbrk_aligned>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	4604      	mov	r4, r0
 8006a42:	d158      	bne.n	8006af6 <_malloc_r+0xf6>
 8006a44:	f8d8 4000 	ldr.w	r4, [r8]
 8006a48:	4627      	mov	r7, r4
 8006a4a:	2f00      	cmp	r7, #0
 8006a4c:	d143      	bne.n	8006ad6 <_malloc_r+0xd6>
 8006a4e:	2c00      	cmp	r4, #0
 8006a50:	d04b      	beq.n	8006aea <_malloc_r+0xea>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	4639      	mov	r1, r7
 8006a56:	4630      	mov	r0, r6
 8006a58:	eb04 0903 	add.w	r9, r4, r3
 8006a5c:	f000 fdfc 	bl	8007658 <_sbrk_r>
 8006a60:	4581      	cmp	r9, r0
 8006a62:	d142      	bne.n	8006aea <_malloc_r+0xea>
 8006a64:	6821      	ldr	r1, [r4, #0]
 8006a66:	1a6d      	subs	r5, r5, r1
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7ff ffa6 	bl	80069bc <sbrk_aligned>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d03a      	beq.n	8006aea <_malloc_r+0xea>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	442b      	add	r3, r5
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	bb62      	cbnz	r2, 8006adc <_malloc_r+0xdc>
 8006a82:	f8c8 7000 	str.w	r7, [r8]
 8006a86:	e00f      	b.n	8006aa8 <_malloc_r+0xa8>
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	1b52      	subs	r2, r2, r5
 8006a8c:	d420      	bmi.n	8006ad0 <_malloc_r+0xd0>
 8006a8e:	2a0b      	cmp	r2, #11
 8006a90:	d917      	bls.n	8006ac2 <_malloc_r+0xc2>
 8006a92:	1961      	adds	r1, r4, r5
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	6025      	str	r5, [r4, #0]
 8006a98:	bf18      	it	ne
 8006a9a:	6059      	strne	r1, [r3, #4]
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	bf08      	it	eq
 8006aa0:	f8c8 1000 	streq.w	r1, [r8]
 8006aa4:	5162      	str	r2, [r4, r5]
 8006aa6:	604b      	str	r3, [r1, #4]
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f82f 	bl	8006b0c <__malloc_unlock>
 8006aae:	f104 000b 	add.w	r0, r4, #11
 8006ab2:	1d23      	adds	r3, r4, #4
 8006ab4:	f020 0007 	bic.w	r0, r0, #7
 8006ab8:	1ac2      	subs	r2, r0, r3
 8006aba:	bf1c      	itt	ne
 8006abc:	1a1b      	subne	r3, r3, r0
 8006abe:	50a3      	strne	r3, [r4, r2]
 8006ac0:	e7af      	b.n	8006a22 <_malloc_r+0x22>
 8006ac2:	6862      	ldr	r2, [r4, #4]
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	bf0c      	ite	eq
 8006ac8:	f8c8 2000 	streq.w	r2, [r8]
 8006acc:	605a      	strne	r2, [r3, #4]
 8006ace:	e7eb      	b.n	8006aa8 <_malloc_r+0xa8>
 8006ad0:	4623      	mov	r3, r4
 8006ad2:	6864      	ldr	r4, [r4, #4]
 8006ad4:	e7ae      	b.n	8006a34 <_malloc_r+0x34>
 8006ad6:	463c      	mov	r4, r7
 8006ad8:	687f      	ldr	r7, [r7, #4]
 8006ada:	e7b6      	b.n	8006a4a <_malloc_r+0x4a>
 8006adc:	461a      	mov	r2, r3
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d1fb      	bne.n	8006adc <_malloc_r+0xdc>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	6053      	str	r3, [r2, #4]
 8006ae8:	e7de      	b.n	8006aa8 <_malloc_r+0xa8>
 8006aea:	230c      	movs	r3, #12
 8006aec:	6033      	str	r3, [r6, #0]
 8006aee:	4630      	mov	r0, r6
 8006af0:	f000 f80c 	bl	8006b0c <__malloc_unlock>
 8006af4:	e794      	b.n	8006a20 <_malloc_r+0x20>
 8006af6:	6005      	str	r5, [r0, #0]
 8006af8:	e7d6      	b.n	8006aa8 <_malloc_r+0xa8>
 8006afa:	bf00      	nop
 8006afc:	20000454 	.word	0x20000454

08006b00 <__malloc_lock>:
 8006b00:	4801      	ldr	r0, [pc, #4]	@ (8006b08 <__malloc_lock+0x8>)
 8006b02:	f7ff b8b8 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 8006b06:	bf00      	nop
 8006b08:	2000044c 	.word	0x2000044c

08006b0c <__malloc_unlock>:
 8006b0c:	4801      	ldr	r0, [pc, #4]	@ (8006b14 <__malloc_unlock+0x8>)
 8006b0e:	f7ff b8b3 	b.w	8005c78 <__retarget_lock_release_recursive>
 8006b12:	bf00      	nop
 8006b14:	2000044c 	.word	0x2000044c

08006b18 <_Balloc>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	69c6      	ldr	r6, [r0, #28]
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	460d      	mov	r5, r1
 8006b20:	b976      	cbnz	r6, 8006b40 <_Balloc+0x28>
 8006b22:	2010      	movs	r0, #16
 8006b24:	f7ff ff42 	bl	80069ac <malloc>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	61e0      	str	r0, [r4, #28]
 8006b2c:	b920      	cbnz	r0, 8006b38 <_Balloc+0x20>
 8006b2e:	4b18      	ldr	r3, [pc, #96]	@ (8006b90 <_Balloc+0x78>)
 8006b30:	4818      	ldr	r0, [pc, #96]	@ (8006b94 <_Balloc+0x7c>)
 8006b32:	216b      	movs	r1, #107	@ 0x6b
 8006b34:	f000 fdae 	bl	8007694 <__assert_func>
 8006b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b3c:	6006      	str	r6, [r0, #0]
 8006b3e:	60c6      	str	r6, [r0, #12]
 8006b40:	69e6      	ldr	r6, [r4, #28]
 8006b42:	68f3      	ldr	r3, [r6, #12]
 8006b44:	b183      	cbz	r3, 8006b68 <_Balloc+0x50>
 8006b46:	69e3      	ldr	r3, [r4, #28]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b4e:	b9b8      	cbnz	r0, 8006b80 <_Balloc+0x68>
 8006b50:	2101      	movs	r1, #1
 8006b52:	fa01 f605 	lsl.w	r6, r1, r5
 8006b56:	1d72      	adds	r2, r6, #5
 8006b58:	0092      	lsls	r2, r2, #2
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 fdb8 	bl	80076d0 <_calloc_r>
 8006b60:	b160      	cbz	r0, 8006b7c <_Balloc+0x64>
 8006b62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b66:	e00e      	b.n	8006b86 <_Balloc+0x6e>
 8006b68:	2221      	movs	r2, #33	@ 0x21
 8006b6a:	2104      	movs	r1, #4
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fdaf 	bl	80076d0 <_calloc_r>
 8006b72:	69e3      	ldr	r3, [r4, #28]
 8006b74:	60f0      	str	r0, [r6, #12]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e4      	bne.n	8006b46 <_Balloc+0x2e>
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	6802      	ldr	r2, [r0, #0]
 8006b82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b86:	2300      	movs	r3, #0
 8006b88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b8c:	e7f7      	b.n	8006b7e <_Balloc+0x66>
 8006b8e:	bf00      	nop
 8006b90:	08007dc5 	.word	0x08007dc5
 8006b94:	08007e45 	.word	0x08007e45

08006b98 <_Bfree>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	69c6      	ldr	r6, [r0, #28]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	b976      	cbnz	r6, 8006bc0 <_Bfree+0x28>
 8006ba2:	2010      	movs	r0, #16
 8006ba4:	f7ff ff02 	bl	80069ac <malloc>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	61e8      	str	r0, [r5, #28]
 8006bac:	b920      	cbnz	r0, 8006bb8 <_Bfree+0x20>
 8006bae:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <_Bfree+0x3c>)
 8006bb0:	4809      	ldr	r0, [pc, #36]	@ (8006bd8 <_Bfree+0x40>)
 8006bb2:	218f      	movs	r1, #143	@ 0x8f
 8006bb4:	f000 fd6e 	bl	8007694 <__assert_func>
 8006bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bbc:	6006      	str	r6, [r0, #0]
 8006bbe:	60c6      	str	r6, [r0, #12]
 8006bc0:	b13c      	cbz	r4, 8006bd2 <_Bfree+0x3a>
 8006bc2:	69eb      	ldr	r3, [r5, #28]
 8006bc4:	6862      	ldr	r2, [r4, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bcc:	6021      	str	r1, [r4, #0]
 8006bce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bd2:	bd70      	pop	{r4, r5, r6, pc}
 8006bd4:	08007dc5 	.word	0x08007dc5
 8006bd8:	08007e45 	.word	0x08007e45

08006bdc <__multadd>:
 8006bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	690d      	ldr	r5, [r1, #16]
 8006be2:	4607      	mov	r7, r0
 8006be4:	460c      	mov	r4, r1
 8006be6:	461e      	mov	r6, r3
 8006be8:	f101 0c14 	add.w	ip, r1, #20
 8006bec:	2000      	movs	r0, #0
 8006bee:	f8dc 3000 	ldr.w	r3, [ip]
 8006bf2:	b299      	uxth	r1, r3
 8006bf4:	fb02 6101 	mla	r1, r2, r1, r6
 8006bf8:	0c1e      	lsrs	r6, r3, #16
 8006bfa:	0c0b      	lsrs	r3, r1, #16
 8006bfc:	fb02 3306 	mla	r3, r2, r6, r3
 8006c00:	b289      	uxth	r1, r1
 8006c02:	3001      	adds	r0, #1
 8006c04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c08:	4285      	cmp	r5, r0
 8006c0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c12:	dcec      	bgt.n	8006bee <__multadd+0x12>
 8006c14:	b30e      	cbz	r6, 8006c5a <__multadd+0x7e>
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	42ab      	cmp	r3, r5
 8006c1a:	dc19      	bgt.n	8006c50 <__multadd+0x74>
 8006c1c:	6861      	ldr	r1, [r4, #4]
 8006c1e:	4638      	mov	r0, r7
 8006c20:	3101      	adds	r1, #1
 8006c22:	f7ff ff79 	bl	8006b18 <_Balloc>
 8006c26:	4680      	mov	r8, r0
 8006c28:	b928      	cbnz	r0, 8006c36 <__multadd+0x5a>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <__multadd+0x84>)
 8006c2e:	480d      	ldr	r0, [pc, #52]	@ (8006c64 <__multadd+0x88>)
 8006c30:	21ba      	movs	r1, #186	@ 0xba
 8006c32:	f000 fd2f 	bl	8007694 <__assert_func>
 8006c36:	6922      	ldr	r2, [r4, #16]
 8006c38:	3202      	adds	r2, #2
 8006c3a:	f104 010c 	add.w	r1, r4, #12
 8006c3e:	0092      	lsls	r2, r2, #2
 8006c40:	300c      	adds	r0, #12
 8006c42:	f000 fd19 	bl	8007678 <memcpy>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f7ff ffa5 	bl	8006b98 <_Bfree>
 8006c4e:	4644      	mov	r4, r8
 8006c50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c54:	3501      	adds	r5, #1
 8006c56:	615e      	str	r6, [r3, #20]
 8006c58:	6125      	str	r5, [r4, #16]
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c60:	08007e34 	.word	0x08007e34
 8006c64:	08007e45 	.word	0x08007e45

08006c68 <__hi0bits>:
 8006c68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	bf36      	itet	cc
 8006c70:	0403      	lslcc	r3, r0, #16
 8006c72:	2000      	movcs	r0, #0
 8006c74:	2010      	movcc	r0, #16
 8006c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c7a:	bf3c      	itt	cc
 8006c7c:	021b      	lslcc	r3, r3, #8
 8006c7e:	3008      	addcc	r0, #8
 8006c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c84:	bf3c      	itt	cc
 8006c86:	011b      	lslcc	r3, r3, #4
 8006c88:	3004      	addcc	r0, #4
 8006c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c8e:	bf3c      	itt	cc
 8006c90:	009b      	lslcc	r3, r3, #2
 8006c92:	3002      	addcc	r0, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	db05      	blt.n	8006ca4 <__hi0bits+0x3c>
 8006c98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c9c:	f100 0001 	add.w	r0, r0, #1
 8006ca0:	bf08      	it	eq
 8006ca2:	2020      	moveq	r0, #32
 8006ca4:	4770      	bx	lr

08006ca6 <__lo0bits>:
 8006ca6:	6803      	ldr	r3, [r0, #0]
 8006ca8:	4602      	mov	r2, r0
 8006caa:	f013 0007 	ands.w	r0, r3, #7
 8006cae:	d00b      	beq.n	8006cc8 <__lo0bits+0x22>
 8006cb0:	07d9      	lsls	r1, r3, #31
 8006cb2:	d421      	bmi.n	8006cf8 <__lo0bits+0x52>
 8006cb4:	0798      	lsls	r0, r3, #30
 8006cb6:	bf49      	itett	mi
 8006cb8:	085b      	lsrmi	r3, r3, #1
 8006cba:	089b      	lsrpl	r3, r3, #2
 8006cbc:	2001      	movmi	r0, #1
 8006cbe:	6013      	strmi	r3, [r2, #0]
 8006cc0:	bf5c      	itt	pl
 8006cc2:	6013      	strpl	r3, [r2, #0]
 8006cc4:	2002      	movpl	r0, #2
 8006cc6:	4770      	bx	lr
 8006cc8:	b299      	uxth	r1, r3
 8006cca:	b909      	cbnz	r1, 8006cd0 <__lo0bits+0x2a>
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	2010      	movs	r0, #16
 8006cd0:	b2d9      	uxtb	r1, r3
 8006cd2:	b909      	cbnz	r1, 8006cd8 <__lo0bits+0x32>
 8006cd4:	3008      	adds	r0, #8
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	0719      	lsls	r1, r3, #28
 8006cda:	bf04      	itt	eq
 8006cdc:	091b      	lsreq	r3, r3, #4
 8006cde:	3004      	addeq	r0, #4
 8006ce0:	0799      	lsls	r1, r3, #30
 8006ce2:	bf04      	itt	eq
 8006ce4:	089b      	lsreq	r3, r3, #2
 8006ce6:	3002      	addeq	r0, #2
 8006ce8:	07d9      	lsls	r1, r3, #31
 8006cea:	d403      	bmi.n	8006cf4 <__lo0bits+0x4e>
 8006cec:	085b      	lsrs	r3, r3, #1
 8006cee:	f100 0001 	add.w	r0, r0, #1
 8006cf2:	d003      	beq.n	8006cfc <__lo0bits+0x56>
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	4770      	bx	lr
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	4770      	bx	lr
 8006cfc:	2020      	movs	r0, #32
 8006cfe:	4770      	bx	lr

08006d00 <__i2b>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	460c      	mov	r4, r1
 8006d04:	2101      	movs	r1, #1
 8006d06:	f7ff ff07 	bl	8006b18 <_Balloc>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	b928      	cbnz	r0, 8006d1a <__i2b+0x1a>
 8006d0e:	4b05      	ldr	r3, [pc, #20]	@ (8006d24 <__i2b+0x24>)
 8006d10:	4805      	ldr	r0, [pc, #20]	@ (8006d28 <__i2b+0x28>)
 8006d12:	f240 1145 	movw	r1, #325	@ 0x145
 8006d16:	f000 fcbd 	bl	8007694 <__assert_func>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	6144      	str	r4, [r0, #20]
 8006d1e:	6103      	str	r3, [r0, #16]
 8006d20:	bd10      	pop	{r4, pc}
 8006d22:	bf00      	nop
 8006d24:	08007e34 	.word	0x08007e34
 8006d28:	08007e45 	.word	0x08007e45

08006d2c <__multiply>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	4614      	mov	r4, r2
 8006d32:	690a      	ldr	r2, [r1, #16]
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	bfa8      	it	ge
 8006d3a:	4623      	movge	r3, r4
 8006d3c:	460f      	mov	r7, r1
 8006d3e:	bfa4      	itt	ge
 8006d40:	460c      	movge	r4, r1
 8006d42:	461f      	movge	r7, r3
 8006d44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006d4c:	68a3      	ldr	r3, [r4, #8]
 8006d4e:	6861      	ldr	r1, [r4, #4]
 8006d50:	eb0a 0609 	add.w	r6, sl, r9
 8006d54:	42b3      	cmp	r3, r6
 8006d56:	b085      	sub	sp, #20
 8006d58:	bfb8      	it	lt
 8006d5a:	3101      	addlt	r1, #1
 8006d5c:	f7ff fedc 	bl	8006b18 <_Balloc>
 8006d60:	b930      	cbnz	r0, 8006d70 <__multiply+0x44>
 8006d62:	4602      	mov	r2, r0
 8006d64:	4b44      	ldr	r3, [pc, #272]	@ (8006e78 <__multiply+0x14c>)
 8006d66:	4845      	ldr	r0, [pc, #276]	@ (8006e7c <__multiply+0x150>)
 8006d68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d6c:	f000 fc92 	bl	8007694 <__assert_func>
 8006d70:	f100 0514 	add.w	r5, r0, #20
 8006d74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d78:	462b      	mov	r3, r5
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4543      	cmp	r3, r8
 8006d7e:	d321      	bcc.n	8006dc4 <__multiply+0x98>
 8006d80:	f107 0114 	add.w	r1, r7, #20
 8006d84:	f104 0214 	add.w	r2, r4, #20
 8006d88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006d8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	1b13      	subs	r3, r2, r4
 8006d94:	3b15      	subs	r3, #21
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	f104 0715 	add.w	r7, r4, #21
 8006da0:	42ba      	cmp	r2, r7
 8006da2:	bf38      	it	cc
 8006da4:	2304      	movcc	r3, #4
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	9b02      	ldr	r3, [sp, #8]
 8006daa:	9103      	str	r1, [sp, #12]
 8006dac:	428b      	cmp	r3, r1
 8006dae:	d80c      	bhi.n	8006dca <__multiply+0x9e>
 8006db0:	2e00      	cmp	r6, #0
 8006db2:	dd03      	ble.n	8006dbc <__multiply+0x90>
 8006db4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d05b      	beq.n	8006e74 <__multiply+0x148>
 8006dbc:	6106      	str	r6, [r0, #16]
 8006dbe:	b005      	add	sp, #20
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	f843 2b04 	str.w	r2, [r3], #4
 8006dc8:	e7d8      	b.n	8006d7c <__multiply+0x50>
 8006dca:	f8b1 a000 	ldrh.w	sl, [r1]
 8006dce:	f1ba 0f00 	cmp.w	sl, #0
 8006dd2:	d024      	beq.n	8006e1e <__multiply+0xf2>
 8006dd4:	f104 0e14 	add.w	lr, r4, #20
 8006dd8:	46a9      	mov	r9, r5
 8006dda:	f04f 0c00 	mov.w	ip, #0
 8006dde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006de2:	f8d9 3000 	ldr.w	r3, [r9]
 8006de6:	fa1f fb87 	uxth.w	fp, r7
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	fb0a 330b 	mla	r3, sl, fp, r3
 8006df0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006df4:	f8d9 7000 	ldr.w	r7, [r9]
 8006df8:	4463      	add	r3, ip
 8006dfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006dfe:	fb0a c70b 	mla	r7, sl, fp, ip
 8006e02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e0c:	4572      	cmp	r2, lr
 8006e0e:	f849 3b04 	str.w	r3, [r9], #4
 8006e12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e16:	d8e2      	bhi.n	8006dde <__multiply+0xb2>
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	f845 c003 	str.w	ip, [r5, r3]
 8006e1e:	9b03      	ldr	r3, [sp, #12]
 8006e20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e24:	3104      	adds	r1, #4
 8006e26:	f1b9 0f00 	cmp.w	r9, #0
 8006e2a:	d021      	beq.n	8006e70 <__multiply+0x144>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	f104 0c14 	add.w	ip, r4, #20
 8006e32:	46ae      	mov	lr, r5
 8006e34:	f04f 0a00 	mov.w	sl, #0
 8006e38:	f8bc b000 	ldrh.w	fp, [ip]
 8006e3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e40:	fb09 770b 	mla	r7, r9, fp, r7
 8006e44:	4457      	add	r7, sl
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e4c:	f84e 3b04 	str.w	r3, [lr], #4
 8006e50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e58:	f8be 3000 	ldrh.w	r3, [lr]
 8006e5c:	fb09 330a 	mla	r3, r9, sl, r3
 8006e60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006e64:	4562      	cmp	r2, ip
 8006e66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e6a:	d8e5      	bhi.n	8006e38 <__multiply+0x10c>
 8006e6c:	9f01      	ldr	r7, [sp, #4]
 8006e6e:	51eb      	str	r3, [r5, r7]
 8006e70:	3504      	adds	r5, #4
 8006e72:	e799      	b.n	8006da8 <__multiply+0x7c>
 8006e74:	3e01      	subs	r6, #1
 8006e76:	e79b      	b.n	8006db0 <__multiply+0x84>
 8006e78:	08007e34 	.word	0x08007e34
 8006e7c:	08007e45 	.word	0x08007e45

08006e80 <__pow5mult>:
 8006e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e84:	4615      	mov	r5, r2
 8006e86:	f012 0203 	ands.w	r2, r2, #3
 8006e8a:	4607      	mov	r7, r0
 8006e8c:	460e      	mov	r6, r1
 8006e8e:	d007      	beq.n	8006ea0 <__pow5mult+0x20>
 8006e90:	4c25      	ldr	r4, [pc, #148]	@ (8006f28 <__pow5mult+0xa8>)
 8006e92:	3a01      	subs	r2, #1
 8006e94:	2300      	movs	r3, #0
 8006e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e9a:	f7ff fe9f 	bl	8006bdc <__multadd>
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	10ad      	asrs	r5, r5, #2
 8006ea2:	d03d      	beq.n	8006f20 <__pow5mult+0xa0>
 8006ea4:	69fc      	ldr	r4, [r7, #28]
 8006ea6:	b97c      	cbnz	r4, 8006ec8 <__pow5mult+0x48>
 8006ea8:	2010      	movs	r0, #16
 8006eaa:	f7ff fd7f 	bl	80069ac <malloc>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	61f8      	str	r0, [r7, #28]
 8006eb2:	b928      	cbnz	r0, 8006ec0 <__pow5mult+0x40>
 8006eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f2c <__pow5mult+0xac>)
 8006eb6:	481e      	ldr	r0, [pc, #120]	@ (8006f30 <__pow5mult+0xb0>)
 8006eb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ebc:	f000 fbea 	bl	8007694 <__assert_func>
 8006ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ec4:	6004      	str	r4, [r0, #0]
 8006ec6:	60c4      	str	r4, [r0, #12]
 8006ec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ed0:	b94c      	cbnz	r4, 8006ee6 <__pow5mult+0x66>
 8006ed2:	f240 2171 	movw	r1, #625	@ 0x271
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	f7ff ff12 	bl	8006d00 <__i2b>
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	6003      	str	r3, [r0, #0]
 8006ee6:	f04f 0900 	mov.w	r9, #0
 8006eea:	07eb      	lsls	r3, r5, #31
 8006eec:	d50a      	bpl.n	8006f04 <__pow5mult+0x84>
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	f7ff ff1a 	bl	8006d2c <__multiply>
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4680      	mov	r8, r0
 8006efc:	4638      	mov	r0, r7
 8006efe:	f7ff fe4b 	bl	8006b98 <_Bfree>
 8006f02:	4646      	mov	r6, r8
 8006f04:	106d      	asrs	r5, r5, #1
 8006f06:	d00b      	beq.n	8006f20 <__pow5mult+0xa0>
 8006f08:	6820      	ldr	r0, [r4, #0]
 8006f0a:	b938      	cbnz	r0, 8006f1c <__pow5mult+0x9c>
 8006f0c:	4622      	mov	r2, r4
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff ff0b 	bl	8006d2c <__multiply>
 8006f16:	6020      	str	r0, [r4, #0]
 8006f18:	f8c0 9000 	str.w	r9, [r0]
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	e7e4      	b.n	8006eea <__pow5mult+0x6a>
 8006f20:	4630      	mov	r0, r6
 8006f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f26:	bf00      	nop
 8006f28:	08007ea0 	.word	0x08007ea0
 8006f2c:	08007dc5 	.word	0x08007dc5
 8006f30:	08007e45 	.word	0x08007e45

08006f34 <__lshift>:
 8006f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	460c      	mov	r4, r1
 8006f3a:	6849      	ldr	r1, [r1, #4]
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f42:	68a3      	ldr	r3, [r4, #8]
 8006f44:	4607      	mov	r7, r0
 8006f46:	4691      	mov	r9, r2
 8006f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f4c:	f108 0601 	add.w	r6, r8, #1
 8006f50:	42b3      	cmp	r3, r6
 8006f52:	db0b      	blt.n	8006f6c <__lshift+0x38>
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7ff fddf 	bl	8006b18 <_Balloc>
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	b948      	cbnz	r0, 8006f72 <__lshift+0x3e>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	4b28      	ldr	r3, [pc, #160]	@ (8007004 <__lshift+0xd0>)
 8006f62:	4829      	ldr	r0, [pc, #164]	@ (8007008 <__lshift+0xd4>)
 8006f64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f68:	f000 fb94 	bl	8007694 <__assert_func>
 8006f6c:	3101      	adds	r1, #1
 8006f6e:	005b      	lsls	r3, r3, #1
 8006f70:	e7ee      	b.n	8006f50 <__lshift+0x1c>
 8006f72:	2300      	movs	r3, #0
 8006f74:	f100 0114 	add.w	r1, r0, #20
 8006f78:	f100 0210 	add.w	r2, r0, #16
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	4553      	cmp	r3, sl
 8006f80:	db33      	blt.n	8006fea <__lshift+0xb6>
 8006f82:	6920      	ldr	r0, [r4, #16]
 8006f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f88:	f104 0314 	add.w	r3, r4, #20
 8006f8c:	f019 091f 	ands.w	r9, r9, #31
 8006f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f98:	d02b      	beq.n	8006ff2 <__lshift+0xbe>
 8006f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8006f9e:	468a      	mov	sl, r1
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8006fa8:	4310      	orrs	r0, r2
 8006faa:	f84a 0b04 	str.w	r0, [sl], #4
 8006fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb2:	459c      	cmp	ip, r3
 8006fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fb8:	d8f3      	bhi.n	8006fa2 <__lshift+0x6e>
 8006fba:	ebac 0304 	sub.w	r3, ip, r4
 8006fbe:	3b15      	subs	r3, #21
 8006fc0:	f023 0303 	bic.w	r3, r3, #3
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	f104 0015 	add.w	r0, r4, #21
 8006fca:	4584      	cmp	ip, r0
 8006fcc:	bf38      	it	cc
 8006fce:	2304      	movcc	r3, #4
 8006fd0:	50ca      	str	r2, [r1, r3]
 8006fd2:	b10a      	cbz	r2, 8006fd8 <__lshift+0xa4>
 8006fd4:	f108 0602 	add.w	r6, r8, #2
 8006fd8:	3e01      	subs	r6, #1
 8006fda:	4638      	mov	r0, r7
 8006fdc:	612e      	str	r6, [r5, #16]
 8006fde:	4621      	mov	r1, r4
 8006fe0:	f7ff fdda 	bl	8006b98 <_Bfree>
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fee:	3301      	adds	r3, #1
 8006ff0:	e7c5      	b.n	8006f7e <__lshift+0x4a>
 8006ff2:	3904      	subs	r1, #4
 8006ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ffc:	459c      	cmp	ip, r3
 8006ffe:	d8f9      	bhi.n	8006ff4 <__lshift+0xc0>
 8007000:	e7ea      	b.n	8006fd8 <__lshift+0xa4>
 8007002:	bf00      	nop
 8007004:	08007e34 	.word	0x08007e34
 8007008:	08007e45 	.word	0x08007e45

0800700c <__mcmp>:
 800700c:	690a      	ldr	r2, [r1, #16]
 800700e:	4603      	mov	r3, r0
 8007010:	6900      	ldr	r0, [r0, #16]
 8007012:	1a80      	subs	r0, r0, r2
 8007014:	b530      	push	{r4, r5, lr}
 8007016:	d10e      	bne.n	8007036 <__mcmp+0x2a>
 8007018:	3314      	adds	r3, #20
 800701a:	3114      	adds	r1, #20
 800701c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800702c:	4295      	cmp	r5, r2
 800702e:	d003      	beq.n	8007038 <__mcmp+0x2c>
 8007030:	d205      	bcs.n	800703e <__mcmp+0x32>
 8007032:	f04f 30ff 	mov.w	r0, #4294967295
 8007036:	bd30      	pop	{r4, r5, pc}
 8007038:	42a3      	cmp	r3, r4
 800703a:	d3f3      	bcc.n	8007024 <__mcmp+0x18>
 800703c:	e7fb      	b.n	8007036 <__mcmp+0x2a>
 800703e:	2001      	movs	r0, #1
 8007040:	e7f9      	b.n	8007036 <__mcmp+0x2a>
	...

08007044 <__mdiff>:
 8007044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	4689      	mov	r9, r1
 800704a:	4606      	mov	r6, r0
 800704c:	4611      	mov	r1, r2
 800704e:	4648      	mov	r0, r9
 8007050:	4614      	mov	r4, r2
 8007052:	f7ff ffdb 	bl	800700c <__mcmp>
 8007056:	1e05      	subs	r5, r0, #0
 8007058:	d112      	bne.n	8007080 <__mdiff+0x3c>
 800705a:	4629      	mov	r1, r5
 800705c:	4630      	mov	r0, r6
 800705e:	f7ff fd5b 	bl	8006b18 <_Balloc>
 8007062:	4602      	mov	r2, r0
 8007064:	b928      	cbnz	r0, 8007072 <__mdiff+0x2e>
 8007066:	4b3f      	ldr	r3, [pc, #252]	@ (8007164 <__mdiff+0x120>)
 8007068:	f240 2137 	movw	r1, #567	@ 0x237
 800706c:	483e      	ldr	r0, [pc, #248]	@ (8007168 <__mdiff+0x124>)
 800706e:	f000 fb11 	bl	8007694 <__assert_func>
 8007072:	2301      	movs	r3, #1
 8007074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007078:	4610      	mov	r0, r2
 800707a:	b003      	add	sp, #12
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007080:	bfbc      	itt	lt
 8007082:	464b      	movlt	r3, r9
 8007084:	46a1      	movlt	r9, r4
 8007086:	4630      	mov	r0, r6
 8007088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800708c:	bfba      	itte	lt
 800708e:	461c      	movlt	r4, r3
 8007090:	2501      	movlt	r5, #1
 8007092:	2500      	movge	r5, #0
 8007094:	f7ff fd40 	bl	8006b18 <_Balloc>
 8007098:	4602      	mov	r2, r0
 800709a:	b918      	cbnz	r0, 80070a4 <__mdiff+0x60>
 800709c:	4b31      	ldr	r3, [pc, #196]	@ (8007164 <__mdiff+0x120>)
 800709e:	f240 2145 	movw	r1, #581	@ 0x245
 80070a2:	e7e3      	b.n	800706c <__mdiff+0x28>
 80070a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070a8:	6926      	ldr	r6, [r4, #16]
 80070aa:	60c5      	str	r5, [r0, #12]
 80070ac:	f109 0310 	add.w	r3, r9, #16
 80070b0:	f109 0514 	add.w	r5, r9, #20
 80070b4:	f104 0e14 	add.w	lr, r4, #20
 80070b8:	f100 0b14 	add.w	fp, r0, #20
 80070bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	46d9      	mov	r9, fp
 80070c8:	f04f 0c00 	mov.w	ip, #0
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80070d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	fa1f f38a 	uxth.w	r3, sl
 80070dc:	4619      	mov	r1, r3
 80070de:	b283      	uxth	r3, r0
 80070e0:	1acb      	subs	r3, r1, r3
 80070e2:	0c00      	lsrs	r0, r0, #16
 80070e4:	4463      	add	r3, ip
 80070e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80070ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80070f4:	4576      	cmp	r6, lr
 80070f6:	f849 3b04 	str.w	r3, [r9], #4
 80070fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070fe:	d8e5      	bhi.n	80070cc <__mdiff+0x88>
 8007100:	1b33      	subs	r3, r6, r4
 8007102:	3b15      	subs	r3, #21
 8007104:	f023 0303 	bic.w	r3, r3, #3
 8007108:	3415      	adds	r4, #21
 800710a:	3304      	adds	r3, #4
 800710c:	42a6      	cmp	r6, r4
 800710e:	bf38      	it	cc
 8007110:	2304      	movcc	r3, #4
 8007112:	441d      	add	r5, r3
 8007114:	445b      	add	r3, fp
 8007116:	461e      	mov	r6, r3
 8007118:	462c      	mov	r4, r5
 800711a:	4544      	cmp	r4, r8
 800711c:	d30e      	bcc.n	800713c <__mdiff+0xf8>
 800711e:	f108 0103 	add.w	r1, r8, #3
 8007122:	1b49      	subs	r1, r1, r5
 8007124:	f021 0103 	bic.w	r1, r1, #3
 8007128:	3d03      	subs	r5, #3
 800712a:	45a8      	cmp	r8, r5
 800712c:	bf38      	it	cc
 800712e:	2100      	movcc	r1, #0
 8007130:	440b      	add	r3, r1
 8007132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007136:	b191      	cbz	r1, 800715e <__mdiff+0x11a>
 8007138:	6117      	str	r7, [r2, #16]
 800713a:	e79d      	b.n	8007078 <__mdiff+0x34>
 800713c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007140:	46e6      	mov	lr, ip
 8007142:	0c08      	lsrs	r0, r1, #16
 8007144:	fa1c fc81 	uxtah	ip, ip, r1
 8007148:	4471      	add	r1, lr
 800714a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800714e:	b289      	uxth	r1, r1
 8007150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007154:	f846 1b04 	str.w	r1, [r6], #4
 8007158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800715c:	e7dd      	b.n	800711a <__mdiff+0xd6>
 800715e:	3f01      	subs	r7, #1
 8007160:	e7e7      	b.n	8007132 <__mdiff+0xee>
 8007162:	bf00      	nop
 8007164:	08007e34 	.word	0x08007e34
 8007168:	08007e45 	.word	0x08007e45

0800716c <__d2b>:
 800716c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007170:	460f      	mov	r7, r1
 8007172:	2101      	movs	r1, #1
 8007174:	ec59 8b10 	vmov	r8, r9, d0
 8007178:	4616      	mov	r6, r2
 800717a:	f7ff fccd 	bl	8006b18 <_Balloc>
 800717e:	4604      	mov	r4, r0
 8007180:	b930      	cbnz	r0, 8007190 <__d2b+0x24>
 8007182:	4602      	mov	r2, r0
 8007184:	4b23      	ldr	r3, [pc, #140]	@ (8007214 <__d2b+0xa8>)
 8007186:	4824      	ldr	r0, [pc, #144]	@ (8007218 <__d2b+0xac>)
 8007188:	f240 310f 	movw	r1, #783	@ 0x30f
 800718c:	f000 fa82 	bl	8007694 <__assert_func>
 8007190:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007198:	b10d      	cbz	r5, 800719e <__d2b+0x32>
 800719a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	f1b8 0300 	subs.w	r3, r8, #0
 80071a4:	d023      	beq.n	80071ee <__d2b+0x82>
 80071a6:	4668      	mov	r0, sp
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	f7ff fd7c 	bl	8006ca6 <__lo0bits>
 80071ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071b2:	b1d0      	cbz	r0, 80071ea <__d2b+0x7e>
 80071b4:	f1c0 0320 	rsb	r3, r0, #32
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	430b      	orrs	r3, r1
 80071be:	40c2      	lsrs	r2, r0
 80071c0:	6163      	str	r3, [r4, #20]
 80071c2:	9201      	str	r2, [sp, #4]
 80071c4:	9b01      	ldr	r3, [sp, #4]
 80071c6:	61a3      	str	r3, [r4, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bf0c      	ite	eq
 80071cc:	2201      	moveq	r2, #1
 80071ce:	2202      	movne	r2, #2
 80071d0:	6122      	str	r2, [r4, #16]
 80071d2:	b1a5      	cbz	r5, 80071fe <__d2b+0x92>
 80071d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80071d8:	4405      	add	r5, r0
 80071da:	603d      	str	r5, [r7, #0]
 80071dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80071e0:	6030      	str	r0, [r6, #0]
 80071e2:	4620      	mov	r0, r4
 80071e4:	b003      	add	sp, #12
 80071e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ea:	6161      	str	r1, [r4, #20]
 80071ec:	e7ea      	b.n	80071c4 <__d2b+0x58>
 80071ee:	a801      	add	r0, sp, #4
 80071f0:	f7ff fd59 	bl	8006ca6 <__lo0bits>
 80071f4:	9b01      	ldr	r3, [sp, #4]
 80071f6:	6163      	str	r3, [r4, #20]
 80071f8:	3020      	adds	r0, #32
 80071fa:	2201      	movs	r2, #1
 80071fc:	e7e8      	b.n	80071d0 <__d2b+0x64>
 80071fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007202:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007206:	6038      	str	r0, [r7, #0]
 8007208:	6918      	ldr	r0, [r3, #16]
 800720a:	f7ff fd2d 	bl	8006c68 <__hi0bits>
 800720e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007212:	e7e5      	b.n	80071e0 <__d2b+0x74>
 8007214:	08007e34 	.word	0x08007e34
 8007218:	08007e45 	.word	0x08007e45

0800721c <__ssputs_r>:
 800721c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007220:	688e      	ldr	r6, [r1, #8]
 8007222:	461f      	mov	r7, r3
 8007224:	42be      	cmp	r6, r7
 8007226:	680b      	ldr	r3, [r1, #0]
 8007228:	4682      	mov	sl, r0
 800722a:	460c      	mov	r4, r1
 800722c:	4690      	mov	r8, r2
 800722e:	d82d      	bhi.n	800728c <__ssputs_r+0x70>
 8007230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007238:	d026      	beq.n	8007288 <__ssputs_r+0x6c>
 800723a:	6965      	ldr	r5, [r4, #20]
 800723c:	6909      	ldr	r1, [r1, #16]
 800723e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007242:	eba3 0901 	sub.w	r9, r3, r1
 8007246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800724a:	1c7b      	adds	r3, r7, #1
 800724c:	444b      	add	r3, r9
 800724e:	106d      	asrs	r5, r5, #1
 8007250:	429d      	cmp	r5, r3
 8007252:	bf38      	it	cc
 8007254:	461d      	movcc	r5, r3
 8007256:	0553      	lsls	r3, r2, #21
 8007258:	d527      	bpl.n	80072aa <__ssputs_r+0x8e>
 800725a:	4629      	mov	r1, r5
 800725c:	f7ff fbd0 	bl	8006a00 <_malloc_r>
 8007260:	4606      	mov	r6, r0
 8007262:	b360      	cbz	r0, 80072be <__ssputs_r+0xa2>
 8007264:	6921      	ldr	r1, [r4, #16]
 8007266:	464a      	mov	r2, r9
 8007268:	f000 fa06 	bl	8007678 <memcpy>
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007276:	81a3      	strh	r3, [r4, #12]
 8007278:	6126      	str	r6, [r4, #16]
 800727a:	6165      	str	r5, [r4, #20]
 800727c:	444e      	add	r6, r9
 800727e:	eba5 0509 	sub.w	r5, r5, r9
 8007282:	6026      	str	r6, [r4, #0]
 8007284:	60a5      	str	r5, [r4, #8]
 8007286:	463e      	mov	r6, r7
 8007288:	42be      	cmp	r6, r7
 800728a:	d900      	bls.n	800728e <__ssputs_r+0x72>
 800728c:	463e      	mov	r6, r7
 800728e:	6820      	ldr	r0, [r4, #0]
 8007290:	4632      	mov	r2, r6
 8007292:	4641      	mov	r1, r8
 8007294:	f000 f9c6 	bl	8007624 <memmove>
 8007298:	68a3      	ldr	r3, [r4, #8]
 800729a:	1b9b      	subs	r3, r3, r6
 800729c:	60a3      	str	r3, [r4, #8]
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	4433      	add	r3, r6
 80072a2:	6023      	str	r3, [r4, #0]
 80072a4:	2000      	movs	r0, #0
 80072a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072aa:	462a      	mov	r2, r5
 80072ac:	f000 fa36 	bl	800771c <_realloc_r>
 80072b0:	4606      	mov	r6, r0
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d1e0      	bne.n	8007278 <__ssputs_r+0x5c>
 80072b6:	6921      	ldr	r1, [r4, #16]
 80072b8:	4650      	mov	r0, sl
 80072ba:	f7ff fb2d 	bl	8006918 <_free_r>
 80072be:	230c      	movs	r3, #12
 80072c0:	f8ca 3000 	str.w	r3, [sl]
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ca:	81a3      	strh	r3, [r4, #12]
 80072cc:	f04f 30ff 	mov.w	r0, #4294967295
 80072d0:	e7e9      	b.n	80072a6 <__ssputs_r+0x8a>
	...

080072d4 <_svfiprintf_r>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	4698      	mov	r8, r3
 80072da:	898b      	ldrh	r3, [r1, #12]
 80072dc:	061b      	lsls	r3, r3, #24
 80072de:	b09d      	sub	sp, #116	@ 0x74
 80072e0:	4607      	mov	r7, r0
 80072e2:	460d      	mov	r5, r1
 80072e4:	4614      	mov	r4, r2
 80072e6:	d510      	bpl.n	800730a <_svfiprintf_r+0x36>
 80072e8:	690b      	ldr	r3, [r1, #16]
 80072ea:	b973      	cbnz	r3, 800730a <_svfiprintf_r+0x36>
 80072ec:	2140      	movs	r1, #64	@ 0x40
 80072ee:	f7ff fb87 	bl	8006a00 <_malloc_r>
 80072f2:	6028      	str	r0, [r5, #0]
 80072f4:	6128      	str	r0, [r5, #16]
 80072f6:	b930      	cbnz	r0, 8007306 <_svfiprintf_r+0x32>
 80072f8:	230c      	movs	r3, #12
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007300:	b01d      	add	sp, #116	@ 0x74
 8007302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007306:	2340      	movs	r3, #64	@ 0x40
 8007308:	616b      	str	r3, [r5, #20]
 800730a:	2300      	movs	r3, #0
 800730c:	9309      	str	r3, [sp, #36]	@ 0x24
 800730e:	2320      	movs	r3, #32
 8007310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007314:	f8cd 800c 	str.w	r8, [sp, #12]
 8007318:	2330      	movs	r3, #48	@ 0x30
 800731a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074b8 <_svfiprintf_r+0x1e4>
 800731e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007322:	f04f 0901 	mov.w	r9, #1
 8007326:	4623      	mov	r3, r4
 8007328:	469a      	mov	sl, r3
 800732a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800732e:	b10a      	cbz	r2, 8007334 <_svfiprintf_r+0x60>
 8007330:	2a25      	cmp	r2, #37	@ 0x25
 8007332:	d1f9      	bne.n	8007328 <_svfiprintf_r+0x54>
 8007334:	ebba 0b04 	subs.w	fp, sl, r4
 8007338:	d00b      	beq.n	8007352 <_svfiprintf_r+0x7e>
 800733a:	465b      	mov	r3, fp
 800733c:	4622      	mov	r2, r4
 800733e:	4629      	mov	r1, r5
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff ff6b 	bl	800721c <__ssputs_r>
 8007346:	3001      	adds	r0, #1
 8007348:	f000 80a7 	beq.w	800749a <_svfiprintf_r+0x1c6>
 800734c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800734e:	445a      	add	r2, fp
 8007350:	9209      	str	r2, [sp, #36]	@ 0x24
 8007352:	f89a 3000 	ldrb.w	r3, [sl]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 809f 	beq.w	800749a <_svfiprintf_r+0x1c6>
 800735c:	2300      	movs	r3, #0
 800735e:	f04f 32ff 	mov.w	r2, #4294967295
 8007362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007366:	f10a 0a01 	add.w	sl, sl, #1
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	9307      	str	r3, [sp, #28]
 800736e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007372:	931a      	str	r3, [sp, #104]	@ 0x68
 8007374:	4654      	mov	r4, sl
 8007376:	2205      	movs	r2, #5
 8007378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737c:	484e      	ldr	r0, [pc, #312]	@ (80074b8 <_svfiprintf_r+0x1e4>)
 800737e:	f7f8 ff47 	bl	8000210 <memchr>
 8007382:	9a04      	ldr	r2, [sp, #16]
 8007384:	b9d8      	cbnz	r0, 80073be <_svfiprintf_r+0xea>
 8007386:	06d0      	lsls	r0, r2, #27
 8007388:	bf44      	itt	mi
 800738a:	2320      	movmi	r3, #32
 800738c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007390:	0711      	lsls	r1, r2, #28
 8007392:	bf44      	itt	mi
 8007394:	232b      	movmi	r3, #43	@ 0x2b
 8007396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800739a:	f89a 3000 	ldrb.w	r3, [sl]
 800739e:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a0:	d015      	beq.n	80073ce <_svfiprintf_r+0xfa>
 80073a2:	9a07      	ldr	r2, [sp, #28]
 80073a4:	4654      	mov	r4, sl
 80073a6:	2000      	movs	r0, #0
 80073a8:	f04f 0c0a 	mov.w	ip, #10
 80073ac:	4621      	mov	r1, r4
 80073ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073b2:	3b30      	subs	r3, #48	@ 0x30
 80073b4:	2b09      	cmp	r3, #9
 80073b6:	d94b      	bls.n	8007450 <_svfiprintf_r+0x17c>
 80073b8:	b1b0      	cbz	r0, 80073e8 <_svfiprintf_r+0x114>
 80073ba:	9207      	str	r2, [sp, #28]
 80073bc:	e014      	b.n	80073e8 <_svfiprintf_r+0x114>
 80073be:	eba0 0308 	sub.w	r3, r0, r8
 80073c2:	fa09 f303 	lsl.w	r3, r9, r3
 80073c6:	4313      	orrs	r3, r2
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	46a2      	mov	sl, r4
 80073cc:	e7d2      	b.n	8007374 <_svfiprintf_r+0xa0>
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	1d19      	adds	r1, r3, #4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	9103      	str	r1, [sp, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bfbb      	ittet	lt
 80073da:	425b      	neglt	r3, r3
 80073dc:	f042 0202 	orrlt.w	r2, r2, #2
 80073e0:	9307      	strge	r3, [sp, #28]
 80073e2:	9307      	strlt	r3, [sp, #28]
 80073e4:	bfb8      	it	lt
 80073e6:	9204      	strlt	r2, [sp, #16]
 80073e8:	7823      	ldrb	r3, [r4, #0]
 80073ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80073ec:	d10a      	bne.n	8007404 <_svfiprintf_r+0x130>
 80073ee:	7863      	ldrb	r3, [r4, #1]
 80073f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f2:	d132      	bne.n	800745a <_svfiprintf_r+0x186>
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	1d1a      	adds	r2, r3, #4
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	9203      	str	r2, [sp, #12]
 80073fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007400:	3402      	adds	r4, #2
 8007402:	9305      	str	r3, [sp, #20]
 8007404:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074c8 <_svfiprintf_r+0x1f4>
 8007408:	7821      	ldrb	r1, [r4, #0]
 800740a:	2203      	movs	r2, #3
 800740c:	4650      	mov	r0, sl
 800740e:	f7f8 feff 	bl	8000210 <memchr>
 8007412:	b138      	cbz	r0, 8007424 <_svfiprintf_r+0x150>
 8007414:	9b04      	ldr	r3, [sp, #16]
 8007416:	eba0 000a 	sub.w	r0, r0, sl
 800741a:	2240      	movs	r2, #64	@ 0x40
 800741c:	4082      	lsls	r2, r0
 800741e:	4313      	orrs	r3, r2
 8007420:	3401      	adds	r4, #1
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007428:	4824      	ldr	r0, [pc, #144]	@ (80074bc <_svfiprintf_r+0x1e8>)
 800742a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800742e:	2206      	movs	r2, #6
 8007430:	f7f8 feee 	bl	8000210 <memchr>
 8007434:	2800      	cmp	r0, #0
 8007436:	d036      	beq.n	80074a6 <_svfiprintf_r+0x1d2>
 8007438:	4b21      	ldr	r3, [pc, #132]	@ (80074c0 <_svfiprintf_r+0x1ec>)
 800743a:	bb1b      	cbnz	r3, 8007484 <_svfiprintf_r+0x1b0>
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	3307      	adds	r3, #7
 8007440:	f023 0307 	bic.w	r3, r3, #7
 8007444:	3308      	adds	r3, #8
 8007446:	9303      	str	r3, [sp, #12]
 8007448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744a:	4433      	add	r3, r6
 800744c:	9309      	str	r3, [sp, #36]	@ 0x24
 800744e:	e76a      	b.n	8007326 <_svfiprintf_r+0x52>
 8007450:	fb0c 3202 	mla	r2, ip, r2, r3
 8007454:	460c      	mov	r4, r1
 8007456:	2001      	movs	r0, #1
 8007458:	e7a8      	b.n	80073ac <_svfiprintf_r+0xd8>
 800745a:	2300      	movs	r3, #0
 800745c:	3401      	adds	r4, #1
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	4619      	mov	r1, r3
 8007462:	f04f 0c0a 	mov.w	ip, #10
 8007466:	4620      	mov	r0, r4
 8007468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800746c:	3a30      	subs	r2, #48	@ 0x30
 800746e:	2a09      	cmp	r2, #9
 8007470:	d903      	bls.n	800747a <_svfiprintf_r+0x1a6>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0c6      	beq.n	8007404 <_svfiprintf_r+0x130>
 8007476:	9105      	str	r1, [sp, #20]
 8007478:	e7c4      	b.n	8007404 <_svfiprintf_r+0x130>
 800747a:	fb0c 2101 	mla	r1, ip, r1, r2
 800747e:	4604      	mov	r4, r0
 8007480:	2301      	movs	r3, #1
 8007482:	e7f0      	b.n	8007466 <_svfiprintf_r+0x192>
 8007484:	ab03      	add	r3, sp, #12
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	462a      	mov	r2, r5
 800748a:	4b0e      	ldr	r3, [pc, #56]	@ (80074c4 <_svfiprintf_r+0x1f0>)
 800748c:	a904      	add	r1, sp, #16
 800748e:	4638      	mov	r0, r7
 8007490:	f7fd fe74 	bl	800517c <_printf_float>
 8007494:	1c42      	adds	r2, r0, #1
 8007496:	4606      	mov	r6, r0
 8007498:	d1d6      	bne.n	8007448 <_svfiprintf_r+0x174>
 800749a:	89ab      	ldrh	r3, [r5, #12]
 800749c:	065b      	lsls	r3, r3, #25
 800749e:	f53f af2d 	bmi.w	80072fc <_svfiprintf_r+0x28>
 80074a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074a4:	e72c      	b.n	8007300 <_svfiprintf_r+0x2c>
 80074a6:	ab03      	add	r3, sp, #12
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	462a      	mov	r2, r5
 80074ac:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <_svfiprintf_r+0x1f0>)
 80074ae:	a904      	add	r1, sp, #16
 80074b0:	4638      	mov	r0, r7
 80074b2:	f7fe f8fb 	bl	80056ac <_printf_i>
 80074b6:	e7ed      	b.n	8007494 <_svfiprintf_r+0x1c0>
 80074b8:	08007fa0 	.word	0x08007fa0
 80074bc:	08007faa 	.word	0x08007faa
 80074c0:	0800517d 	.word	0x0800517d
 80074c4:	0800721d 	.word	0x0800721d
 80074c8:	08007fa6 	.word	0x08007fa6

080074cc <__sflush_r>:
 80074cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d4:	0716      	lsls	r6, r2, #28
 80074d6:	4605      	mov	r5, r0
 80074d8:	460c      	mov	r4, r1
 80074da:	d454      	bmi.n	8007586 <__sflush_r+0xba>
 80074dc:	684b      	ldr	r3, [r1, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dc02      	bgt.n	80074e8 <__sflush_r+0x1c>
 80074e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dd48      	ble.n	800757a <__sflush_r+0xae>
 80074e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074ea:	2e00      	cmp	r6, #0
 80074ec:	d045      	beq.n	800757a <__sflush_r+0xae>
 80074ee:	2300      	movs	r3, #0
 80074f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074f4:	682f      	ldr	r7, [r5, #0]
 80074f6:	6a21      	ldr	r1, [r4, #32]
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	d030      	beq.n	800755e <__sflush_r+0x92>
 80074fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	0759      	lsls	r1, r3, #29
 8007502:	d505      	bpl.n	8007510 <__sflush_r+0x44>
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	1ad2      	subs	r2, r2, r3
 8007508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800750a:	b10b      	cbz	r3, 8007510 <__sflush_r+0x44>
 800750c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800750e:	1ad2      	subs	r2, r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007514:	6a21      	ldr	r1, [r4, #32]
 8007516:	4628      	mov	r0, r5
 8007518:	47b0      	blx	r6
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	d106      	bne.n	800752e <__sflush_r+0x62>
 8007520:	6829      	ldr	r1, [r5, #0]
 8007522:	291d      	cmp	r1, #29
 8007524:	d82b      	bhi.n	800757e <__sflush_r+0xb2>
 8007526:	4a2a      	ldr	r2, [pc, #168]	@ (80075d0 <__sflush_r+0x104>)
 8007528:	410a      	asrs	r2, r1
 800752a:	07d6      	lsls	r6, r2, #31
 800752c:	d427      	bmi.n	800757e <__sflush_r+0xb2>
 800752e:	2200      	movs	r2, #0
 8007530:	6062      	str	r2, [r4, #4]
 8007532:	04d9      	lsls	r1, r3, #19
 8007534:	6922      	ldr	r2, [r4, #16]
 8007536:	6022      	str	r2, [r4, #0]
 8007538:	d504      	bpl.n	8007544 <__sflush_r+0x78>
 800753a:	1c42      	adds	r2, r0, #1
 800753c:	d101      	bne.n	8007542 <__sflush_r+0x76>
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	b903      	cbnz	r3, 8007544 <__sflush_r+0x78>
 8007542:	6560      	str	r0, [r4, #84]	@ 0x54
 8007544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007546:	602f      	str	r7, [r5, #0]
 8007548:	b1b9      	cbz	r1, 800757a <__sflush_r+0xae>
 800754a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800754e:	4299      	cmp	r1, r3
 8007550:	d002      	beq.n	8007558 <__sflush_r+0x8c>
 8007552:	4628      	mov	r0, r5
 8007554:	f7ff f9e0 	bl	8006918 <_free_r>
 8007558:	2300      	movs	r3, #0
 800755a:	6363      	str	r3, [r4, #52]	@ 0x34
 800755c:	e00d      	b.n	800757a <__sflush_r+0xae>
 800755e:	2301      	movs	r3, #1
 8007560:	4628      	mov	r0, r5
 8007562:	47b0      	blx	r6
 8007564:	4602      	mov	r2, r0
 8007566:	1c50      	adds	r0, r2, #1
 8007568:	d1c9      	bne.n	80074fe <__sflush_r+0x32>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0c6      	beq.n	80074fe <__sflush_r+0x32>
 8007570:	2b1d      	cmp	r3, #29
 8007572:	d001      	beq.n	8007578 <__sflush_r+0xac>
 8007574:	2b16      	cmp	r3, #22
 8007576:	d11e      	bne.n	80075b6 <__sflush_r+0xea>
 8007578:	602f      	str	r7, [r5, #0]
 800757a:	2000      	movs	r0, #0
 800757c:	e022      	b.n	80075c4 <__sflush_r+0xf8>
 800757e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007582:	b21b      	sxth	r3, r3
 8007584:	e01b      	b.n	80075be <__sflush_r+0xf2>
 8007586:	690f      	ldr	r7, [r1, #16]
 8007588:	2f00      	cmp	r7, #0
 800758a:	d0f6      	beq.n	800757a <__sflush_r+0xae>
 800758c:	0793      	lsls	r3, r2, #30
 800758e:	680e      	ldr	r6, [r1, #0]
 8007590:	bf08      	it	eq
 8007592:	694b      	ldreq	r3, [r1, #20]
 8007594:	600f      	str	r7, [r1, #0]
 8007596:	bf18      	it	ne
 8007598:	2300      	movne	r3, #0
 800759a:	eba6 0807 	sub.w	r8, r6, r7
 800759e:	608b      	str	r3, [r1, #8]
 80075a0:	f1b8 0f00 	cmp.w	r8, #0
 80075a4:	dde9      	ble.n	800757a <__sflush_r+0xae>
 80075a6:	6a21      	ldr	r1, [r4, #32]
 80075a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80075aa:	4643      	mov	r3, r8
 80075ac:	463a      	mov	r2, r7
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b0      	blx	r6
 80075b2:	2800      	cmp	r0, #0
 80075b4:	dc08      	bgt.n	80075c8 <__sflush_r+0xfc>
 80075b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075be:	81a3      	strh	r3, [r4, #12]
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c8:	4407      	add	r7, r0
 80075ca:	eba8 0800 	sub.w	r8, r8, r0
 80075ce:	e7e7      	b.n	80075a0 <__sflush_r+0xd4>
 80075d0:	dfbffffe 	.word	0xdfbffffe

080075d4 <_fflush_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	690b      	ldr	r3, [r1, #16]
 80075d8:	4605      	mov	r5, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	b913      	cbnz	r3, 80075e4 <_fflush_r+0x10>
 80075de:	2500      	movs	r5, #0
 80075e0:	4628      	mov	r0, r5
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	b118      	cbz	r0, 80075ee <_fflush_r+0x1a>
 80075e6:	6a03      	ldr	r3, [r0, #32]
 80075e8:	b90b      	cbnz	r3, 80075ee <_fflush_r+0x1a>
 80075ea:	f7fe fa0b 	bl	8005a04 <__sinit>
 80075ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f3      	beq.n	80075de <_fflush_r+0xa>
 80075f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075f8:	07d0      	lsls	r0, r2, #31
 80075fa:	d404      	bmi.n	8007606 <_fflush_r+0x32>
 80075fc:	0599      	lsls	r1, r3, #22
 80075fe:	d402      	bmi.n	8007606 <_fflush_r+0x32>
 8007600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007602:	f7fe fb38 	bl	8005c76 <__retarget_lock_acquire_recursive>
 8007606:	4628      	mov	r0, r5
 8007608:	4621      	mov	r1, r4
 800760a:	f7ff ff5f 	bl	80074cc <__sflush_r>
 800760e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007610:	07da      	lsls	r2, r3, #31
 8007612:	4605      	mov	r5, r0
 8007614:	d4e4      	bmi.n	80075e0 <_fflush_r+0xc>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	059b      	lsls	r3, r3, #22
 800761a:	d4e1      	bmi.n	80075e0 <_fflush_r+0xc>
 800761c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800761e:	f7fe fb2b 	bl	8005c78 <__retarget_lock_release_recursive>
 8007622:	e7dd      	b.n	80075e0 <_fflush_r+0xc>

08007624 <memmove>:
 8007624:	4288      	cmp	r0, r1
 8007626:	b510      	push	{r4, lr}
 8007628:	eb01 0402 	add.w	r4, r1, r2
 800762c:	d902      	bls.n	8007634 <memmove+0x10>
 800762e:	4284      	cmp	r4, r0
 8007630:	4623      	mov	r3, r4
 8007632:	d807      	bhi.n	8007644 <memmove+0x20>
 8007634:	1e43      	subs	r3, r0, #1
 8007636:	42a1      	cmp	r1, r4
 8007638:	d008      	beq.n	800764c <memmove+0x28>
 800763a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800763e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007642:	e7f8      	b.n	8007636 <memmove+0x12>
 8007644:	4402      	add	r2, r0
 8007646:	4601      	mov	r1, r0
 8007648:	428a      	cmp	r2, r1
 800764a:	d100      	bne.n	800764e <memmove+0x2a>
 800764c:	bd10      	pop	{r4, pc}
 800764e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007656:	e7f7      	b.n	8007648 <memmove+0x24>

08007658 <_sbrk_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	@ (8007674 <_sbrk_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fa fd52 	bl	800210c <_sbrk>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_sbrk_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_sbrk_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000448 	.word	0x20000448

08007678 <memcpy>:
 8007678:	440a      	add	r2, r1
 800767a:	4291      	cmp	r1, r2
 800767c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007680:	d100      	bne.n	8007684 <memcpy+0xc>
 8007682:	4770      	bx	lr
 8007684:	b510      	push	{r4, lr}
 8007686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800768a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800768e:	4291      	cmp	r1, r2
 8007690:	d1f9      	bne.n	8007686 <memcpy+0xe>
 8007692:	bd10      	pop	{r4, pc}

08007694 <__assert_func>:
 8007694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007696:	4614      	mov	r4, r2
 8007698:	461a      	mov	r2, r3
 800769a:	4b09      	ldr	r3, [pc, #36]	@ (80076c0 <__assert_func+0x2c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4605      	mov	r5, r0
 80076a0:	68d8      	ldr	r0, [r3, #12]
 80076a2:	b954      	cbnz	r4, 80076ba <__assert_func+0x26>
 80076a4:	4b07      	ldr	r3, [pc, #28]	@ (80076c4 <__assert_func+0x30>)
 80076a6:	461c      	mov	r4, r3
 80076a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076ac:	9100      	str	r1, [sp, #0]
 80076ae:	462b      	mov	r3, r5
 80076b0:	4905      	ldr	r1, [pc, #20]	@ (80076c8 <__assert_func+0x34>)
 80076b2:	f000 f86f 	bl	8007794 <fiprintf>
 80076b6:	f000 f87f 	bl	80077b8 <abort>
 80076ba:	4b04      	ldr	r3, [pc, #16]	@ (80076cc <__assert_func+0x38>)
 80076bc:	e7f4      	b.n	80076a8 <__assert_func+0x14>
 80076be:	bf00      	nop
 80076c0:	20000018 	.word	0x20000018
 80076c4:	08007ff6 	.word	0x08007ff6
 80076c8:	08007fc8 	.word	0x08007fc8
 80076cc:	08007fbb 	.word	0x08007fbb

080076d0 <_calloc_r>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	fba1 5402 	umull	r5, r4, r1, r2
 80076d6:	b93c      	cbnz	r4, 80076e8 <_calloc_r+0x18>
 80076d8:	4629      	mov	r1, r5
 80076da:	f7ff f991 	bl	8006a00 <_malloc_r>
 80076de:	4606      	mov	r6, r0
 80076e0:	b928      	cbnz	r0, 80076ee <_calloc_r+0x1e>
 80076e2:	2600      	movs	r6, #0
 80076e4:	4630      	mov	r0, r6
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	220c      	movs	r2, #12
 80076ea:	6002      	str	r2, [r0, #0]
 80076ec:	e7f9      	b.n	80076e2 <_calloc_r+0x12>
 80076ee:	462a      	mov	r2, r5
 80076f0:	4621      	mov	r1, r4
 80076f2:	f7fe fa34 	bl	8005b5e <memset>
 80076f6:	e7f5      	b.n	80076e4 <_calloc_r+0x14>

080076f8 <__ascii_mbtowc>:
 80076f8:	b082      	sub	sp, #8
 80076fa:	b901      	cbnz	r1, 80076fe <__ascii_mbtowc+0x6>
 80076fc:	a901      	add	r1, sp, #4
 80076fe:	b142      	cbz	r2, 8007712 <__ascii_mbtowc+0x1a>
 8007700:	b14b      	cbz	r3, 8007716 <__ascii_mbtowc+0x1e>
 8007702:	7813      	ldrb	r3, [r2, #0]
 8007704:	600b      	str	r3, [r1, #0]
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	1e10      	subs	r0, r2, #0
 800770a:	bf18      	it	ne
 800770c:	2001      	movne	r0, #1
 800770e:	b002      	add	sp, #8
 8007710:	4770      	bx	lr
 8007712:	4610      	mov	r0, r2
 8007714:	e7fb      	b.n	800770e <__ascii_mbtowc+0x16>
 8007716:	f06f 0001 	mvn.w	r0, #1
 800771a:	e7f8      	b.n	800770e <__ascii_mbtowc+0x16>

0800771c <_realloc_r>:
 800771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007720:	4680      	mov	r8, r0
 8007722:	4615      	mov	r5, r2
 8007724:	460c      	mov	r4, r1
 8007726:	b921      	cbnz	r1, 8007732 <_realloc_r+0x16>
 8007728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800772c:	4611      	mov	r1, r2
 800772e:	f7ff b967 	b.w	8006a00 <_malloc_r>
 8007732:	b92a      	cbnz	r2, 8007740 <_realloc_r+0x24>
 8007734:	f7ff f8f0 	bl	8006918 <_free_r>
 8007738:	2400      	movs	r4, #0
 800773a:	4620      	mov	r0, r4
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	f000 f841 	bl	80077c6 <_malloc_usable_size_r>
 8007744:	4285      	cmp	r5, r0
 8007746:	4606      	mov	r6, r0
 8007748:	d802      	bhi.n	8007750 <_realloc_r+0x34>
 800774a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800774e:	d8f4      	bhi.n	800773a <_realloc_r+0x1e>
 8007750:	4629      	mov	r1, r5
 8007752:	4640      	mov	r0, r8
 8007754:	f7ff f954 	bl	8006a00 <_malloc_r>
 8007758:	4607      	mov	r7, r0
 800775a:	2800      	cmp	r0, #0
 800775c:	d0ec      	beq.n	8007738 <_realloc_r+0x1c>
 800775e:	42b5      	cmp	r5, r6
 8007760:	462a      	mov	r2, r5
 8007762:	4621      	mov	r1, r4
 8007764:	bf28      	it	cs
 8007766:	4632      	movcs	r2, r6
 8007768:	f7ff ff86 	bl	8007678 <memcpy>
 800776c:	4621      	mov	r1, r4
 800776e:	4640      	mov	r0, r8
 8007770:	f7ff f8d2 	bl	8006918 <_free_r>
 8007774:	463c      	mov	r4, r7
 8007776:	e7e0      	b.n	800773a <_realloc_r+0x1e>

08007778 <__ascii_wctomb>:
 8007778:	4603      	mov	r3, r0
 800777a:	4608      	mov	r0, r1
 800777c:	b141      	cbz	r1, 8007790 <__ascii_wctomb+0x18>
 800777e:	2aff      	cmp	r2, #255	@ 0xff
 8007780:	d904      	bls.n	800778c <__ascii_wctomb+0x14>
 8007782:	228a      	movs	r2, #138	@ 0x8a
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	f04f 30ff 	mov.w	r0, #4294967295
 800778a:	4770      	bx	lr
 800778c:	700a      	strb	r2, [r1, #0]
 800778e:	2001      	movs	r0, #1
 8007790:	4770      	bx	lr
	...

08007794 <fiprintf>:
 8007794:	b40e      	push	{r1, r2, r3}
 8007796:	b503      	push	{r0, r1, lr}
 8007798:	4601      	mov	r1, r0
 800779a:	ab03      	add	r3, sp, #12
 800779c:	4805      	ldr	r0, [pc, #20]	@ (80077b4 <fiprintf+0x20>)
 800779e:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a2:	6800      	ldr	r0, [r0, #0]
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	f000 f83f 	bl	8007828 <_vfiprintf_r>
 80077aa:	b002      	add	sp, #8
 80077ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b0:	b003      	add	sp, #12
 80077b2:	4770      	bx	lr
 80077b4:	20000018 	.word	0x20000018

080077b8 <abort>:
 80077b8:	b508      	push	{r3, lr}
 80077ba:	2006      	movs	r0, #6
 80077bc:	f000 fa08 	bl	8007bd0 <raise>
 80077c0:	2001      	movs	r0, #1
 80077c2:	f7fa fc2a 	bl	800201a <_exit>

080077c6 <_malloc_usable_size_r>:
 80077c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ca:	1f18      	subs	r0, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	bfbc      	itt	lt
 80077d0:	580b      	ldrlt	r3, [r1, r0]
 80077d2:	18c0      	addlt	r0, r0, r3
 80077d4:	4770      	bx	lr

080077d6 <__sfputc_r>:
 80077d6:	6893      	ldr	r3, [r2, #8]
 80077d8:	3b01      	subs	r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	b410      	push	{r4}
 80077de:	6093      	str	r3, [r2, #8]
 80077e0:	da08      	bge.n	80077f4 <__sfputc_r+0x1e>
 80077e2:	6994      	ldr	r4, [r2, #24]
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	db01      	blt.n	80077ec <__sfputc_r+0x16>
 80077e8:	290a      	cmp	r1, #10
 80077ea:	d103      	bne.n	80077f4 <__sfputc_r+0x1e>
 80077ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077f0:	f000 b932 	b.w	8007a58 <__swbuf_r>
 80077f4:	6813      	ldr	r3, [r2, #0]
 80077f6:	1c58      	adds	r0, r3, #1
 80077f8:	6010      	str	r0, [r2, #0]
 80077fa:	7019      	strb	r1, [r3, #0]
 80077fc:	4608      	mov	r0, r1
 80077fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007802:	4770      	bx	lr

08007804 <__sfputs_r>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	4614      	mov	r4, r2
 800780c:	18d5      	adds	r5, r2, r3
 800780e:	42ac      	cmp	r4, r5
 8007810:	d101      	bne.n	8007816 <__sfputs_r+0x12>
 8007812:	2000      	movs	r0, #0
 8007814:	e007      	b.n	8007826 <__sfputs_r+0x22>
 8007816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781a:	463a      	mov	r2, r7
 800781c:	4630      	mov	r0, r6
 800781e:	f7ff ffda 	bl	80077d6 <__sfputc_r>
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	d1f3      	bne.n	800780e <__sfputs_r+0xa>
 8007826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007828 <_vfiprintf_r>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	460d      	mov	r5, r1
 800782e:	b09d      	sub	sp, #116	@ 0x74
 8007830:	4614      	mov	r4, r2
 8007832:	4698      	mov	r8, r3
 8007834:	4606      	mov	r6, r0
 8007836:	b118      	cbz	r0, 8007840 <_vfiprintf_r+0x18>
 8007838:	6a03      	ldr	r3, [r0, #32]
 800783a:	b90b      	cbnz	r3, 8007840 <_vfiprintf_r+0x18>
 800783c:	f7fe f8e2 	bl	8005a04 <__sinit>
 8007840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007842:	07d9      	lsls	r1, r3, #31
 8007844:	d405      	bmi.n	8007852 <_vfiprintf_r+0x2a>
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	059a      	lsls	r2, r3, #22
 800784a:	d402      	bmi.n	8007852 <_vfiprintf_r+0x2a>
 800784c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800784e:	f7fe fa12 	bl	8005c76 <__retarget_lock_acquire_recursive>
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	071b      	lsls	r3, r3, #28
 8007856:	d501      	bpl.n	800785c <_vfiprintf_r+0x34>
 8007858:	692b      	ldr	r3, [r5, #16]
 800785a:	b99b      	cbnz	r3, 8007884 <_vfiprintf_r+0x5c>
 800785c:	4629      	mov	r1, r5
 800785e:	4630      	mov	r0, r6
 8007860:	f000 f938 	bl	8007ad4 <__swsetup_r>
 8007864:	b170      	cbz	r0, 8007884 <_vfiprintf_r+0x5c>
 8007866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007868:	07dc      	lsls	r4, r3, #31
 800786a:	d504      	bpl.n	8007876 <_vfiprintf_r+0x4e>
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	b01d      	add	sp, #116	@ 0x74
 8007872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	0598      	lsls	r0, r3, #22
 800787a:	d4f7      	bmi.n	800786c <_vfiprintf_r+0x44>
 800787c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800787e:	f7fe f9fb 	bl	8005c78 <__retarget_lock_release_recursive>
 8007882:	e7f3      	b.n	800786c <_vfiprintf_r+0x44>
 8007884:	2300      	movs	r3, #0
 8007886:	9309      	str	r3, [sp, #36]	@ 0x24
 8007888:	2320      	movs	r3, #32
 800788a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800788e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007892:	2330      	movs	r3, #48	@ 0x30
 8007894:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a44 <_vfiprintf_r+0x21c>
 8007898:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800789c:	f04f 0901 	mov.w	r9, #1
 80078a0:	4623      	mov	r3, r4
 80078a2:	469a      	mov	sl, r3
 80078a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a8:	b10a      	cbz	r2, 80078ae <_vfiprintf_r+0x86>
 80078aa:	2a25      	cmp	r2, #37	@ 0x25
 80078ac:	d1f9      	bne.n	80078a2 <_vfiprintf_r+0x7a>
 80078ae:	ebba 0b04 	subs.w	fp, sl, r4
 80078b2:	d00b      	beq.n	80078cc <_vfiprintf_r+0xa4>
 80078b4:	465b      	mov	r3, fp
 80078b6:	4622      	mov	r2, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7ff ffa2 	bl	8007804 <__sfputs_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	f000 80a7 	beq.w	8007a14 <_vfiprintf_r+0x1ec>
 80078c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c8:	445a      	add	r2, fp
 80078ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80078cc:	f89a 3000 	ldrb.w	r3, [sl]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 809f 	beq.w	8007a14 <_vfiprintf_r+0x1ec>
 80078d6:	2300      	movs	r3, #0
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295
 80078dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e0:	f10a 0a01 	add.w	sl, sl, #1
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80078ee:	4654      	mov	r4, sl
 80078f0:	2205      	movs	r2, #5
 80078f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f6:	4853      	ldr	r0, [pc, #332]	@ (8007a44 <_vfiprintf_r+0x21c>)
 80078f8:	f7f8 fc8a 	bl	8000210 <memchr>
 80078fc:	9a04      	ldr	r2, [sp, #16]
 80078fe:	b9d8      	cbnz	r0, 8007938 <_vfiprintf_r+0x110>
 8007900:	06d1      	lsls	r1, r2, #27
 8007902:	bf44      	itt	mi
 8007904:	2320      	movmi	r3, #32
 8007906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800790a:	0713      	lsls	r3, r2, #28
 800790c:	bf44      	itt	mi
 800790e:	232b      	movmi	r3, #43	@ 0x2b
 8007910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007914:	f89a 3000 	ldrb.w	r3, [sl]
 8007918:	2b2a      	cmp	r3, #42	@ 0x2a
 800791a:	d015      	beq.n	8007948 <_vfiprintf_r+0x120>
 800791c:	9a07      	ldr	r2, [sp, #28]
 800791e:	4654      	mov	r4, sl
 8007920:	2000      	movs	r0, #0
 8007922:	f04f 0c0a 	mov.w	ip, #10
 8007926:	4621      	mov	r1, r4
 8007928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792c:	3b30      	subs	r3, #48	@ 0x30
 800792e:	2b09      	cmp	r3, #9
 8007930:	d94b      	bls.n	80079ca <_vfiprintf_r+0x1a2>
 8007932:	b1b0      	cbz	r0, 8007962 <_vfiprintf_r+0x13a>
 8007934:	9207      	str	r2, [sp, #28]
 8007936:	e014      	b.n	8007962 <_vfiprintf_r+0x13a>
 8007938:	eba0 0308 	sub.w	r3, r0, r8
 800793c:	fa09 f303 	lsl.w	r3, r9, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	46a2      	mov	sl, r4
 8007946:	e7d2      	b.n	80078ee <_vfiprintf_r+0xc6>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	1d19      	adds	r1, r3, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	9103      	str	r1, [sp, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	bfbb      	ittet	lt
 8007954:	425b      	neglt	r3, r3
 8007956:	f042 0202 	orrlt.w	r2, r2, #2
 800795a:	9307      	strge	r3, [sp, #28]
 800795c:	9307      	strlt	r3, [sp, #28]
 800795e:	bfb8      	it	lt
 8007960:	9204      	strlt	r2, [sp, #16]
 8007962:	7823      	ldrb	r3, [r4, #0]
 8007964:	2b2e      	cmp	r3, #46	@ 0x2e
 8007966:	d10a      	bne.n	800797e <_vfiprintf_r+0x156>
 8007968:	7863      	ldrb	r3, [r4, #1]
 800796a:	2b2a      	cmp	r3, #42	@ 0x2a
 800796c:	d132      	bne.n	80079d4 <_vfiprintf_r+0x1ac>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	1d1a      	adds	r2, r3, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	9203      	str	r2, [sp, #12]
 8007976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800797a:	3402      	adds	r4, #2
 800797c:	9305      	str	r3, [sp, #20]
 800797e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a54 <_vfiprintf_r+0x22c>
 8007982:	7821      	ldrb	r1, [r4, #0]
 8007984:	2203      	movs	r2, #3
 8007986:	4650      	mov	r0, sl
 8007988:	f7f8 fc42 	bl	8000210 <memchr>
 800798c:	b138      	cbz	r0, 800799e <_vfiprintf_r+0x176>
 800798e:	9b04      	ldr	r3, [sp, #16]
 8007990:	eba0 000a 	sub.w	r0, r0, sl
 8007994:	2240      	movs	r2, #64	@ 0x40
 8007996:	4082      	lsls	r2, r0
 8007998:	4313      	orrs	r3, r2
 800799a:	3401      	adds	r4, #1
 800799c:	9304      	str	r3, [sp, #16]
 800799e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a2:	4829      	ldr	r0, [pc, #164]	@ (8007a48 <_vfiprintf_r+0x220>)
 80079a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079a8:	2206      	movs	r2, #6
 80079aa:	f7f8 fc31 	bl	8000210 <memchr>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d03f      	beq.n	8007a32 <_vfiprintf_r+0x20a>
 80079b2:	4b26      	ldr	r3, [pc, #152]	@ (8007a4c <_vfiprintf_r+0x224>)
 80079b4:	bb1b      	cbnz	r3, 80079fe <_vfiprintf_r+0x1d6>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	3307      	adds	r3, #7
 80079ba:	f023 0307 	bic.w	r3, r3, #7
 80079be:	3308      	adds	r3, #8
 80079c0:	9303      	str	r3, [sp, #12]
 80079c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c4:	443b      	add	r3, r7
 80079c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079c8:	e76a      	b.n	80078a0 <_vfiprintf_r+0x78>
 80079ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ce:	460c      	mov	r4, r1
 80079d0:	2001      	movs	r0, #1
 80079d2:	e7a8      	b.n	8007926 <_vfiprintf_r+0xfe>
 80079d4:	2300      	movs	r3, #0
 80079d6:	3401      	adds	r4, #1
 80079d8:	9305      	str	r3, [sp, #20]
 80079da:	4619      	mov	r1, r3
 80079dc:	f04f 0c0a 	mov.w	ip, #10
 80079e0:	4620      	mov	r0, r4
 80079e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e6:	3a30      	subs	r2, #48	@ 0x30
 80079e8:	2a09      	cmp	r2, #9
 80079ea:	d903      	bls.n	80079f4 <_vfiprintf_r+0x1cc>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0c6      	beq.n	800797e <_vfiprintf_r+0x156>
 80079f0:	9105      	str	r1, [sp, #20]
 80079f2:	e7c4      	b.n	800797e <_vfiprintf_r+0x156>
 80079f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079f8:	4604      	mov	r4, r0
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7f0      	b.n	80079e0 <_vfiprintf_r+0x1b8>
 80079fe:	ab03      	add	r3, sp, #12
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	462a      	mov	r2, r5
 8007a04:	4b12      	ldr	r3, [pc, #72]	@ (8007a50 <_vfiprintf_r+0x228>)
 8007a06:	a904      	add	r1, sp, #16
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f7fd fbb7 	bl	800517c <_printf_float>
 8007a0e:	4607      	mov	r7, r0
 8007a10:	1c78      	adds	r0, r7, #1
 8007a12:	d1d6      	bne.n	80079c2 <_vfiprintf_r+0x19a>
 8007a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a16:	07d9      	lsls	r1, r3, #31
 8007a18:	d405      	bmi.n	8007a26 <_vfiprintf_r+0x1fe>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	059a      	lsls	r2, r3, #22
 8007a1e:	d402      	bmi.n	8007a26 <_vfiprintf_r+0x1fe>
 8007a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a22:	f7fe f929 	bl	8005c78 <__retarget_lock_release_recursive>
 8007a26:	89ab      	ldrh	r3, [r5, #12]
 8007a28:	065b      	lsls	r3, r3, #25
 8007a2a:	f53f af1f 	bmi.w	800786c <_vfiprintf_r+0x44>
 8007a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a30:	e71e      	b.n	8007870 <_vfiprintf_r+0x48>
 8007a32:	ab03      	add	r3, sp, #12
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	462a      	mov	r2, r5
 8007a38:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <_vfiprintf_r+0x228>)
 8007a3a:	a904      	add	r1, sp, #16
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7fd fe35 	bl	80056ac <_printf_i>
 8007a42:	e7e4      	b.n	8007a0e <_vfiprintf_r+0x1e6>
 8007a44:	08007fa0 	.word	0x08007fa0
 8007a48:	08007faa 	.word	0x08007faa
 8007a4c:	0800517d 	.word	0x0800517d
 8007a50:	08007805 	.word	0x08007805
 8007a54:	08007fa6 	.word	0x08007fa6

08007a58 <__swbuf_r>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	460e      	mov	r6, r1
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	4605      	mov	r5, r0
 8007a60:	b118      	cbz	r0, 8007a6a <__swbuf_r+0x12>
 8007a62:	6a03      	ldr	r3, [r0, #32]
 8007a64:	b90b      	cbnz	r3, 8007a6a <__swbuf_r+0x12>
 8007a66:	f7fd ffcd 	bl	8005a04 <__sinit>
 8007a6a:	69a3      	ldr	r3, [r4, #24]
 8007a6c:	60a3      	str	r3, [r4, #8]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	071a      	lsls	r2, r3, #28
 8007a72:	d501      	bpl.n	8007a78 <__swbuf_r+0x20>
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	b943      	cbnz	r3, 8007a8a <__swbuf_r+0x32>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 f82a 	bl	8007ad4 <__swsetup_r>
 8007a80:	b118      	cbz	r0, 8007a8a <__swbuf_r+0x32>
 8007a82:	f04f 37ff 	mov.w	r7, #4294967295
 8007a86:	4638      	mov	r0, r7
 8007a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	1a98      	subs	r0, r3, r2
 8007a90:	6963      	ldr	r3, [r4, #20]
 8007a92:	b2f6      	uxtb	r6, r6
 8007a94:	4283      	cmp	r3, r0
 8007a96:	4637      	mov	r7, r6
 8007a98:	dc05      	bgt.n	8007aa6 <__swbuf_r+0x4e>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f7ff fd99 	bl	80075d4 <_fflush_r>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d1ed      	bne.n	8007a82 <__swbuf_r+0x2a>
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	60a3      	str	r3, [r4, #8]
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	701e      	strb	r6, [r3, #0]
 8007ab4:	6962      	ldr	r2, [r4, #20]
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d004      	beq.n	8007ac6 <__swbuf_r+0x6e>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	07db      	lsls	r3, r3, #31
 8007ac0:	d5e1      	bpl.n	8007a86 <__swbuf_r+0x2e>
 8007ac2:	2e0a      	cmp	r6, #10
 8007ac4:	d1df      	bne.n	8007a86 <__swbuf_r+0x2e>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f7ff fd83 	bl	80075d4 <_fflush_r>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d0d9      	beq.n	8007a86 <__swbuf_r+0x2e>
 8007ad2:	e7d6      	b.n	8007a82 <__swbuf_r+0x2a>

08007ad4 <__swsetup_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4b29      	ldr	r3, [pc, #164]	@ (8007b7c <__swsetup_r+0xa8>)
 8007ad8:	4605      	mov	r5, r0
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	460c      	mov	r4, r1
 8007ade:	b118      	cbz	r0, 8007ae8 <__swsetup_r+0x14>
 8007ae0:	6a03      	ldr	r3, [r0, #32]
 8007ae2:	b90b      	cbnz	r3, 8007ae8 <__swsetup_r+0x14>
 8007ae4:	f7fd ff8e 	bl	8005a04 <__sinit>
 8007ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aec:	0719      	lsls	r1, r3, #28
 8007aee:	d422      	bmi.n	8007b36 <__swsetup_r+0x62>
 8007af0:	06da      	lsls	r2, r3, #27
 8007af2:	d407      	bmi.n	8007b04 <__swsetup_r+0x30>
 8007af4:	2209      	movs	r2, #9
 8007af6:	602a      	str	r2, [r5, #0]
 8007af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295
 8007b02:	e033      	b.n	8007b6c <__swsetup_r+0x98>
 8007b04:	0758      	lsls	r0, r3, #29
 8007b06:	d512      	bpl.n	8007b2e <__swsetup_r+0x5a>
 8007b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b0a:	b141      	cbz	r1, 8007b1e <__swsetup_r+0x4a>
 8007b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b10:	4299      	cmp	r1, r3
 8007b12:	d002      	beq.n	8007b1a <__swsetup_r+0x46>
 8007b14:	4628      	mov	r0, r5
 8007b16:	f7fe feff 	bl	8006918 <_free_r>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	2300      	movs	r3, #0
 8007b28:	6063      	str	r3, [r4, #4]
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f043 0308 	orr.w	r3, r3, #8
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	b94b      	cbnz	r3, 8007b4e <__swsetup_r+0x7a>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b44:	d003      	beq.n	8007b4e <__swsetup_r+0x7a>
 8007b46:	4621      	mov	r1, r4
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f000 f883 	bl	8007c54 <__smakebuf_r>
 8007b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b52:	f013 0201 	ands.w	r2, r3, #1
 8007b56:	d00a      	beq.n	8007b6e <__swsetup_r+0x9a>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	60a2      	str	r2, [r4, #8]
 8007b5c:	6962      	ldr	r2, [r4, #20]
 8007b5e:	4252      	negs	r2, r2
 8007b60:	61a2      	str	r2, [r4, #24]
 8007b62:	6922      	ldr	r2, [r4, #16]
 8007b64:	b942      	cbnz	r2, 8007b78 <__swsetup_r+0xa4>
 8007b66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b6a:	d1c5      	bne.n	8007af8 <__swsetup_r+0x24>
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	0799      	lsls	r1, r3, #30
 8007b70:	bf58      	it	pl
 8007b72:	6962      	ldrpl	r2, [r4, #20]
 8007b74:	60a2      	str	r2, [r4, #8]
 8007b76:	e7f4      	b.n	8007b62 <__swsetup_r+0x8e>
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e7f7      	b.n	8007b6c <__swsetup_r+0x98>
 8007b7c:	20000018 	.word	0x20000018

08007b80 <_raise_r>:
 8007b80:	291f      	cmp	r1, #31
 8007b82:	b538      	push	{r3, r4, r5, lr}
 8007b84:	4605      	mov	r5, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	d904      	bls.n	8007b94 <_raise_r+0x14>
 8007b8a:	2316      	movs	r3, #22
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b96:	b112      	cbz	r2, 8007b9e <_raise_r+0x1e>
 8007b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b9c:	b94b      	cbnz	r3, 8007bb2 <_raise_r+0x32>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f000 f830 	bl	8007c04 <_getpid_r>
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4628      	mov	r0, r5
 8007baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bae:	f000 b817 	b.w	8007be0 <_kill_r>
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d00a      	beq.n	8007bcc <_raise_r+0x4c>
 8007bb6:	1c59      	adds	r1, r3, #1
 8007bb8:	d103      	bne.n	8007bc2 <_raise_r+0x42>
 8007bba:	2316      	movs	r3, #22
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7e7      	b.n	8007b92 <_raise_r+0x12>
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007bc8:	4620      	mov	r0, r4
 8007bca:	4798      	blx	r3
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e7e0      	b.n	8007b92 <_raise_r+0x12>

08007bd0 <raise>:
 8007bd0:	4b02      	ldr	r3, [pc, #8]	@ (8007bdc <raise+0xc>)
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	f7ff bfd3 	b.w	8007b80 <_raise_r>
 8007bda:	bf00      	nop
 8007bdc:	20000018 	.word	0x20000018

08007be0 <_kill_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d07      	ldr	r5, [pc, #28]	@ (8007c00 <_kill_r+0x20>)
 8007be4:	2300      	movs	r3, #0
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	602b      	str	r3, [r5, #0]
 8007bee:	f7fa fa04 	bl	8001ffa <_kill>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	d102      	bne.n	8007bfc <_kill_r+0x1c>
 8007bf6:	682b      	ldr	r3, [r5, #0]
 8007bf8:	b103      	cbz	r3, 8007bfc <_kill_r+0x1c>
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000448 	.word	0x20000448

08007c04 <_getpid_r>:
 8007c04:	f7fa b9f1 	b.w	8001fea <_getpid>

08007c08 <__swhatbuf_r>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	2900      	cmp	r1, #0
 8007c12:	b096      	sub	sp, #88	@ 0x58
 8007c14:	4615      	mov	r5, r2
 8007c16:	461e      	mov	r6, r3
 8007c18:	da0d      	bge.n	8007c36 <__swhatbuf_r+0x2e>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c20:	f04f 0100 	mov.w	r1, #0
 8007c24:	bf14      	ite	ne
 8007c26:	2340      	movne	r3, #64	@ 0x40
 8007c28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	6031      	str	r1, [r6, #0]
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	b016      	add	sp, #88	@ 0x58
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	466a      	mov	r2, sp
 8007c38:	f000 f848 	bl	8007ccc <_fstat_r>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	dbec      	blt.n	8007c1a <__swhatbuf_r+0x12>
 8007c40:	9901      	ldr	r1, [sp, #4]
 8007c42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c4a:	4259      	negs	r1, r3
 8007c4c:	4159      	adcs	r1, r3
 8007c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c52:	e7eb      	b.n	8007c2c <__swhatbuf_r+0x24>

08007c54 <__smakebuf_r>:
 8007c54:	898b      	ldrh	r3, [r1, #12]
 8007c56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c58:	079d      	lsls	r5, r3, #30
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	d507      	bpl.n	8007c70 <__smakebuf_r+0x1c>
 8007c60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	6123      	str	r3, [r4, #16]
 8007c68:	2301      	movs	r3, #1
 8007c6a:	6163      	str	r3, [r4, #20]
 8007c6c:	b003      	add	sp, #12
 8007c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c70:	ab01      	add	r3, sp, #4
 8007c72:	466a      	mov	r2, sp
 8007c74:	f7ff ffc8 	bl	8007c08 <__swhatbuf_r>
 8007c78:	9f00      	ldr	r7, [sp, #0]
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7fe febe 	bl	8006a00 <_malloc_r>
 8007c84:	b948      	cbnz	r0, 8007c9a <__smakebuf_r+0x46>
 8007c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8a:	059a      	lsls	r2, r3, #22
 8007c8c:	d4ee      	bmi.n	8007c6c <__smakebuf_r+0x18>
 8007c8e:	f023 0303 	bic.w	r3, r3, #3
 8007c92:	f043 0302 	orr.w	r3, r3, #2
 8007c96:	81a3      	strh	r3, [r4, #12]
 8007c98:	e7e2      	b.n	8007c60 <__smakebuf_r+0xc>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	6020      	str	r0, [r4, #0]
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	9b01      	ldr	r3, [sp, #4]
 8007ca6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007caa:	b15b      	cbz	r3, 8007cc4 <__smakebuf_r+0x70>
 8007cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 f81d 	bl	8007cf0 <_isatty_r>
 8007cb6:	b128      	cbz	r0, 8007cc4 <__smakebuf_r+0x70>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	431d      	orrs	r5, r3
 8007cc8:	81a5      	strh	r5, [r4, #12]
 8007cca:	e7cf      	b.n	8007c6c <__smakebuf_r+0x18>

08007ccc <_fstat_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d07      	ldr	r5, [pc, #28]	@ (8007cec <_fstat_r+0x20>)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	f7fa f9ee 	bl	80020ba <_fstat>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d102      	bne.n	8007ce8 <_fstat_r+0x1c>
 8007ce2:	682b      	ldr	r3, [r5, #0]
 8007ce4:	b103      	cbz	r3, 8007ce8 <_fstat_r+0x1c>
 8007ce6:	6023      	str	r3, [r4, #0]
 8007ce8:	bd38      	pop	{r3, r4, r5, pc}
 8007cea:	bf00      	nop
 8007cec:	20000448 	.word	0x20000448

08007cf0 <_isatty_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d06      	ldr	r5, [pc, #24]	@ (8007d0c <_isatty_r+0x1c>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7fa f9ed 	bl	80020da <_isatty>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_isatty_r+0x1a>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_isatty_r+0x1a>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20000448 	.word	0x20000448

08007d10 <_init>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	bf00      	nop
 8007d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d16:	bc08      	pop	{r3}
 8007d18:	469e      	mov	lr, r3
 8007d1a:	4770      	bx	lr

08007d1c <_fini>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr
